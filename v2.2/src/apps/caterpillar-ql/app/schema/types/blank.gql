type ProcessElement {
  role: String
  type: String
  id: String
  name: String
}
type Process {
  rootProcessID: String
  rootProcessName: String
  bpmnModel: String
  solidityCode: String
  abi: String
  bytecode: String
  indexToElement: [ProcessElement]
  worklistAbi: String
}
type WorkItemInput {
  name: String
}
type WorkItem {
  bundleId: String
  elementId: String,
  elementName: String,
  hrefs: [String],
  input: [WorkItemInput]
  pcases: [String],
  processAddress: String,
}
type InstanceState {
  bpmn: String
  workItems: [WorkItem]
}

type ProcessContract {
  id: String
  name: String
  address: String
  instanceState: InstanceState
  resources(role: String): [String]
}
type Model {
  id: String
  name: String
  bpmn: String
  solidity: String
}
type Policy {
  address: String
  model: String
  solidityCode: String
  abi: String
  bytecode: String
  indexToRole: [String]
  accessControlAbi: String
  accessControlBytecode: String
}
type RoleTask {
  address: String
  solidityCode: String
  abi: String
  bytecode: String
}

# The "Query" type is the root of all GraphQL queries.
type Query {
  accounts: [String]
  policies: [Policy]
  processes: [Process]
  registries: [Registry]
  roleTasks: [RoleTask]
}
# The "Mutation" type is the root of all GraphQL mutations.
type Mutation {
  addRegistry: Registry,
}