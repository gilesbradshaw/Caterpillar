"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug = _interopRequireDefault(require("debug"));

var _repo = require("../repo");

var _registryContract = _interopRequireDefault(require("../util/registry-contract"));

var _hexToId = _interopRequireDefault(require("../util/hex-to-id"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = async ({
  web3,
  registry: address
}) => {
  const contract = await (0, _registryContract.default)({
    address,
    web3
  });

  if (contract) {
    const models = await _repo.process.find({
      'bpmnModel': {
        $ne: 'empty'
      }
    });
    const children = await Promise.all(models.map(({
      _id
    }) => {
      (0, _debug.default)('caterpillarql:registry.models')('_id', {
        _id,
        is: web3.utils.fromAscii(_id.toString())
      });
      return contract.methods.childrenFor(web3.utils.fromAscii(_id.toString()), 0).call().then(x => x && (0, _hexToId.default)(web3)(x) === _id.toString() && _id.toString());
    }));
    (0, _debug.default)('caterpillarql:registry.models')('filtered-children', {
      children
    });
    return models.filter(({
      _id
    }) => children.includes(_id.toString())).map(({
      _id,
      rootProcessName: name,
      bpmnModel: bpmn,
      solidityCode: solidity
    }) => ({
      id: _id.toString(),
      name,
      bpmn,
      solidity
    }));
  }
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvcmVnaXN0cnkvbW9kZWxzLnRzIl0sIm5hbWVzIjpbIndlYjMiLCJyZWdpc3RyeSIsImFkZHJlc3MiLCJjb250cmFjdCIsIm1vZGVscyIsInByb2Nlc3MiLCJmaW5kIiwiJG5lIiwiY2hpbGRyZW4iLCJQcm9taXNlIiwiYWxsIiwibWFwIiwiX2lkIiwiaXMiLCJ1dGlscyIsImZyb21Bc2NpaSIsInRvU3RyaW5nIiwibWV0aG9kcyIsImNoaWxkcmVuRm9yIiwiY2FsbCIsInRoZW4iLCJ4IiwiZmlsdGVyIiwiaW5jbHVkZXMiLCJyb290UHJvY2Vzc05hbWUiLCJuYW1lIiwiYnBtbk1vZGVsIiwiYnBtbiIsInNvbGlkaXR5Q29kZSIsInNvbGlkaXR5IiwiaWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztlQUVlLE9BQU87QUFDcEJBLEVBQUFBLElBRG9CO0FBRXBCQyxFQUFBQSxRQUFRLEVBQUVDO0FBRlUsQ0FBUCxLQUdPO0FBQ3BCLFFBQU1DLFFBQVEsR0FBRyxNQUFNLCtCQUFpQjtBQUN0Q0QsSUFBQUEsT0FEc0M7QUFFdENGLElBQUFBO0FBRnNDLEdBQWpCLENBQXZCOztBQUlBLE1BQUlHLFFBQUosRUFBYztBQUNaLFVBQU1DLE1BQWEsR0FBRyxNQUFNQyxjQUN6QkMsSUFEeUIsQ0FDcEI7QUFBRSxtQkFBYTtBQUFFQyxRQUFBQSxHQUFHLEVBQUU7QUFBUDtBQUFmLEtBRG9CLENBQTVCO0FBR0EsVUFBTUMsUUFBUSxHQUFHLE1BQU1DLE9BQU8sQ0FBQ0MsR0FBUixDQUNyQk4sTUFBTSxDQUNITyxHQURILENBRUksQ0FBQztBQUFFQyxNQUFBQTtBQUFGLEtBQUQsS0FBOEI7QUFDNUIsMEJBQU0sK0JBQU4sRUFBdUMsS0FBdkMsRUFBNkM7QUFBRUEsUUFBQUEsR0FBRjtBQUFPQyxRQUFBQSxFQUFFLEVBQUViLElBQUksQ0FBQ2MsS0FBTCxDQUFXQyxTQUFYLENBQXFCSCxHQUFHLENBQUNJLFFBQUosRUFBckI7QUFBWCxPQUE3QztBQUNBLGFBQU9iLFFBQVEsQ0FDWmMsT0FESSxDQUVKQyxXQUZJLENBRVFsQixJQUFJLENBQUNjLEtBQUwsQ0FBV0MsU0FBWCxDQUFxQkgsR0FBRyxDQUFDSSxRQUFKLEVBQXJCLENBRlIsRUFFOEMsQ0FGOUMsRUFHSkcsSUFISSxHQUlKQyxJQUpJLENBS0ZDLENBQUQsSUFDRUEsQ0FBQyxJQUNELHNCQUFRckIsSUFBUixFQUFjcUIsQ0FBZCxNQUFxQlQsR0FBRyxDQUFDSSxRQUFKLEVBRHJCLElBRUVKLEdBQUcsQ0FBQ0ksUUFBSixFQVJELENBQVA7QUFVRCxLQWRMLENBRHFCLENBQXZCO0FBa0JBLHdCQUFNLCtCQUFOLEVBQXVDLG1CQUF2QyxFQUE0RDtBQUFFUixNQUFBQTtBQUFGLEtBQTVEO0FBQ0EsV0FBT0osTUFBTSxDQUNWa0IsTUFESSxDQUVILENBQUM7QUFDQ1YsTUFBQUE7QUFERCxLQUFELEtBRWVKLFFBQVEsQ0FBQ2UsUUFBVCxDQUFrQlgsR0FBRyxDQUFDSSxRQUFKLEVBQWxCLENBSlosRUFNSkwsR0FOSSxDQU9ILENBQUM7QUFDQ0MsTUFBQUEsR0FERDtBQUVDWSxNQUFBQSxlQUFlLEVBQUVDLElBRmxCO0FBR0NDLE1BQUFBLFNBQVMsRUFBRUMsSUFIWjtBQUlDQyxNQUFBQSxZQUFZLEVBQUVDO0FBSmYsS0FBRCxNQUtlO0FBQ2JDLE1BQUFBLEVBQUUsRUFBRWxCLEdBQUcsQ0FBQ0ksUUFBSixFQURTO0FBRWJTLE1BQUFBLElBRmE7QUFHYkUsTUFBQUEsSUFIYTtBQUliRSxNQUFBQTtBQUphLEtBTGYsQ0FQRyxDQUFQO0FBbUJEO0FBQ0YsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBkZWJ1ZyBmcm9tICdkZWJ1ZydcbmltcG9ydCB7IHByb2Nlc3MsIHJlZ2lzdHJ5IH0gZnJvbSAnLi4vcmVwbydcbmltcG9ydCByZWdpc3RyeUNvbnRyYWN0IGZyb20gJy4uL3V0aWwvcmVnaXN0cnktY29udHJhY3QnXG5pbXBvcnQgaGV4VG9JZCBmcm9tICcuLi91dGlsL2hleC10by1pZCdcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKHtcbiAgd2ViMyxcbiAgcmVnaXN0cnk6IGFkZHJlc3MsXG59KTogUHJvbWlzZTxhbnlbXT4gPT4ge1xuICBjb25zdCBjb250cmFjdCA9IGF3YWl0IHJlZ2lzdHJ5Q29udHJhY3Qoe1xuICAgIGFkZHJlc3MsXG4gICAgd2ViMyxcbiAgfSlcbiAgaWYgKGNvbnRyYWN0KSB7XG4gICAgY29uc3QgbW9kZWxzOiBhbnlbXSA9IGF3YWl0IHByb2Nlc3NcbiAgICAgIC5maW5kKHsgJ2JwbW5Nb2RlbCc6IHsgJG5lOiAnZW1wdHknIH0gfSlcbiAgICBcbiAgICBjb25zdCBjaGlsZHJlbiA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgICAgbW9kZWxzXG4gICAgICAgIC5tYXAoXG4gICAgICAgICAgKHsgX2lkIH0pOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgICAgICAgICAgZGVidWcoJ2NhdGVycGlsbGFycWw6cmVnaXN0cnkubW9kZWxzJykoJ19pZCcseyBfaWQsIGlzOiB3ZWIzLnV0aWxzLmZyb21Bc2NpaShfaWQudG9TdHJpbmcoKSkgfSlcbiAgICAgICAgICAgIHJldHVybiBjb250cmFjdFxuICAgICAgICAgICAgICAubWV0aG9kc1xuICAgICAgICAgICAgICAuY2hpbGRyZW5Gb3Iod2ViMy51dGlscy5mcm9tQXNjaWkoX2lkLnRvU3RyaW5nKCkpLCAwKVxuICAgICAgICAgICAgICAuY2FsbCgpXG4gICAgICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgICAgICh4KTogc3RyaW5nID0+XG4gICAgICAgICAgICAgICAgICB4ICYmXG4gICAgICAgICAgICAgICAgICBoZXhUb0lkKHdlYjMpKHgpID09PSBfaWQudG9TdHJpbmcoKSAmJlxuICAgICAgICAgICAgICAgICAgICBfaWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIH0sXG4gICAgICAgIClcbiAgICApXG4gICAgZGVidWcoJ2NhdGVycGlsbGFycWw6cmVnaXN0cnkubW9kZWxzJykoJ2ZpbHRlcmVkLWNoaWxkcmVuJywgeyBjaGlsZHJlbiAgfSlcbiAgICByZXR1cm4gbW9kZWxzXG4gICAgICAuZmlsdGVyKFxuICAgICAgICAoe1xuICAgICAgICAgIF9pZCxcbiAgICAgICAgfSk6IGJvb2xlYW4gPT4gY2hpbGRyZW4uaW5jbHVkZXMoX2lkLnRvU3RyaW5nKCkpXG4gICAgICApXG4gICAgICAubWFwKFxuICAgICAgICAoe1xuICAgICAgICAgIF9pZCxcbiAgICAgICAgICByb290UHJvY2Vzc05hbWU6IG5hbWUsXG4gICAgICAgICAgYnBtbk1vZGVsOiBicG1uLFxuICAgICAgICAgIHNvbGlkaXR5Q29kZTogc29saWRpdHksXG4gICAgICAgIH0pOiBvYmplY3QgPT4gKHtcbiAgICAgICAgICBpZDogX2lkLnRvU3RyaW5nKCksXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBicG1uLFxuICAgICAgICAgIHNvbGlkaXR5XG4gICAgICAgIH0pXG4gICAgICApXG4gIH1cbn1cbiJdfQ==