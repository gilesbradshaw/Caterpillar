"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _repo = require("../../repo");

var _hexToId = _interopRequireDefault(require("../../util/hex-to-id"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const nestedContracts = ({
  web3,
  // bpmModel,
  registryContract
}) => async contractAddress => {
  const bundleId = await registryContract.methods.bundleFor(contractAddress).call().then((0, _hexToId.default)(web3));
  const [{
    abi,
    indexToElement,
    worklistAbi
  }] = await _repo.process.find({
    _id: bundleId
  });
  const contractInstance = new web3.eth.Contract(JSON.parse(abi), contractAddress);
  contractInstance.transactionConfirmationBlocks = 1;
  const worklistAddress = await contractInstance.methods.getWorklistAddress.call();
  const worklistInstance = worklistAddress.toString() !== '0x0000000000000000000000000000000000000000' && new web3.eth.Contract(JSON.parse(worklistAbi), worklistAddress);

  if (worklistInstance) {
    worklistInstance.transactionConfirmationBlocks = 1;
  }

  const startedActivities = web3.utils.toBN((await contractInstance.methods.startedActivities.call())).toString(2).split('').reverse();
  const startedInstances = await Promise.all(startedActivities.map((activityState, index) => activityState === '1' && indexToElement[index].type).map((type, index) => {
    if (type !== 'Separate-Instance') {
      return Promise.resolve([]);
    }

    return contractInstance.methods.startedInstanceIndexFor(index).call().then(x => web3.utils.toBN(x).toString(2).split('').reverse()).then(startedInstances => contractInstance.methods.allInstanceAddresses.call().then(allInstances => startedInstances.map((startedInstance, index) => startedInstance === '1' && allInstances[index]).filter(instance => instance)));
  }));
  const instanceStates = await Promise.all(startedInstances.reduce((acc, instances) => [...acc, ...instances], []).map(state => nestedContracts({
    web3,
    registryContract
  })(state)));
  return instanceStates.reduce((acc, instances) => [...acc, ...instances], [{
    bundleId,
    contractAddress,
    abi,
    indexToElement,
    worklistAbi,
    worklistAddress,
    worklistInstance,
    startedActivities,
    startedInstances
  }]);
};

var _default = nestedContracts;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvcHJvY2Vzcy1jb250cmFjdC9pbnN0YW5jZS1zdGF0ZS9uZXN0ZWQtY29udHJhY3RzLnRzIl0sIm5hbWVzIjpbIm5lc3RlZENvbnRyYWN0cyIsIndlYjMiLCJyZWdpc3RyeUNvbnRyYWN0IiwiY29udHJhY3RBZGRyZXNzIiwiYnVuZGxlSWQiLCJtZXRob2RzIiwiYnVuZGxlRm9yIiwiY2FsbCIsInRoZW4iLCJhYmkiLCJpbmRleFRvRWxlbWVudCIsIndvcmtsaXN0QWJpIiwicHJvY2VzcyIsImZpbmQiLCJfaWQiLCJjb250cmFjdEluc3RhbmNlIiwiZXRoIiwiQ29udHJhY3QiLCJKU09OIiwicGFyc2UiLCJ0cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2NrcyIsIndvcmtsaXN0QWRkcmVzcyIsImdldFdvcmtsaXN0QWRkcmVzcyIsIndvcmtsaXN0SW5zdGFuY2UiLCJ0b1N0cmluZyIsInN0YXJ0ZWRBY3Rpdml0aWVzIiwidXRpbHMiLCJ0b0JOIiwic3BsaXQiLCJyZXZlcnNlIiwic3RhcnRlZEluc3RhbmNlcyIsIlByb21pc2UiLCJhbGwiLCJtYXAiLCJhY3Rpdml0eVN0YXRlIiwiaW5kZXgiLCJ0eXBlIiwicmVzb2x2ZSIsInN0YXJ0ZWRJbnN0YW5jZUluZGV4Rm9yIiwieCIsImFsbEluc3RhbmNlQWRkcmVzc2VzIiwiYWxsSW5zdGFuY2VzIiwic3RhcnRlZEluc3RhbmNlIiwiZmlsdGVyIiwiaW5zdGFuY2UiLCJpbnN0YW5jZVN0YXRlcyIsInJlZHVjZSIsImFjYyIsImluc3RhbmNlcyIsInN0YXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFHQSxNQUFNQSxlQUFlLEdBQUcsQ0FBQztBQUN2QkMsRUFBQUEsSUFEdUI7QUFFdkI7QUFDQUMsRUFBQUE7QUFIdUIsQ0FBRCxLQUlSLE1BQ2RDLGVBRGMsSUFFSztBQUNuQixRQUFNQyxRQUFRLEdBQUcsTUFBTUYsZ0JBQWdCLENBQUNHLE9BQWpCLENBQXlCQyxTQUF6QixDQUFtQ0gsZUFBbkMsRUFBb0RJLElBQXBELEdBQ3BCQyxJQURvQixDQUNmLHNCQUFRUCxJQUFSLENBRGUsQ0FBdkI7QUFHQSxRQUFNLENBQUM7QUFDTFEsSUFBQUEsR0FESztBQUVMQyxJQUFBQSxjQUZLO0FBR0xDLElBQUFBO0FBSEssR0FBRCxJQUlELE1BQU1DLGNBQ1JDLElBRFEsQ0FDSDtBQUFFQyxJQUFBQSxHQUFHLEVBQUVWO0FBQVAsR0FERyxDQUpYO0FBTUEsUUFBTVcsZ0JBQWdCLEdBQUcsSUFBSWQsSUFBSSxDQUFDZSxHQUFMLENBQVNDLFFBQWIsQ0FBc0JDLElBQUksQ0FBQ0MsS0FBTCxDQUFXVixHQUFYLENBQXRCLEVBQXVDTixlQUF2QyxDQUF6QjtBQUNBWSxFQUFBQSxnQkFBZ0IsQ0FBQ0ssNkJBQWpCLEdBQWlELENBQWpEO0FBQ0EsUUFBTUMsZUFBZSxHQUFHLE1BQU1OLGdCQUFnQixDQUFDVixPQUFqQixDQUF5QmlCLGtCQUF6QixDQUE0Q2YsSUFBNUMsRUFBOUI7QUFDQSxRQUFNZ0IsZ0JBQWdCLEdBQUdGLGVBQWUsQ0FBQ0csUUFBaEIsT0FBK0IsNENBQS9CLElBQ3ZCLElBQUl2QixJQUFJLENBQUNlLEdBQUwsQ0FBU0MsUUFBYixDQUFzQkMsSUFBSSxDQUFDQyxLQUFMLENBQVdSLFdBQVgsQ0FBdEIsRUFBK0NVLGVBQS9DLENBREY7O0FBRUEsTUFBSUUsZ0JBQUosRUFBc0I7QUFDcEJBLElBQUFBLGdCQUFnQixDQUFDSCw2QkFBakIsR0FBaUQsQ0FBakQ7QUFDRDs7QUFDRCxRQUFNSyxpQkFBaUIsR0FBR3hCLElBQUksQ0FBQ3lCLEtBQUwsQ0FBV0MsSUFBWCxFQUN4QixNQUFNWixnQkFBZ0IsQ0FBQ1YsT0FBakIsQ0FBeUJvQixpQkFBekIsQ0FBMkNsQixJQUEzQyxFQURrQixHQUV4QmlCLFFBRndCLENBRWYsQ0FGZSxFQUVaSSxLQUZZLENBRU4sRUFGTSxFQUVGQyxPQUZFLEVBQTFCO0FBR0EsUUFBTUMsZ0JBQWdCLEdBQUcsTUFBTUMsT0FBTyxDQUFDQyxHQUFSLENBQzdCUCxpQkFBaUIsQ0FDZFEsR0FESCxDQUVJLENBQUNDLGFBQUQsRUFBZ0JDLEtBQWhCLEtBQWtDRCxhQUFhLEtBQUssR0FBbEIsSUFDaEN4QixjQUFjLENBQUN5QixLQUFELENBQWQsQ0FBc0JDLElBSDVCLEVBS0dILEdBTEgsQ0FNSSxDQUFDRyxJQUFELEVBQU9ELEtBQVAsS0FBaUM7QUFDL0IsUUFBSUMsSUFBSSxLQUFLLG1CQUFiLEVBQWtDO0FBQ2hDLGFBQU9MLE9BQU8sQ0FBQ00sT0FBUixDQUFnQixFQUFoQixDQUFQO0FBQ0Q7O0FBQ0QsV0FBT3RCLGdCQUFnQixDQUFDVixPQUFqQixDQUF5QmlDLHVCQUF6QixDQUFpREgsS0FBakQsRUFBd0Q1QixJQUF4RCxHQUNKQyxJQURJLENBRUYrQixDQUFELElBQ0V0QyxJQUFJLENBQUN5QixLQUFMLENBQVdDLElBQVgsQ0FBZ0JZLENBQWhCLEVBQW1CZixRQUFuQixDQUE0QixDQUE1QixFQUErQkksS0FBL0IsQ0FBcUMsRUFBckMsRUFBeUNDLE9BQXpDLEVBSEMsRUFLSnJCLElBTEksQ0FNRnNCLGdCQUFELElBQ0VmLGdCQUFnQixDQUFDVixPQUFqQixDQUF5Qm1DLG9CQUF6QixDQUE4Q2pDLElBQTlDLEdBQ0dDLElBREgsQ0FFS2lDLFlBQUQsSUFDRVgsZ0JBQWdCLENBQ2JHLEdBREgsQ0FFSSxDQUFDUyxlQUFELEVBQWtCUCxLQUFsQixLQUFvQ08sZUFBZSxLQUFLLEdBQXBCLElBQ2xDRCxZQUFZLENBQUNOLEtBQUQsQ0FIbEIsRUFLR1EsTUFMSCxDQU1LQyxRQUFELElBQXNCQSxRQU4xQixDQUhOLENBUEMsQ0FBUDtBQW9CRCxHQTlCTCxDQUQ2QixDQUEvQjtBQWtDQSxRQUFNQyxjQUFjLEdBQUcsTUFBTWQsT0FBTyxDQUFDQyxHQUFSLENBQzNCRixnQkFBZ0IsQ0FDYmdCLE1BREgsQ0FFSSxDQUFDQyxHQUFELEVBQWdCQyxTQUFoQixLQUFrRCxDQUNoRCxHQUFHRCxHQUQ2QyxFQUVoRCxHQUFHQyxTQUY2QyxDQUZ0RCxFQU1JLEVBTkosRUFRR2YsR0FSSCxDQVNLZ0IsS0FBRCxJQUFnQmpELGVBQWUsQ0FBQztBQUM5QkMsSUFBQUEsSUFEOEI7QUFFOUJDLElBQUFBO0FBRjhCLEdBQUQsQ0FBZixDQUdiK0MsS0FIYSxDQVRwQixDQUQyQixDQUE3QjtBQWlCQSxTQUFPSixjQUFjLENBQ2xCQyxNQURJLENBRUgsQ0FBQ0MsR0FBRCxFQUFhQyxTQUFiLEtBQWtDLENBQ2hDLEdBQUdELEdBRDZCLEVBRWhDLEdBQUdDLFNBRjZCLENBRi9CLEVBTUgsQ0FBQztBQUNDNUMsSUFBQUEsUUFERDtBQUVDRCxJQUFBQSxlQUZEO0FBR0NNLElBQUFBLEdBSEQ7QUFJQ0MsSUFBQUEsY0FKRDtBQUtDQyxJQUFBQSxXQUxEO0FBTUNVLElBQUFBLGVBTkQ7QUFPQ0UsSUFBQUEsZ0JBUEQ7QUFRQ0UsSUFBQUEsaUJBUkQ7QUFTQ0ssSUFBQUE7QUFURCxHQUFELENBTkcsQ0FBUDtBQW1CRCxDQWpHRDs7ZUFtR2U5QixlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcHJvY2VzcyB9IGZyb20gJy4uLy4uL3JlcG8nXG5pbXBvcnQgaGV4VG9JZCBmcm9tICcuLi8uLi91dGlsL2hleC10by1pZCdcblxuXG5jb25zdCBuZXN0ZWRDb250cmFjdHMgPSAoe1xuICB3ZWIzLFxuICAvLyBicG1Nb2RlbCxcbiAgcmVnaXN0cnlDb250cmFjdCxcbn0pOiBGdW5jdGlvbiA9PiBhc3luYyAoXG4gIGNvbnRyYWN0QWRkcmVzcyxcbik6IFByb21pc2U8YW55W10+ID0+IHtcbiAgY29uc3QgYnVuZGxlSWQgPSBhd2FpdCByZWdpc3RyeUNvbnRyYWN0Lm1ldGhvZHMuYnVuZGxlRm9yKGNvbnRyYWN0QWRkcmVzcykuY2FsbCgpXG4gICAgLnRoZW4oaGV4VG9JZCh3ZWIzKSlcbiAgICAgIFxuICBjb25zdCBbe1xuICAgIGFiaSxcbiAgICBpbmRleFRvRWxlbWVudCxcbiAgICB3b3JrbGlzdEFiaSxcbiAgfV0gPSBhd2FpdCBwcm9jZXNzXG4gICAgLmZpbmQoeyBfaWQ6IGJ1bmRsZUlkIH0pXG4gIGNvbnN0IGNvbnRyYWN0SW5zdGFuY2UgPSBuZXcgd2ViMy5ldGguQ29udHJhY3QoSlNPTi5wYXJzZShhYmkpLCBjb250cmFjdEFkZHJlc3MpXG4gIGNvbnRyYWN0SW5zdGFuY2UudHJhbnNhY3Rpb25Db25maXJtYXRpb25CbG9ja3MgPSAxO1xuICBjb25zdCB3b3JrbGlzdEFkZHJlc3MgPSBhd2FpdCBjb250cmFjdEluc3RhbmNlLm1ldGhvZHMuZ2V0V29ya2xpc3RBZGRyZXNzLmNhbGwoKVxuICBjb25zdCB3b3JrbGlzdEluc3RhbmNlID0gd29ya2xpc3RBZGRyZXNzLnRvU3RyaW5nKCkgIT09ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnICYmXG4gICAgbmV3IHdlYjMuZXRoLkNvbnRyYWN0KEpTT04ucGFyc2Uod29ya2xpc3RBYmkpLCB3b3JrbGlzdEFkZHJlc3MpXG4gIGlmICh3b3JrbGlzdEluc3RhbmNlKSB7XG4gICAgd29ya2xpc3RJbnN0YW5jZS50cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2NrcyA9IDE7XG4gIH1cbiAgY29uc3Qgc3RhcnRlZEFjdGl2aXRpZXMgPSB3ZWIzLnV0aWxzLnRvQk4oXG4gICAgYXdhaXQgY29udHJhY3RJbnN0YW5jZS5tZXRob2RzLnN0YXJ0ZWRBY3Rpdml0aWVzLmNhbGwoKVxuICApLnRvU3RyaW5nKDIpLnNwbGl0KCcnKS5yZXZlcnNlKClcbiAgY29uc3Qgc3RhcnRlZEluc3RhbmNlcyA9IGF3YWl0IFByb21pc2UuYWxsKFxuICAgIHN0YXJ0ZWRBY3Rpdml0aWVzXG4gICAgICAubWFwKFxuICAgICAgICAoYWN0aXZpdHlTdGF0ZSwgaW5kZXgpOiBzdHJpbmcgPT4gYWN0aXZpdHlTdGF0ZSA9PT0gJzEnICYmXG4gICAgICAgICAgaW5kZXhUb0VsZW1lbnRbaW5kZXhdLnR5cGUsXG4gICAgICApXG4gICAgICAubWFwKFxuICAgICAgICAodHlwZSwgaW5kZXgpOiBQcm9taXNlPGFueVtdPiA9PiB7XG4gICAgICAgICAgaWYgKHR5cGUgIT09ICdTZXBhcmF0ZS1JbnN0YW5jZScpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW10pXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBjb250cmFjdEluc3RhbmNlLm1ldGhvZHMuc3RhcnRlZEluc3RhbmNlSW5kZXhGb3IoaW5kZXgpLmNhbGwoKVxuICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgICh4KTogYW55ID0+XG4gICAgICAgICAgICAgICAgd2ViMy51dGlscy50b0JOKHgpLnRvU3RyaW5nKDIpLnNwbGl0KCcnKS5yZXZlcnNlKCksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgKHN0YXJ0ZWRJbnN0YW5jZXMpOiBzdHJpbmdbXSA9PlxuICAgICAgICAgICAgICAgIGNvbnRyYWN0SW5zdGFuY2UubWV0aG9kcy5hbGxJbnN0YW5jZUFkZHJlc3Nlcy5jYWxsKClcbiAgICAgICAgICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgICAgICAgICAoYWxsSW5zdGFuY2VzKTogc3RyaW5nID0+XG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnRlZEluc3RhbmNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0YXJ0ZWRJbnN0YW5jZSwgaW5kZXgpOiBzdHJpbmcgPT4gc3RhcnRlZEluc3RhbmNlID09PSAnMScgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxJbnN0YW5jZXNbaW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAoaW5zdGFuY2UpOiBzdHJpbmcgPT4gaW5zdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgKVxuICApXG4gIGNvbnN0IGluc3RhbmNlU3RhdGVzID0gYXdhaXQgUHJvbWlzZS5hbGwoXG4gICAgc3RhcnRlZEluc3RhbmNlc1xuICAgICAgLnJlZHVjZTxzdHJpbmdbXT4oXG4gICAgICAgIChhY2M6IHN0cmluZ1tdLCBpbnN0YW5jZXM6IHN0cmluZ1tdKTogc3RyaW5nW10gPT4gW1xuICAgICAgICAgIC4uLmFjYyxcbiAgICAgICAgICAuLi5pbnN0YW5jZXMsXG4gICAgICAgIF0sXG4gICAgICAgIFtdLFxuICAgICAgKVxuICAgICAgLm1hcChcbiAgICAgICAgKHN0YXRlKTogYW55ID0+IG5lc3RlZENvbnRyYWN0cyh7XG4gICAgICAgICAgd2ViMyxcbiAgICAgICAgICByZWdpc3RyeUNvbnRyYWN0LFxuICAgICAgICB9KShzdGF0ZSlcbiAgICAgIClcbiAgKVxuXG4gIHJldHVybiBpbnN0YW5jZVN0YXRlc1xuICAgIC5yZWR1Y2U8YW55W10+KFxuICAgICAgKGFjYzogYW55W10sIGluc3RhbmNlcyk6IGFueVtdID0+IFtcbiAgICAgICAgLi4uYWNjLFxuICAgICAgICAuLi5pbnN0YW5jZXMsXG4gICAgICBdLFxuICAgICAgW3tcbiAgICAgICAgYnVuZGxlSWQsXG4gICAgICAgIGNvbnRyYWN0QWRkcmVzcyxcbiAgICAgICAgYWJpLFxuICAgICAgICBpbmRleFRvRWxlbWVudCxcbiAgICAgICAgd29ya2xpc3RBYmksXG4gICAgICAgIHdvcmtsaXN0QWRkcmVzcyxcbiAgICAgICAgd29ya2xpc3RJbnN0YW5jZSxcbiAgICAgICAgc3RhcnRlZEFjdGl2aXRpZXMsXG4gICAgICAgIHN0YXJ0ZWRJbnN0YW5jZXMsXG4gICAgICB9XSxcbiAgICApXG4gICAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IG5lc3RlZENvbnRyYWN0c1xuXG4iXX0=