"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _repo = require("../../repo");

const nestedContracts = ({
  web3,
  registryContract
}) => async contractAddress => {
  const bundleId = await registryContract.bundleFor({
    instance: contractAddress
  });
  const [{
    abi,
    indexToElement,
    worklistAbi
  }] = await _repo.process.find({
    _id: bundleId
  }); // shouldnt need this...

  if (!abi || !worklistAbi) {
    return [];
  }

  const contractInstance = new web3.eth.Contract(JSON.parse(abi), contractAddress);
  contractInstance.transactionConfirmationBlocks = 1;
  const worklistAddress = await contractInstance.methods.getWorklistAddress.call();
  const worklistInstance = worklistAddress.toString() !== '0x0000000000000000000000000000000000000000' && new web3.eth.Contract(JSON.parse(worklistAbi), worklistAddress);

  if (worklistInstance) {
    worklistInstance.transactionConfirmationBlocks = 1;
  }

  const startedActivities = web3.utils.toBN((await contractInstance.methods.startedActivities.call())).toString(2).split('').reverse();
  const startedInstances = await Promise.all(startedActivities.map((activityState, index) => activityState === '1' && indexToElement[index].type).map((type, index) => {
    if (type !== 'Separate-Instance') {
      return Promise.resolve([]);
    }

    return contractInstance.methods.startedInstanceIndexFor(index).call().then(x => web3.utils.toBN(x).toString(2).split('').reverse()).then(startedInstances => contractInstance.methods.allInstanceAddresses.call().then(allInstances => startedInstances.map((startedInstance, index) => startedInstance === '1' && allInstances[index]).filter(instance => instance)));
  }));
  const instanceStates = await Promise.all(startedInstances.reduce((acc, instances) => [...acc, ...instances], []).map(state => nestedContracts({
    web3,
    registryContract
  })(state)));
  return instanceStates.reduce((acc, instances) => [...acc, ...instances], [{
    bundleId,
    contractAddress,
    abi,
    indexToElement,
    worklistAbi,
    worklistAddress,
    worklistInstance,
    startedActivities,
    startedInstances
  }]);
};

var _default = nestedContracts;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,