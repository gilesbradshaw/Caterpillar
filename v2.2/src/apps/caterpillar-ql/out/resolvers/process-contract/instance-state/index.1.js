"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _getNestedContracts = _interopRequireDefault(require("./get-nested-contracts"));

var _debug2 = _interopRequireDefault(require("debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = (0, _debug2.default)('caterpillarql:process-contract:instance-state');

const findParameters = (contractAbi, functionName) => {
  let jsonAbi = JSON.parse(contractAbi);
  let candidates = [];
  jsonAbi.forEach(element => {
    if (element.name === functionName) {
      candidates = element.inputs;
    }
  });
  let res = [];
  candidates.forEach(element => {
    if (element.name && element.name !== 'workitemId') res.push(element);
  });
  return res;
};

var _default = ({
  web3,
  bpmnModel,
  registryContract
}) => async contractAddress => {
  debug({
    contractAddress
  });
  const nestedContracts = await (0, _getNestedContracts.default)({
    web3,
    registryContract
  })(contractAddress);
  const x = await Promise.all(nestedContracts.map(async ({
    bundleId,
    contractAddress,
    abi,
    indexToElement,
    worklistAbi,
    worklistAddress,
    worklistInstance,
    startedActivities,
    startedInstances
  }) => Promise.all(startedActivities.map(async (startedActivity, index) => {
    if (startedActivity === '1' && indexToElement[index].type === 'Workitem') {
      const reqInd = await worklistInstance.methods.workItemsFor(index, contractAddress).call().then(x => web3.utils.toBN(x).toString(2).split('').reverse());
      const ret = await Promise.all(reqInd.map(async (req, i) => {
        if (req === '1') {
          return {
            worklistAddress,
            bundleId: bundleId,
            elementId: indexToElement[index].id,
            elementName: indexToElement[index].name,
            hrefs: [`/workitems/${worklistAddress}/${i}`],
            input: findParameters(worklistAbi, indexToElement[index].name),
            pcases: [await worklistInstance.methods.processInstanceFor(i).call()],
            processAddress: contractAddress
          };
        }
      }));
      return ret;
    } // return Promise.resolve()

  }))));
  const workItems = x.reduce((acc, items) => [...acc, ...(items || [])], []).reduce((acc, items) => [...acc, ...(items || [])], []).filter(x => x).map((item, index) => _objectSpread({}, item, {
    index
  })).reduce((acc, item) => {
    const exists = acc.find(({
      elementId,
      bundleId
    }) => elementId === item.elementId && bundleId === item.bundleId);

    if (exists) {
      return [...acc.filter(a => a !== exists), _objectSpread({}, exists, {
        hrefs: [...exists.hrefs, ...item.hrefs],
        pcases: [...exists.pcases, ...item.pcases]
      })];
    }

    return [...acc, item];
  }, []).sort(({
    index
  }) => index);
  return {
    bpmn: bpmnModel,
    workItems
  };
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,