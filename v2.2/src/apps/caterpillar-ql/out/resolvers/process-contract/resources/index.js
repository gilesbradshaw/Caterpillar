"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ramda = require("ramda");

var _hexToId = _interopRequireDefault(require("../../util/hex-to-id"));

var _repo = require("../../repo");

var _findRoleMap = _interopRequireDefault(require("./find-role-map"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const bindings = {
  0: 'UNBOUND',
  1: 'RELEASING',
  2: 'NOMINATED',
  3: 'BOUND'
};

var _default = ({
  web3,
  registryContract
}) => async (contractAddress, role) => {
  const [{
    indexToRole,
    accessControlAbi
  }] = await _repo.policy.find({
    _id: await registryContract.methods.bindingPolicyFor(contractAddress).call().then((0, _hexToId.default)(web3))
  });
  const roleIndexMap = (0, _findRoleMap.default)(indexToRole);
  const accessControlAddr = await registryContract.methods.findRuntimePolicy(contractAddress).call();

  if (accessControlAddr.toString() === '0x0000000000000000000000000000000000000000') {
    return [];
  }

  const runtimePolicyContract = new web3.eth.Contract(JSON.parse(accessControlAbi), accessControlAddr);
  runtimePolicyContract.transactionConfirmationBlocks = 1;
  const roles = await Promise.all(indexToRole.filter(r => r).filter(r => r === role || !role).map(r => runtimePolicyContract.methods.roleState(roleIndexMap.get(r), contractAddress).call().then(result => ({
    role: r,
    binding: bindings[(0, _ramda.compose)(web3.utils.hexToNumber, web3.utils.toHex)(result)]
  }))));

  if (role && !roles.length) {
    return [{
      role,
      binding: 'UNDEFINED'
    }];
  }

  return roles;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvcHJvY2Vzcy1jb250cmFjdC9yZXNvdXJjZXMvaW5kZXgudHMiXSwibmFtZXMiOlsiYmluZGluZ3MiLCJ3ZWIzIiwicmVnaXN0cnlDb250cmFjdCIsImNvbnRyYWN0QWRkcmVzcyIsInJvbGUiLCJpbmRleFRvUm9sZSIsImFjY2Vzc0NvbnRyb2xBYmkiLCJwb2xpY3kiLCJmaW5kIiwiX2lkIiwibWV0aG9kcyIsImJpbmRpbmdQb2xpY3lGb3IiLCJjYWxsIiwidGhlbiIsInJvbGVJbmRleE1hcCIsImFjY2Vzc0NvbnRyb2xBZGRyIiwiZmluZFJ1bnRpbWVQb2xpY3kiLCJ0b1N0cmluZyIsInJ1bnRpbWVQb2xpY3lDb250cmFjdCIsImV0aCIsIkNvbnRyYWN0IiwiSlNPTiIsInBhcnNlIiwidHJhbnNhY3Rpb25Db25maXJtYXRpb25CbG9ja3MiLCJyb2xlcyIsIlByb21pc2UiLCJhbGwiLCJmaWx0ZXIiLCJyIiwibWFwIiwicm9sZVN0YXRlIiwiZ2V0IiwicmVzdWx0IiwiYmluZGluZyIsInV0aWxzIiwiaGV4VG9OdW1iZXIiLCJ0b0hleCIsImxlbmd0aCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsUUFBUSxHQUFHO0FBQ2YsS0FBRyxTQURZO0FBRWYsS0FBRyxXQUZZO0FBR2YsS0FBRyxXQUhZO0FBSWYsS0FBRztBQUpZLENBQWpCOztlQU9lLENBQUM7QUFDZEMsRUFBQUEsSUFEYztBQUVkQyxFQUFBQTtBQUZjLENBQUQsS0FHQyxPQUNkQyxlQURjLEVBRWRDLElBRmMsS0FHRztBQUNqQixRQUFNLENBQUM7QUFDTEMsSUFBQUEsV0FESztBQUVMQyxJQUFBQTtBQUZLLEdBQUQsSUFHRCxNQUFNQyxhQUFPQyxJQUFQLENBQVk7QUFDckJDLElBQUFBLEdBQUcsRUFBRSxNQUFNUCxnQkFBZ0IsQ0FDeEJRLE9BRFEsQ0FFUkMsZ0JBRlEsQ0FFU1IsZUFGVCxFQUUwQlMsSUFGMUIsR0FHUkMsSUFIUSxDQUdILHNCQUFRWixJQUFSLENBSEc7QUFEVSxHQUFaLENBSFg7QUFVQSxRQUFNYSxZQUFZLEdBQUcsMEJBQVlULFdBQVosQ0FBckI7QUFFQSxRQUFNVSxpQkFBaUIsR0FBRyxNQUFNYixnQkFBZ0IsQ0FDN0NRLE9BRDZCLENBRTdCTSxpQkFGNkIsQ0FFWGIsZUFGVyxFQUc3QlMsSUFINkIsRUFBaEM7O0FBSUEsTUFBR0csaUJBQWlCLENBQUNFLFFBQWxCLE9BQWlDLDRDQUFwQyxFQUFrRjtBQUNoRixXQUFPLEVBQVA7QUFDRDs7QUFFRCxRQUFNQyxxQkFBcUIsR0FBRyxJQUFJakIsSUFBSSxDQUFDa0IsR0FBTCxDQUFTQyxRQUFiLENBQzVCQyxJQUFJLENBQUNDLEtBQUwsQ0FBV2hCLGdCQUFYLENBRDRCLEVBRTVCUyxpQkFGNEIsQ0FBOUI7QUFJQUcsRUFBQUEscUJBQXFCLENBQUNLLDZCQUF0QixHQUFzRCxDQUF0RDtBQUVBLFFBQU1DLEtBQUssR0FBRyxNQUFNQyxPQUFPLENBQUNDLEdBQVIsQ0FDbEJyQixXQUFXLENBQ1JzQixNQURILENBRUlDLENBQUMsSUFBSUEsQ0FGVCxFQUlHRCxNQUpILENBS0lDLENBQUMsSUFBSUEsQ0FBQyxLQUFLeEIsSUFBTixJQUFjLENBQUNBLElBTHhCLEVBT0d5QixHQVBILENBUUlELENBQUMsSUFDQ1YscUJBQXFCLENBQ2xCUixPQURILENBRUdvQixTQUZILENBR0loQixZQUFZLENBQUNpQixHQUFiLENBQWlCSCxDQUFqQixDQUhKLEVBSUl6QixlQUpKLEVBTUdTLElBTkgsR0FPR0MsSUFQSCxDQVFJbUIsTUFBTSxLQUFLO0FBQ1Q1QixJQUFBQSxJQUFJLEVBQUV3QixDQURHO0FBRVRLLElBQUFBLE9BQU8sRUFBRWpDLFFBQVEsQ0FDZixvQkFDRUMsSUFBSSxDQUFDaUMsS0FBTCxDQUFXQyxXQURiLEVBRUVsQyxJQUFJLENBQUNpQyxLQUFMLENBQVdFLEtBRmIsRUFHRUosTUFIRixDQURlO0FBRlIsR0FBTCxDQVJWLENBVE4sQ0FEa0IsQ0FBcEI7O0FBK0JBLE1BQUk1QixJQUFJLElBQUksQ0FBQ29CLEtBQUssQ0FBQ2EsTUFBbkIsRUFBMkI7QUFDekIsV0FBTyxDQUFDO0FBQ05qQyxNQUFBQSxJQURNO0FBRU42QixNQUFBQSxPQUFPLEVBQUU7QUFGSCxLQUFELENBQVA7QUFJRDs7QUFDRCxTQUFPVCxLQUFQO0FBQ0QsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbXBvc2UgfSBmcm9tICdyYW1kYSdcbmltcG9ydCBoZXhUb0lkIGZyb20gJy4uLy4uL3V0aWwvaGV4LXRvLWlkJ1xuaW1wb3J0IHsgcG9saWN5IH0gZnJvbSAnLi4vLi4vcmVwbydcbmltcG9ydCBmaW5kUm9sZU1hcCBmcm9tICcuL2ZpbmQtcm9sZS1tYXAnXG5cbmNvbnN0IGJpbmRpbmdzID0ge1xuICAwOiAnVU5CT1VORCcsXG4gIDE6ICdSRUxFQVNJTkcnLFxuICAyOiAnTk9NSU5BVEVEJyxcbiAgMzogJ0JPVU5EJ1xufVxuXG5leHBvcnQgZGVmYXVsdCAoe1xuICB3ZWIzLFxuICByZWdpc3RyeUNvbnRyYWN0LFxufSk6IEZ1bmN0aW9uID0+IGFzeW5jIChcbiAgY29udHJhY3RBZGRyZXNzLFxuICByb2xlLFxuKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgY29uc3QgW3tcbiAgICBpbmRleFRvUm9sZSxcbiAgICBhY2Nlc3NDb250cm9sQWJpLFxuICB9XSA9IGF3YWl0IHBvbGljeS5maW5kKHtcbiAgICBfaWQ6IGF3YWl0IHJlZ2lzdHJ5Q29udHJhY3RcbiAgICAgIC5tZXRob2RzXG4gICAgICAuYmluZGluZ1BvbGljeUZvcihjb250cmFjdEFkZHJlc3MpLmNhbGwoKVxuICAgICAgLnRoZW4oaGV4VG9JZCh3ZWIzKSlcbiAgfSlcblxuICBjb25zdCByb2xlSW5kZXhNYXAgPSBmaW5kUm9sZU1hcChpbmRleFRvUm9sZSk7XG5cbiAgY29uc3QgYWNjZXNzQ29udHJvbEFkZHIgPSBhd2FpdCByZWdpc3RyeUNvbnRyYWN0XG4gICAgLm1ldGhvZHNcbiAgICAuZmluZFJ1bnRpbWVQb2xpY3koY29udHJhY3RBZGRyZXNzKVxuICAgIC5jYWxsKClcbiAgaWYoYWNjZXNzQ29udHJvbEFkZHIudG9TdHJpbmcoKSA9PT0gJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIGNvbnN0IHJ1bnRpbWVQb2xpY3lDb250cmFjdCA9IG5ldyB3ZWIzLmV0aC5Db250cmFjdChcbiAgICBKU09OLnBhcnNlKGFjY2Vzc0NvbnRyb2xBYmkpLFxuICAgIGFjY2Vzc0NvbnRyb2xBZGRyLFxuICApXG4gIHJ1bnRpbWVQb2xpY3lDb250cmFjdC50cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2NrcyA9IDE7XG5cbiAgY29uc3Qgcm9sZXMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBpbmRleFRvUm9sZVxuICAgICAgLmZpbHRlcihcbiAgICAgICAgciA9PiByLFxuICAgICAgKSAgXG4gICAgICAuZmlsdGVyKFxuICAgICAgICByID0+IHIgPT09IHJvbGUgfHwgIXJvbGUsXG4gICAgICApXG4gICAgICAubWFwKFxuICAgICAgICByID0+XG4gICAgICAgICAgcnVudGltZVBvbGljeUNvbnRyYWN0XG4gICAgICAgICAgICAubWV0aG9kc1xuICAgICAgICAgICAgLnJvbGVTdGF0ZShcbiAgICAgICAgICAgICAgcm9sZUluZGV4TWFwLmdldChyKSxcbiAgICAgICAgICAgICAgY29udHJhY3RBZGRyZXNzXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuY2FsbCgpXG4gICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgcmVzdWx0ID0+ICh7XG4gICAgICAgICAgICAgICAgcm9sZTogcixcbiAgICAgICAgICAgICAgICBiaW5kaW5nOiBiaW5kaW5nc1tcbiAgICAgICAgICAgICAgICAgIGNvbXBvc2UoXG4gICAgICAgICAgICAgICAgICAgIHdlYjMudXRpbHMuaGV4VG9OdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIHdlYjMudXRpbHMudG9IZXhcbiAgICAgICAgICAgICAgICAgICkocmVzdWx0KVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICApXG4gIClcbiAgXG4gIGlmIChyb2xlICYmICFyb2xlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gW3tcbiAgICAgIHJvbGUsXG4gICAgICBiaW5kaW5nOiAnVU5ERUZJTkVEJyxcbiAgICB9XVxuICB9XG4gIHJldHVybiByb2xlc1xufVxuICAgIFxuIl19