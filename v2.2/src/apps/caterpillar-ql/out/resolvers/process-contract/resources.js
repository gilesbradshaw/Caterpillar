"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ramda = require("ramda");

var _repo = require("../repo");

var _findRoleMap = _interopRequireDefault(require("../util/find-role-map"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const bindings = {
  0: 'UNBOUND',
  1: 'RELEASING',
  2: 'NOMINATED',
  3: 'BOUND'
};

var _default = ({
  web3,
  registryContract
}) => async (contractAddress, role) => {
  const [{
    indexToRole,
    accessControlAbi
  }] = await _repo.policy.find({
    _id: await registryContract.bindingPolicyFor({
      address: contractAddress
    })
  });
  const roleIndexMap = (0, _findRoleMap.default)(indexToRole);
  const accessControlAddr = await registryContract.findRuntimePolicy({
    address: contractAddress
  });

  if (accessControlAddr.toString() === '0x0000000000000000000000000000000000000000') {
    return [];
  }

  const runtimePolicyContract = new web3.eth.Contract(JSON.parse(accessControlAbi), accessControlAddr);
  runtimePolicyContract.transactionConfirmationBlocks = 1;
  const roles = await Promise.all(indexToRole.filter(r => r).filter(r => r === role || !role).map(r => runtimePolicyContract.methods.roleState(roleIndexMap.get(r), contractAddress).call().then(result => ({
    role: r,
    binding: bindings[(0, _ramda.compose)(web3.utils.hexToNumber, web3.utils.toHex)(result)]
  }))));

  if (role && !roles.length) {
    return [{
      role,
      binding: 'UNDEFINED'
    }];
  }

  return roles;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvcHJvY2Vzcy1jb250cmFjdC9yZXNvdXJjZXMudHMiXSwibmFtZXMiOlsiYmluZGluZ3MiLCJ3ZWIzIiwicmVnaXN0cnlDb250cmFjdCIsImNvbnRyYWN0QWRkcmVzcyIsInJvbGUiLCJpbmRleFRvUm9sZSIsImFjY2Vzc0NvbnRyb2xBYmkiLCJwb2xpY3kiLCJmaW5kIiwiX2lkIiwiYmluZGluZ1BvbGljeUZvciIsImFkZHJlc3MiLCJyb2xlSW5kZXhNYXAiLCJhY2Nlc3NDb250cm9sQWRkciIsImZpbmRSdW50aW1lUG9saWN5IiwidG9TdHJpbmciLCJydW50aW1lUG9saWN5Q29udHJhY3QiLCJldGgiLCJDb250cmFjdCIsIkpTT04iLCJwYXJzZSIsInRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzIiwicm9sZXMiLCJQcm9taXNlIiwiYWxsIiwiZmlsdGVyIiwiciIsIm1hcCIsIm1ldGhvZHMiLCJyb2xlU3RhdGUiLCJnZXQiLCJjYWxsIiwidGhlbiIsInJlc3VsdCIsImJpbmRpbmciLCJ1dGlscyIsImhleFRvTnVtYmVyIiwidG9IZXgiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7OztBQUVBLE1BQU1BLFFBQVEsR0FBRztBQUNmLEtBQUcsU0FEWTtBQUVmLEtBQUcsV0FGWTtBQUdmLEtBQUcsV0FIWTtBQUlmLEtBQUc7QUFKWSxDQUFqQjs7ZUFPZSxDQUNiO0FBQ0VDLEVBQUFBLElBREY7QUFFRUMsRUFBQUE7QUFGRixDQURhLEtBUUEsT0FDYkMsZUFEYSxFQUViQyxJQUZhLEtBR0k7QUFDakIsUUFBTSxDQUFDO0FBQ0xDLElBQUFBLFdBREs7QUFFTEMsSUFBQUE7QUFGSyxHQUFELElBR0QsTUFBTUMsYUFBT0MsSUFBUCxDQUFZO0FBQ3JCQyxJQUFBQSxHQUFHLEVBQUUsTUFBTVAsZ0JBQWdCLENBQ3hCUSxnQkFEUSxDQUNTO0FBQ2hCQyxNQUFBQSxPQUFPLEVBQUVSO0FBRE8sS0FEVDtBQURVLEdBQVosQ0FIWDtBQVVBLFFBQU1TLFlBQVksR0FBRywwQkFBWVAsV0FBWixDQUFyQjtBQUVBLFFBQU1RLGlCQUFpQixHQUFHLE1BQU1YLGdCQUFnQixDQUM3Q1ksaUJBRDZCLENBQ1g7QUFBRUgsSUFBQUEsT0FBTyxFQUFFUjtBQUFYLEdBRFcsQ0FBaEM7O0FBR0EsTUFBR1UsaUJBQWlCLENBQUNFLFFBQWxCLE9BQWlDLDRDQUFwQyxFQUFrRjtBQUNoRixXQUFPLEVBQVA7QUFDRDs7QUFFRCxRQUFNQyxxQkFBcUIsR0FBRyxJQUFJZixJQUFJLENBQUNnQixHQUFMLENBQVNDLFFBQWIsQ0FDNUJDLElBQUksQ0FBQ0MsS0FBTCxDQUFXZCxnQkFBWCxDQUQ0QixFQUU1Qk8saUJBRjRCLENBQTlCO0FBSUFHLEVBQUFBLHFCQUFxQixDQUFDSyw2QkFBdEIsR0FBc0QsQ0FBdEQ7QUFFQSxRQUFNQyxLQUFLLEdBQUcsTUFBTUMsT0FBTyxDQUFDQyxHQUFSLENBQ2xCbkIsV0FBVyxDQUNSb0IsTUFESCxDQUVJQyxDQUFDLElBQUlBLENBRlQsRUFJR0QsTUFKSCxDQUtJQyxDQUFDLElBQUlBLENBQUMsS0FBS3RCLElBQU4sSUFBYyxDQUFDQSxJQUx4QixFQU9HdUIsR0FQSCxDQVFJRCxDQUFDLElBQ0NWLHFCQUFxQixDQUNsQlksT0FESCxDQUVHQyxTQUZILENBR0lqQixZQUFZLENBQUNrQixHQUFiLENBQWlCSixDQUFqQixDQUhKLEVBSUl2QixlQUpKLEVBTUc0QixJQU5ILEdBT0dDLElBUEgsQ0FRSUMsTUFBTSxLQUFLO0FBQ1Q3QixJQUFBQSxJQUFJLEVBQUVzQixDQURHO0FBRVRRLElBQUFBLE9BQU8sRUFBRWxDLFFBQVEsQ0FDZixvQkFDRUMsSUFBSSxDQUFDa0MsS0FBTCxDQUFXQyxXQURiLEVBRUVuQyxJQUFJLENBQUNrQyxLQUFMLENBQVdFLEtBRmIsRUFHRUosTUFIRixDQURlO0FBRlIsR0FBTCxDQVJWLENBVE4sQ0FEa0IsQ0FBcEI7O0FBK0JBLE1BQUk3QixJQUFJLElBQUksQ0FBQ2tCLEtBQUssQ0FBQ2dCLE1BQW5CLEVBQTJCO0FBQ3pCLFdBQU8sQ0FBQztBQUNObEMsTUFBQUEsSUFETTtBQUVOOEIsTUFBQUEsT0FBTyxFQUFFO0FBRkgsS0FBRCxDQUFQO0FBSUQ7O0FBQ0QsU0FBT1osS0FBUDtBQUNELEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb21wb3NlIH0gZnJvbSAncmFtZGEnXG5pbXBvcnQgaGV4VG9JZCBmcm9tICcuLi91dGlsL2hleC10by1pZCdcbmltcG9ydCB7IHBvbGljeSB9IGZyb20gJy4uL3JlcG8nXG5pbXBvcnQgZmluZFJvbGVNYXAgZnJvbSAnLi4vdXRpbC9maW5kLXJvbGUtbWFwJ1xuXG5jb25zdCBiaW5kaW5ncyA9IHtcbiAgMDogJ1VOQk9VTkQnLFxuICAxOiAnUkVMRUFTSU5HJyxcbiAgMjogJ05PTUlOQVRFRCcsXG4gIDM6ICdCT1VORCdcbn1cblxuZXhwb3J0IGRlZmF1bHQgKFxuICB7XG4gICAgd2ViMyxcbiAgICByZWdpc3RyeUNvbnRyYWN0LFxuICB9OiB7XG4gICAgd2ViMzogV2ViMyxcbiAgICByZWdpc3RyeUNvbnRyYWN0OiBpbXBvcnQoJ2NhdGVycGlsbGFyLWxpYicpLlJlZ2lzdHJ5Q29udHJhY3QsXG4gIH1cbik6IEZ1bmN0aW9uID0+IGFzeW5jIChcbiAgY29udHJhY3RBZGRyZXNzLFxuICByb2xlLFxuKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgY29uc3QgW3tcbiAgICBpbmRleFRvUm9sZSxcbiAgICBhY2Nlc3NDb250cm9sQWJpLFxuICB9XSA9IGF3YWl0IHBvbGljeS5maW5kKHtcbiAgICBfaWQ6IGF3YWl0IHJlZ2lzdHJ5Q29udHJhY3RcbiAgICAgIC5iaW5kaW5nUG9saWN5Rm9yKHtcbiAgICAgICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzLFxuICAgICAgfSlcbiAgfSlcblxuICBjb25zdCByb2xlSW5kZXhNYXAgPSBmaW5kUm9sZU1hcChpbmRleFRvUm9sZSk7XG5cbiAgY29uc3QgYWNjZXNzQ29udHJvbEFkZHIgPSBhd2FpdCByZWdpc3RyeUNvbnRyYWN0XG4gICAgLmZpbmRSdW50aW1lUG9saWN5KHsgYWRkcmVzczogY29udHJhY3RBZGRyZXNzIH0pXG5cbiAgaWYoYWNjZXNzQ29udHJvbEFkZHIudG9TdHJpbmcoKSA9PT0gJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcpIHtcbiAgICByZXR1cm4gW11cbiAgfVxuXG4gIGNvbnN0IHJ1bnRpbWVQb2xpY3lDb250cmFjdCA9IG5ldyB3ZWIzLmV0aC5Db250cmFjdChcbiAgICBKU09OLnBhcnNlKGFjY2Vzc0NvbnRyb2xBYmkpLFxuICAgIGFjY2Vzc0NvbnRyb2xBZGRyLFxuICApXG4gIHJ1bnRpbWVQb2xpY3lDb250cmFjdC50cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2NrcyA9IDE7XG5cbiAgY29uc3Qgcm9sZXMgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICBpbmRleFRvUm9sZVxuICAgICAgLmZpbHRlcihcbiAgICAgICAgciA9PiByLFxuICAgICAgKSAgXG4gICAgICAuZmlsdGVyKFxuICAgICAgICByID0+IHIgPT09IHJvbGUgfHwgIXJvbGUsXG4gICAgICApXG4gICAgICAubWFwKFxuICAgICAgICByID0+XG4gICAgICAgICAgcnVudGltZVBvbGljeUNvbnRyYWN0XG4gICAgICAgICAgICAubWV0aG9kc1xuICAgICAgICAgICAgLnJvbGVTdGF0ZShcbiAgICAgICAgICAgICAgcm9sZUluZGV4TWFwLmdldChyKSxcbiAgICAgICAgICAgICAgY29udHJhY3RBZGRyZXNzXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuY2FsbCgpXG4gICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgcmVzdWx0ID0+ICh7XG4gICAgICAgICAgICAgICAgcm9sZTogcixcbiAgICAgICAgICAgICAgICBiaW5kaW5nOiBiaW5kaW5nc1tcbiAgICAgICAgICAgICAgICAgIGNvbXBvc2UoXG4gICAgICAgICAgICAgICAgICAgIHdlYjMudXRpbHMuaGV4VG9OdW1iZXIsXG4gICAgICAgICAgICAgICAgICAgIHdlYjMudXRpbHMudG9IZXhcbiAgICAgICAgICAgICAgICAgICkocmVzdWx0KVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICApXG4gIClcbiAgXG4gIGlmIChyb2xlICYmICFyb2xlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gW3tcbiAgICAgIHJvbGUsXG4gICAgICBiaW5kaW5nOiAnVU5ERUZJTkVEJyxcbiAgICB9XVxuICB9XG4gIHJldHVybiByb2xlc1xufVxuICAgIFxuIl19