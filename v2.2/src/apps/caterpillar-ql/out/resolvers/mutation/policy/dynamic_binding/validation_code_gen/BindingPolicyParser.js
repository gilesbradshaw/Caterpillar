"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BindingVisitor = void 0;

var _Decorators = require("antlr4ts/Decorators");

var _DataStructures = require("./DataStructures");

var _class, _temp;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }

let BindingVisitor = (_class = (_temp = class BindingVisitor {
  constructor() {
    _defineProperty(this, "_names", []);

    _defineProperty(this, "policy", new _DataStructures.Policy());
  }

  defaultResult() {
    return "";
  }

  updateRules(names) {
    this._names = names;
  }

  visitTerminal(node) {
    let res = node.toStringTree();
    if (res === 'and') return '&';else if (res === 'or') return '|';else return res;
  }

  visitErrorNode(node) {
    let res = node.toStringTree();
    return res;
  }

  visit(tree) {
    return tree.accept(this);
  }

  visitUnbinding_statement(ctx) {
    let statement = new _DataStructures.Statement();
    statement.nominator = ctx.nominator().accept(this);
    statement.nominee = ctx.nominee().accept(this);
    if (ctx.binding_constr() !== undefined) statement.bindingConstraint = this.createDisjunctionSet(ctx.binding_constr().accept(this));
    if (ctx.endorsement_constr() !== undefined) statement.endorsementConstraint = this.createDisjunctionSet(ctx.endorsement_constr().accept(this));
    this.policy.addReleaseStatement(statement);
    return '';
  }

  visitBinding_statement(ctx) {
    if (ctx.is_creator() !== undefined) {
      let creator = ctx.is_creator().accept(this);
      this.policy.setCreator(creator);
    } else {
      let statement = new _DataStructures.Statement();
      statement.nominator = ctx.nominator().accept(this);
      statement.nominee = ctx.nominee().accept(this);
      if (ctx.binding_constr() !== undefined) statement.bindingConstraint = this.createDisjunctionSet(ctx.binding_constr().accept(this));
      if (ctx.endorsement_constr() !== undefined) statement.endorsementConstraint = this.createDisjunctionSet(ctx.endorsement_constr().accept(this));
      this.policy.addNominationStatement(statement);
    }

    return '';
  }

  visitIs_creator(ctx) {
    return ctx.role().text;
  }

  visitNominator(ctx) {
    this.policy.addRole(ctx.text);
    return ctx.text;
  }

  visitNominee(ctx) {
    this.policy.addRole(ctx.text);
    return ctx.text;
  }

  visitRole(ctx) {
    this.policy.addRole(ctx.text);
    return ctx.text;
  }

  visitBinding_constr(ctx) {
    let neg = ctx.NOT() === undefined ? '+' : '-';
    return neg + ctx.set_expresion().accept(this);
  }

  visitEndorsement_constr(ctx) {
    return '+' + ctx.set_expresion().accept(this);
  }

  visitSet_expresion(ctx) {
    let exp = '';

    for (let i = 0; i < ctx.childCount; i++) exp += ctx.getChild(i).accept(this);

    return exp;
  }

  visitChildren(node) {
    let nodeName = this._names[node.ruleContext.ruleIndex];
    let res = '';

    for (let i = 0; i < node.childCount; i++) res += node.getChild(i).accept(this);

    return res;
  }

  createDisjunctionSet(setStr) {
    let disjunctionSet = new _DataStructures.DisjunctionSet();
    disjunctionSet.isNegative = setStr[0] === '+' ? false : true;
    let conjS = setStr.substr(1).split('|');
    conjS.forEach(value => {
      let conjuntionSet = new _DataStructures.ConjunctionSet();
      conjuntionSet.roles = value.split('&');
      disjunctionSet.conjunctionSets.push(conjuntionSet);
    });
    return disjunctionSet;
  }

}, _temp), (_applyDecoratedDescriptor(_class.prototype, "visitTerminal", [_Decorators.Override], Object.getOwnPropertyDescriptor(_class.prototype, "visitTerminal"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, "visitErrorNode", [_Decorators.Override], Object.getOwnPropertyDescriptor(_class.prototype, "visitErrorNode"), _class.prototype)), _class);
exports.BindingVisitor = BindingVisitor;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,