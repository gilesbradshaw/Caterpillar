"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _registerFactory = _interopRequireDefault(require("./register-factory"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('caterpillarql:model:create-parent-to-child-relation');

const createParent2ChildRelation = (web3, registryContract, currentIndex, sortedElements, outputContracts, modelInfo) => {
  return web3.eth.personal.getAccounts().then(accounts => registryContract.methods.addChildBundleId(web3.utils.fromAscii(sortedElements[currentIndex].bundleParent), web3.utils.fromAscii(sortedElements[currentIndex].bundleId), sortedElements[currentIndex].nodeIndex).send({
    from: accounts[0],
    gas: 4700000
  }).then(result => {
    if (currentIndex + 1 < sortedElements.length) {
      return createParent2ChildRelation(web3, registryContract, currentIndex + 1, sortedElements, outputContracts, modelInfo);
    } else {
      debug('....................................................................');
      let removedCallActivities = [];
      sortedElements.forEach(element => {
        if (modelInfo.controlFlowInfoMap.has(element.nodeId) || modelInfo.globalNodeMap.get(element.nodeId).$type === 'bpmn:StartEvent') {
          removedCallActivities.push(element);
        }
      });

      if (removedCallActivities.length > 0) {
        debug('DEPLOYING FACTORIES AND UPDATING PROCESS-FACTORY RELATION IN REGISTRY ...');
        return (0, _registerFactory.default)(web3, registryContract, 0, removedCallActivities, outputContracts, modelInfo);
      }
    }
  }));
};

var _default = createParent2ChildRelation;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvbXV0YXRpb24vbW9kZWwvZGVwbG95bWVudC9jcmVhdGUtcGFyZW50LXRvLWNoaWxkLXJlbGF0aW9uLnRzIl0sIm5hbWVzIjpbImRlYnVnIiwiY3JlYXRlUGFyZW50MkNoaWxkUmVsYXRpb24iLCJ3ZWIzIiwicmVnaXN0cnlDb250cmFjdCIsImN1cnJlbnRJbmRleCIsInNvcnRlZEVsZW1lbnRzIiwib3V0cHV0Q29udHJhY3RzIiwibW9kZWxJbmZvIiwiZXRoIiwicGVyc29uYWwiLCJnZXRBY2NvdW50cyIsInRoZW4iLCJhY2NvdW50cyIsIm1ldGhvZHMiLCJhZGRDaGlsZEJ1bmRsZUlkIiwidXRpbHMiLCJmcm9tQXNjaWkiLCJidW5kbGVQYXJlbnQiLCJidW5kbGVJZCIsIm5vZGVJbmRleCIsInNlbmQiLCJmcm9tIiwiZ2FzIiwicmVzdWx0IiwibGVuZ3RoIiwicmVtb3ZlZENhbGxBY3Rpdml0aWVzIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJjb250cm9sRmxvd0luZm9NYXAiLCJoYXMiLCJub2RlSWQiLCJnbG9iYWxOb2RlTWFwIiwiZ2V0IiwiJHR5cGUiLCJwdXNoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUcscUJBQU8scURBQVAsQ0FBZDs7QUFFQSxNQUFNQywwQkFBMEIsR0FBRyxDQUFDQyxJQUFELEVBQU9DLGdCQUFQLEVBQXlCQyxZQUF6QixFQUF1Q0MsY0FBdkMsRUFBdURDLGVBQXZELEVBQXdFQyxTQUF4RSxLQUFzRjtBQUN2SCxTQUFPTCxJQUFJLENBQUNNLEdBQUwsQ0FBU0MsUUFBVCxDQUFrQkMsV0FBbEIsR0FDSkMsSUFESSxDQUVIQyxRQUFRLElBQ05ULGdCQUFnQixDQUNiVSxPQURILENBRUdDLGdCQUZILENBR0laLElBQUksQ0FBQ2EsS0FBTCxDQUFXQyxTQUFYLENBQXFCWCxjQUFjLENBQUNELFlBQUQsQ0FBZCxDQUE2QmEsWUFBbEQsQ0FISixFQUlJZixJQUFJLENBQUNhLEtBQUwsQ0FBV0MsU0FBWCxDQUFxQlgsY0FBYyxDQUFDRCxZQUFELENBQWQsQ0FBNkJjLFFBQWxELENBSkosRUFLSWIsY0FBYyxDQUFDRCxZQUFELENBQWQsQ0FBNkJlLFNBTGpDLEVBT0dDLElBUEgsQ0FRSTtBQUNFQyxJQUFBQSxJQUFJLEVBQUVULFFBQVEsQ0FBQyxDQUFELENBRGhCO0FBRUVVLElBQUFBLEdBQUcsRUFBRTtBQUZQLEdBUkosRUFhR1gsSUFiSCxDQWNLWSxNQUFELElBQVk7QUFDVixRQUFJbkIsWUFBWSxHQUFHLENBQWYsR0FBbUJDLGNBQWMsQ0FBQ21CLE1BQXRDLEVBQThDO0FBQzVDLGFBQU92QiwwQkFBMEIsQ0FBQ0MsSUFBRCxFQUFPQyxnQkFBUCxFQUF5QkMsWUFBWSxHQUFHLENBQXhDLEVBQTJDQyxjQUEzQyxFQUEyREMsZUFBM0QsRUFBNEVDLFNBQTVFLENBQWpDO0FBQ0QsS0FGRCxNQUVPO0FBQ0xQLE1BQUFBLEtBQUssQ0FBQyxzRUFBRCxDQUFMO0FBQ0EsVUFBSXlCLHFCQUFxQixHQUFHLEVBQTVCO0FBQ0FwQixNQUFBQSxjQUFjLENBQUNxQixPQUFmLENBQXVCQyxPQUFPLElBQUk7QUFDaEMsWUFBSXBCLFNBQVMsQ0FBQ3FCLGtCQUFWLENBQTZCQyxHQUE3QixDQUFpQ0YsT0FBTyxDQUFDRyxNQUF6QyxLQUFvRHZCLFNBQVMsQ0FBQ3dCLGFBQVYsQ0FBd0JDLEdBQXhCLENBQTRCTCxPQUFPLENBQUNHLE1BQXBDLEVBQTRDRyxLQUE1QyxLQUFzRCxpQkFBOUcsRUFBaUk7QUFDL0hSLFVBQUFBLHFCQUFxQixDQUFDUyxJQUF0QixDQUEyQlAsT0FBM0I7QUFDRDtBQUNGLE9BSkQ7O0FBS0EsVUFBSUYscUJBQXFCLENBQUNELE1BQXRCLEdBQStCLENBQW5DLEVBQXNDO0FBQ3BDeEIsUUFBQUEsS0FBSyxDQUFDLDJFQUFELENBQUw7QUFDQSxlQUFPLDhCQUFnQkUsSUFBaEIsRUFBc0JDLGdCQUF0QixFQUF3QyxDQUF4QyxFQUEyQ3NCLHFCQUEzQyxFQUFrRW5CLGVBQWxFLEVBQW1GQyxTQUFuRixDQUFQO0FBQ0Q7QUFDRjtBQUNGLEdBOUJMLENBSEMsQ0FBUDtBQW9DRCxDQXJDRDs7ZUF1Q2VOLDBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9kZWJ1ZyBmcm9tICdkZWJ1ZydcblxuaW1wb3J0IHJlZ2lzdGVyRmFjdG9yeSBmcm9tICcuL3JlZ2lzdGVyLWZhY3RvcnknXG5cbmNvbnN0IGRlYnVnID0gX2RlYnVnKCdjYXRlcnBpbGxhcnFsOm1vZGVsOmNyZWF0ZS1wYXJlbnQtdG8tY2hpbGQtcmVsYXRpb24nKVxuXG5jb25zdCBjcmVhdGVQYXJlbnQyQ2hpbGRSZWxhdGlvbiA9ICh3ZWIzLCByZWdpc3RyeUNvbnRyYWN0LCBjdXJyZW50SW5kZXgsIHNvcnRlZEVsZW1lbnRzLCBvdXRwdXRDb250cmFjdHMsIG1vZGVsSW5mbykgPT4ge1xuICByZXR1cm4gd2ViMy5ldGgucGVyc29uYWwuZ2V0QWNjb3VudHMoKVxuICAgIC50aGVuKFxuICAgICAgYWNjb3VudHMgPT5cbiAgICAgICAgcmVnaXN0cnlDb250cmFjdFxuICAgICAgICAgIC5tZXRob2RzXG4gICAgICAgICAgLmFkZENoaWxkQnVuZGxlSWQoXG4gICAgICAgICAgICB3ZWIzLnV0aWxzLmZyb21Bc2NpaShzb3J0ZWRFbGVtZW50c1tjdXJyZW50SW5kZXhdLmJ1bmRsZVBhcmVudCksXG4gICAgICAgICAgICB3ZWIzLnV0aWxzLmZyb21Bc2NpaShzb3J0ZWRFbGVtZW50c1tjdXJyZW50SW5kZXhdLmJ1bmRsZUlkKSxcbiAgICAgICAgICAgIHNvcnRlZEVsZW1lbnRzW2N1cnJlbnRJbmRleF0ubm9kZUluZGV4LFxuICAgICAgICAgIClcbiAgICAgICAgICAuc2VuZChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZnJvbTogYWNjb3VudHNbMF0sXG4gICAgICAgICAgICAgIGdhczogNDcwMDAwMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApXG4gICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggKyAxIDwgc29ydGVkRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBhcmVudDJDaGlsZFJlbGF0aW9uKHdlYjMsIHJlZ2lzdHJ5Q29udHJhY3QsIGN1cnJlbnRJbmRleCArIDEsIHNvcnRlZEVsZW1lbnRzLCBvdXRwdXRDb250cmFjdHMsIG1vZGVsSW5mbyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVidWcoJy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uJyk7XG4gICAgICAgICAgICAgICAgbGV0IHJlbW92ZWRDYWxsQWN0aXZpdGllcyA9IFtdO1xuICAgICAgICAgICAgICAgIHNvcnRlZEVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAobW9kZWxJbmZvLmNvbnRyb2xGbG93SW5mb01hcC5oYXMoZWxlbWVudC5ub2RlSWQpIHx8IG1vZGVsSW5mby5nbG9iYWxOb2RlTWFwLmdldChlbGVtZW50Lm5vZGVJZCkuJHR5cGUgPT09ICdicG1uOlN0YXJ0RXZlbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZWRDYWxsQWN0aXZpdGllcy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmVkQ2FsbEFjdGl2aXRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgZGVidWcoJ0RFUExPWUlORyBGQUNUT1JJRVMgQU5EIFVQREFUSU5HIFBST0NFU1MtRkFDVE9SWSBSRUxBVElPTiBJTiBSRUdJU1RSWSAuLi4nKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZWdpc3RlckZhY3Rvcnkod2ViMywgcmVnaXN0cnlDb250cmFjdCwgMCwgcmVtb3ZlZENhbGxBY3Rpdml0aWVzLCBvdXRwdXRDb250cmFjdHMsIG1vZGVsSW5mbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKVxuICAgICAgICApXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQYXJlbnQyQ2hpbGRSZWxhdGlvblxuIl19