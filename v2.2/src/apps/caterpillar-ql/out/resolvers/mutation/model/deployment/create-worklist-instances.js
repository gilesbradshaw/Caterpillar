"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _continueWorklistCreation = _interopRequireDefault(require("./continue-worklist-creation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = (0, _debug2.default)('caterpillarql:model:create-worklist-instances');

const createWorklistInstances = (web3, registryContract, currentIndex, sortedElements, outputContracts, modelInfo) => {
  debug('----------------------------------------------------------------------------------------');
  const worklistInstanceContract = outputContracts[modelInfo.id][`${sortedElements[currentIndex].nodeName}_worklist`];

  if (worklistInstanceContract) {
    const worklistContract = new web3.eth.Contract(worklistInstanceContract.abi);
    worklistContract.transactionConfirmationBlocks = 1;
    return web3.eth.personal.getAccounts().then(accounts => worklistContract.deploy({
      data: "0x" + worklistInstanceContract.evm.bytecode.object
    }).send({
      from: accounts[0],
      gas: 4700000
    }).then(contractW => {
      if (contractW.address) {
        return registryContract.registerWorklist({
          bundleId: web3.utils.fromAscii(sortedElements[currentIndex].bundleId),
          address: contractW.address
        })({
          from: accounts[0],
          gas: 4700000
        }).then(result1 => (0, _continueWorklistCreation.default)(web3, registryContract, currentIndex, [...sortedElements.slice(0, currentIndex - 1), _objectSpread({}, sortedElements[currentIndex], {
          worklist: contractW.address
        }), ...sortedElements.slice(currentIndex + 1)], outputContracts, modelInfo, createWorklistInstances));
      }
    }));
  } else {
    return (0, _continueWorklistCreation.default)(web3, registryContract, currentIndex, sortedElements, outputContracts, modelInfo, createWorklistInstances);
  }
};

var _default = createWorklistInstances;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvbXV0YXRpb24vbW9kZWwvZGVwbG95bWVudC9jcmVhdGUtd29ya2xpc3QtaW5zdGFuY2VzLnRzIl0sIm5hbWVzIjpbImRlYnVnIiwiY3JlYXRlV29ya2xpc3RJbnN0YW5jZXMiLCJ3ZWIzIiwicmVnaXN0cnlDb250cmFjdCIsImN1cnJlbnRJbmRleCIsInNvcnRlZEVsZW1lbnRzIiwib3V0cHV0Q29udHJhY3RzIiwibW9kZWxJbmZvIiwid29ya2xpc3RJbnN0YW5jZUNvbnRyYWN0IiwiaWQiLCJub2RlTmFtZSIsIndvcmtsaXN0Q29udHJhY3QiLCJldGgiLCJDb250cmFjdCIsImFiaSIsInRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzIiwicGVyc29uYWwiLCJnZXRBY2NvdW50cyIsInRoZW4iLCJhY2NvdW50cyIsImRlcGxveSIsImRhdGEiLCJldm0iLCJieXRlY29kZSIsIm9iamVjdCIsInNlbmQiLCJmcm9tIiwiZ2FzIiwiY29udHJhY3RXIiwiYWRkcmVzcyIsInJlZ2lzdGVyV29ya2xpc3QiLCJidW5kbGVJZCIsInV0aWxzIiwiZnJvbUFzY2lpIiwicmVzdWx0MSIsInNsaWNlIiwid29ya2xpc3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7Ozs7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUcscUJBQU8sK0NBQVAsQ0FBZDs7QUFFQSxNQUFNQyx1QkFBdUIsR0FBRyxDQUM5QkMsSUFEOEIsRUFFOUJDLGdCQUY4QixFQUc5QkMsWUFIOEIsRUFJOUJDLGNBSjhCLEVBSzlCQyxlQUw4QixFQU05QkMsU0FOOEIsS0FPM0I7QUFDSFAsRUFBQUEsS0FBSyxDQUFDLDBGQUFELENBQUw7QUFDQSxRQUFNUSx3QkFBd0IsR0FBR0YsZUFBZSxDQUFDQyxTQUFTLENBQUNFLEVBQVgsQ0FBZixDQUErQixHQUFFSixjQUFjLENBQUNELFlBQUQsQ0FBZCxDQUE2Qk0sUUFBUyxXQUF2RSxDQUFqQzs7QUFDQSxNQUFJRix3QkFBSixFQUE4QjtBQUM1QixVQUFNRyxnQkFBZ0IsR0FBRyxJQUFJVCxJQUFJLENBQUNVLEdBQUwsQ0FBU0MsUUFBYixDQUFzQkwsd0JBQXdCLENBQUNNLEdBQS9DLENBQXpCO0FBQ0FILElBQUFBLGdCQUFnQixDQUFDSSw2QkFBakIsR0FBaUQsQ0FBakQ7QUFDQSxXQUFPYixJQUFJLENBQUNVLEdBQUwsQ0FBU0ksUUFBVCxDQUFrQkMsV0FBbEIsR0FDSkMsSUFESSxDQUVIQyxRQUFRLElBQ05SLGdCQUFnQixDQUNiUyxNQURILENBRUk7QUFDRUMsTUFBQUEsSUFBSSxFQUFFLE9BQU9iLHdCQUF3QixDQUFDYyxHQUF6QixDQUE2QkMsUUFBN0IsQ0FBc0NDO0FBRHJELEtBRkosRUFNR0MsSUFOSCxDQU9JO0FBQ0VDLE1BQUFBLElBQUksRUFBRVAsUUFBUSxDQUFDLENBQUQsQ0FEaEI7QUFFRVEsTUFBQUEsR0FBRyxFQUFFO0FBRlAsS0FQSixFQVlHVCxJQVpILENBYUlVLFNBQVMsSUFBSTtBQUNYLFVBQUlBLFNBQVMsQ0FBQ0MsT0FBZCxFQUF1QjtBQUNyQixlQUFPMUIsZ0JBQWdCLENBQ3BCMkIsZ0JBREksQ0FDYTtBQUNoQkMsVUFBQUEsUUFBUSxFQUFFN0IsSUFBSSxDQUFDOEIsS0FBTCxDQUFXQyxTQUFYLENBQXFCNUIsY0FBYyxDQUFDRCxZQUFELENBQWQsQ0FBNkIyQixRQUFsRCxDQURNO0FBRWhCRixVQUFBQSxPQUFPLEVBQUVELFNBQVMsQ0FBQ0M7QUFGSCxTQURiLEVBTUg7QUFDRUgsVUFBQUEsSUFBSSxFQUFFUCxRQUFRLENBQUMsQ0FBRCxDQURoQjtBQUVFUSxVQUFBQSxHQUFHLEVBQUU7QUFGUCxTQU5HLEVBV0pULElBWEksQ0FZSGdCLE9BQU8sSUFDTCx1Q0FDRWhDLElBREYsRUFFRUMsZ0JBRkYsRUFHRUMsWUFIRixFQUlFLENBQ0UsR0FBR0MsY0FBYyxDQUFDOEIsS0FBZixDQUFxQixDQUFyQixFQUF3Qi9CLFlBQVksR0FBRSxDQUF0QyxDQURMLG9CQUdPQyxjQUFjLENBQUNELFlBQUQsQ0FIckI7QUFJSWdDLFVBQUFBLFFBQVEsRUFBRVIsU0FBUyxDQUFDQztBQUp4QixZQU1FLEdBQUd4QixjQUFjLENBQUM4QixLQUFmLENBQXFCL0IsWUFBWSxHQUFHLENBQXBDLENBTkwsQ0FKRixFQVlFRSxlQVpGLEVBYUVDLFNBYkYsRUFjRU4sdUJBZEYsQ0FiQyxDQUFQO0FBOEJEO0FBQ0YsS0E5Q0wsQ0FIQyxDQUFQO0FBb0RELEdBdkRELE1BdURPO0FBQ0wsV0FBTyx1Q0FDTEMsSUFESyxFQUVMQyxnQkFGSyxFQUdMQyxZQUhLLEVBSUxDLGNBSkssRUFLTEMsZUFMSyxFQU1MQyxTQU5LLEVBT0xOLHVCQVBLLENBQVA7QUFTRDtBQUNGLENBNUVEOztlQThFZUEsdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2RlYnVnIGZyb20gJ2RlYnVnJ1xuXG5pbXBvcnQgIGNvbnRpbnVlV29ya2xpc3RDcmVhdGlvbiBmcm9tICcuL2NvbnRpbnVlLXdvcmtsaXN0LWNyZWF0aW9uJ1xuXG5jb25zdCBkZWJ1ZyA9IF9kZWJ1ZygnY2F0ZXJwaWxsYXJxbDptb2RlbDpjcmVhdGUtd29ya2xpc3QtaW5zdGFuY2VzJylcblxuY29uc3QgY3JlYXRlV29ya2xpc3RJbnN0YW5jZXMgPSAoXG4gIHdlYjMsXG4gIHJlZ2lzdHJ5Q29udHJhY3Q6IGltcG9ydCgnY2F0ZXJwaWxsYXItbGliJykuUmVnaXN0cnlDb250cmFjdCxcbiAgY3VycmVudEluZGV4LFxuICBzb3J0ZWRFbGVtZW50cyxcbiAgb3V0cHV0Q29udHJhY3RzLFxuICBtb2RlbEluZm8sXG4pID0+IHtcbiAgZGVidWcoJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKVxuICBjb25zdCB3b3JrbGlzdEluc3RhbmNlQ29udHJhY3QgPSBvdXRwdXRDb250cmFjdHNbbW9kZWxJbmZvLmlkXVtgJHtzb3J0ZWRFbGVtZW50c1tjdXJyZW50SW5kZXhdLm5vZGVOYW1lfV93b3JrbGlzdGBdXG4gIGlmICh3b3JrbGlzdEluc3RhbmNlQ29udHJhY3QpIHtcbiAgICBjb25zdCB3b3JrbGlzdENvbnRyYWN0ID0gbmV3IHdlYjMuZXRoLkNvbnRyYWN0KHdvcmtsaXN0SW5zdGFuY2VDb250cmFjdC5hYmkpXG4gICAgd29ya2xpc3RDb250cmFjdC50cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2NrcyA9IDFcbiAgICByZXR1cm4gd2ViMy5ldGgucGVyc29uYWwuZ2V0QWNjb3VudHMoKVxuICAgICAgLnRoZW4oXG4gICAgICAgIGFjY291bnRzID0+XG4gICAgICAgICAgd29ya2xpc3RDb250cmFjdFxuICAgICAgICAgICAgLmRlcGxveShcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRhdGE6IFwiMHhcIiArIHdvcmtsaXN0SW5zdGFuY2VDb250cmFjdC5ldm0uYnl0ZWNvZGUub2JqZWN0LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnNlbmQoXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmcm9tOiBhY2NvdW50c1swXSxcbiAgICAgICAgICAgICAgICBnYXM6IDQ3MDAwMDAsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgY29udHJhY3RXID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29udHJhY3RXLmFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZWdpc3RyeUNvbnRyYWN0XG4gICAgICAgICAgICAgICAgICAgIC5yZWdpc3RlcldvcmtsaXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICBidW5kbGVJZDogd2ViMy51dGlscy5mcm9tQXNjaWkoc29ydGVkRWxlbWVudHNbY3VycmVudEluZGV4XS5idW5kbGVJZCksXG4gICAgICAgICAgICAgICAgICAgICAgYWRkcmVzczogY29udHJhY3RXLmFkZHJlc3MsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIChcbiAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tOiBhY2NvdW50c1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhczogNDcwMDAwMFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgcmVzdWx0MSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVXb3JrbGlzdENyZWF0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWIzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RyeUNvbnRyYWN0LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uc29ydGVkRWxlbWVudHMuc2xpY2UoMCwgY3VycmVudEluZGV4IC0xKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5zb3J0ZWRFbGVtZW50c1tjdXJyZW50SW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya2xpc3Q6IGNvbnRyYWN0Vy5hZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5zb3J0ZWRFbGVtZW50cy5zbGljZShjdXJyZW50SW5kZXggKyAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRDb250cmFjdHMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsSW5mbyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlV29ya2xpc3RJbnN0YW5jZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250aW51ZVdvcmtsaXN0Q3JlYXRpb24oXG4gICAgICB3ZWIzLFxuICAgICAgcmVnaXN0cnlDb250cmFjdCwgICAgICAgICAgICAgICBcbiAgICAgIGN1cnJlbnRJbmRleCxcbiAgICAgIHNvcnRlZEVsZW1lbnRzLFxuICAgICAgb3V0cHV0Q29udHJhY3RzLFxuICAgICAgbW9kZWxJbmZvLFxuICAgICAgY3JlYXRlV29ya2xpc3RJbnN0YW5jZXMsXG4gICAgKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlV29ya2xpc3RJbnN0YW5jZXNcbiJdfQ==