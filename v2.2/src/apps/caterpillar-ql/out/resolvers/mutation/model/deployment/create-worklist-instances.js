"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _continueWorklistCreation = _interopRequireDefault(require("./continue-worklist-creation"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = (0, _debug2.default)('caterpillarql:model:create-worklist-instances');

const createWorklistInstances = (web3, registryContract, currentIndex, sortedElements, outputContracts, modelInfo) => {
  debug('----------------------------------------------------------------------------------------');
  const workListInstanceContract = outputContracts[modelInfo.id][`${sortedElements[currentIndex].nodeName}_Worklist`];

  if (workListInstanceContract) {
    const worklistContract = new web3.eth.Contract(workListInstanceContract.abi);
    worklistContract.transactionConfirmationBlocks = 1;
    return web3.eth.personal.getAccounts().then(accounts => worklistContract.deploy({
      data: "0x" + workListInstanceContract.evm.bytecode.object
    }).send({
      from: accounts[0],
      gas: 4700000
    }).then(contractW => {
      if (contractW.address) {
        return registryContract.methods.registerWorklist(web3.utils.fromAscii(sortedElements[currentIndex].bundleId), contractW.address).send({
          from: accounts[0],
          gas: 4700000
        }).then(result1 => (0, _continueWorklistCreation.default)(web3, registryContract, currentIndex, [...sortedElements.slice(0, currentIndex - 1), _objectSpread({}, sortedElements[currentIndex], {
          worklist: contractW.address
        }), ...sortedElements.slice(currentIndex + 1)], outputContracts, modelInfo, createWorklistInstances));
      }
    }));
  } else {
    return (0, _continueWorklistCreation.default)(web3, registryContract, currentIndex, sortedElements, outputContracts, modelInfo, createWorklistInstances);
  }
};

var _default = createWorklistInstances;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvbXV0YXRpb24vbW9kZWwvZGVwbG95bWVudC9jcmVhdGUtd29ya2xpc3QtaW5zdGFuY2VzLnRzIl0sIm5hbWVzIjpbImRlYnVnIiwiY3JlYXRlV29ya2xpc3RJbnN0YW5jZXMiLCJ3ZWIzIiwicmVnaXN0cnlDb250cmFjdCIsImN1cnJlbnRJbmRleCIsInNvcnRlZEVsZW1lbnRzIiwib3V0cHV0Q29udHJhY3RzIiwibW9kZWxJbmZvIiwid29ya0xpc3RJbnN0YW5jZUNvbnRyYWN0IiwiaWQiLCJub2RlTmFtZSIsIndvcmtsaXN0Q29udHJhY3QiLCJldGgiLCJDb250cmFjdCIsImFiaSIsInRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzIiwicGVyc29uYWwiLCJnZXRBY2NvdW50cyIsInRoZW4iLCJhY2NvdW50cyIsImRlcGxveSIsImRhdGEiLCJldm0iLCJieXRlY29kZSIsIm9iamVjdCIsInNlbmQiLCJmcm9tIiwiZ2FzIiwiY29udHJhY3RXIiwiYWRkcmVzcyIsIm1ldGhvZHMiLCJyZWdpc3RlcldvcmtsaXN0IiwidXRpbHMiLCJmcm9tQXNjaWkiLCJidW5kbGVJZCIsInJlc3VsdDEiLCJzbGljZSIsIndvcmtsaXN0Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7Ozs7Ozs7O0FBRUEsTUFBTUEsS0FBSyxHQUFHLHFCQUFPLCtDQUFQLENBQWQ7O0FBRUEsTUFBTUMsdUJBQXVCLEdBQUcsQ0FDOUJDLElBRDhCLEVBRTlCQyxnQkFGOEIsRUFHOUJDLFlBSDhCLEVBSTlCQyxjQUo4QixFQUs5QkMsZUFMOEIsRUFNOUJDLFNBTjhCLEtBTzNCO0FBQ0hQLEVBQUFBLEtBQUssQ0FBQywwRkFBRCxDQUFMO0FBQ0EsUUFBTVEsd0JBQXdCLEdBQUdGLGVBQWUsQ0FBQ0MsU0FBUyxDQUFDRSxFQUFYLENBQWYsQ0FBK0IsR0FBRUosY0FBYyxDQUFDRCxZQUFELENBQWQsQ0FBNkJNLFFBQVMsV0FBdkUsQ0FBakM7O0FBQ0EsTUFBSUYsd0JBQUosRUFBOEI7QUFDNUIsVUFBTUcsZ0JBQWdCLEdBQUcsSUFBSVQsSUFBSSxDQUFDVSxHQUFMLENBQVNDLFFBQWIsQ0FBc0JMLHdCQUF3QixDQUFDTSxHQUEvQyxDQUF6QjtBQUNBSCxJQUFBQSxnQkFBZ0IsQ0FBQ0ksNkJBQWpCLEdBQWlELENBQWpEO0FBQ0EsV0FBT2IsSUFBSSxDQUFDVSxHQUFMLENBQVNJLFFBQVQsQ0FBa0JDLFdBQWxCLEdBQ0pDLElBREksQ0FFSEMsUUFBUSxJQUNOUixnQkFBZ0IsQ0FDYlMsTUFESCxDQUVJO0FBQ0VDLE1BQUFBLElBQUksRUFBRSxPQUFPYix3QkFBd0IsQ0FBQ2MsR0FBekIsQ0FBNkJDLFFBQTdCLENBQXNDQztBQURyRCxLQUZKLEVBTUdDLElBTkgsQ0FPSTtBQUNFQyxNQUFBQSxJQUFJLEVBQUVQLFFBQVEsQ0FBQyxDQUFELENBRGhCO0FBRUVRLE1BQUFBLEdBQUcsRUFBRTtBQUZQLEtBUEosRUFZR1QsSUFaSCxDQWFJVSxTQUFTLElBQUk7QUFDWCxVQUFJQSxTQUFTLENBQUNDLE9BQWQsRUFBdUI7QUFDckIsZUFBTzFCLGdCQUFnQixDQUNwQjJCLE9BREksQ0FFSkMsZ0JBRkksQ0FHSDdCLElBQUksQ0FBQzhCLEtBQUwsQ0FBV0MsU0FBWCxDQUFxQjVCLGNBQWMsQ0FBQ0QsWUFBRCxDQUFkLENBQTZCOEIsUUFBbEQsQ0FIRyxFQUlITixTQUFTLENBQUNDLE9BSlAsRUFNSkosSUFOSSxDQU9IO0FBQ0VDLFVBQUFBLElBQUksRUFBRVAsUUFBUSxDQUFDLENBQUQsQ0FEaEI7QUFFRVEsVUFBQUEsR0FBRyxFQUFFO0FBRlAsU0FQRyxFQVlKVCxJQVpJLENBYUhpQixPQUFPLElBQ0wsdUNBQ0VqQyxJQURGLEVBRUVDLGdCQUZGLEVBR0VDLFlBSEYsRUFJRSxDQUNFLEdBQUdDLGNBQWMsQ0FBQytCLEtBQWYsQ0FBcUIsQ0FBckIsRUFBd0JoQyxZQUFZLEdBQUUsQ0FBdEMsQ0FETCxvQkFHT0MsY0FBYyxDQUFDRCxZQUFELENBSHJCO0FBSUlpQyxVQUFBQSxRQUFRLEVBQUVULFNBQVMsQ0FBQ0M7QUFKeEIsWUFNRSxHQUFHeEIsY0FBYyxDQUFDK0IsS0FBZixDQUFxQmhDLFlBQVksR0FBRyxDQUFwQyxDQU5MLENBSkYsRUFZRUUsZUFaRixFQWFFQyxTQWJGLEVBY0VOLHVCQWRGLENBZEMsQ0FBUDtBQStCRDtBQUNGLEtBL0NMLENBSEMsQ0FBUDtBQXFERCxHQXhERCxNQXdETztBQUNMLFdBQU8sdUNBQ0xDLElBREssRUFFTEMsZ0JBRkssRUFHTEMsWUFISyxFQUlMQyxjQUpLLEVBS0xDLGVBTEssRUFNTEMsU0FOSyxFQU9MTix1QkFQSyxDQUFQO0FBU0Q7QUFDRixDQTdFRDs7ZUErRWVBLHVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9kZWJ1ZyBmcm9tICdkZWJ1ZydcblxuaW1wb3J0ICBjb250aW51ZVdvcmtsaXN0Q3JlYXRpb24gZnJvbSAnLi9jb250aW51ZS13b3JrbGlzdC1jcmVhdGlvbidcblxuY29uc3QgZGVidWcgPSBfZGVidWcoJ2NhdGVycGlsbGFycWw6bW9kZWw6Y3JlYXRlLXdvcmtsaXN0LWluc3RhbmNlcycpXG5cbmNvbnN0IGNyZWF0ZVdvcmtsaXN0SW5zdGFuY2VzID0gKFxuICB3ZWIzLFxuICByZWdpc3RyeUNvbnRyYWN0LCBcbiAgY3VycmVudEluZGV4LFxuICBzb3J0ZWRFbGVtZW50cyxcbiAgb3V0cHV0Q29udHJhY3RzLFxuICBtb2RlbEluZm8sXG4pID0+IHtcbiAgZGVidWcoJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKVxuICBjb25zdCB3b3JrTGlzdEluc3RhbmNlQ29udHJhY3QgPSBvdXRwdXRDb250cmFjdHNbbW9kZWxJbmZvLmlkXVtgJHtzb3J0ZWRFbGVtZW50c1tjdXJyZW50SW5kZXhdLm5vZGVOYW1lfV9Xb3JrbGlzdGBdXG4gIGlmICh3b3JrTGlzdEluc3RhbmNlQ29udHJhY3QpIHtcbiAgICBjb25zdCB3b3JrbGlzdENvbnRyYWN0ID0gbmV3IHdlYjMuZXRoLkNvbnRyYWN0KHdvcmtMaXN0SW5zdGFuY2VDb250cmFjdC5hYmkpXG4gICAgd29ya2xpc3RDb250cmFjdC50cmFuc2FjdGlvbkNvbmZpcm1hdGlvbkJsb2NrcyA9IDFcbiAgICByZXR1cm4gd2ViMy5ldGgucGVyc29uYWwuZ2V0QWNjb3VudHMoKVxuICAgICAgLnRoZW4oXG4gICAgICAgIGFjY291bnRzID0+XG4gICAgICAgICAgd29ya2xpc3RDb250cmFjdFxuICAgICAgICAgICAgLmRlcGxveShcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGRhdGE6IFwiMHhcIiArIHdvcmtMaXN0SW5zdGFuY2VDb250cmFjdC5ldm0uYnl0ZWNvZGUub2JqZWN0LFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnNlbmQoXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBmcm9tOiBhY2NvdW50c1swXSxcbiAgICAgICAgICAgICAgICBnYXM6IDQ3MDAwMDAsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgY29udHJhY3RXID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY29udHJhY3RXLmFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZWdpc3RyeUNvbnRyYWN0XG4gICAgICAgICAgICAgICAgICAgIC5tZXRob2RzXG4gICAgICAgICAgICAgICAgICAgIC5yZWdpc3RlcldvcmtsaXN0KFxuICAgICAgICAgICAgICAgICAgICAgIHdlYjMudXRpbHMuZnJvbUFzY2lpKHNvcnRlZEVsZW1lbnRzW2N1cnJlbnRJbmRleF0uYnVuZGxlSWQpLFxuICAgICAgICAgICAgICAgICAgICAgIGNvbnRyYWN0Vy5hZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5zZW5kKFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb206IGFjY291bnRzWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2FzOiA0NzAwMDAwXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgICAgICAgICAgICByZXN1bHQxID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVdvcmtsaXN0Q3JlYXRpb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHdlYjMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJ5Q29udHJhY3QsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5zb3J0ZWRFbGVtZW50cy5zbGljZSgwLCBjdXJyZW50SW5kZXggLTEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnNvcnRlZEVsZW1lbnRzW2N1cnJlbnRJbmRleF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JrbGlzdDogY29udHJhY3RXLmFkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLnNvcnRlZEVsZW1lbnRzLnNsaWNlKGN1cnJlbnRJbmRleCArIDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dENvbnRyYWN0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxJbmZvLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVXb3JrbGlzdEluc3RhbmNlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKVxuICAgICAgICApXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGNvbnRpbnVlV29ya2xpc3RDcmVhdGlvbihcbiAgICAgIHdlYjMsXG4gICAgICByZWdpc3RyeUNvbnRyYWN0LCAgICAgICAgICAgICAgIFxuICAgICAgY3VycmVudEluZGV4LFxuICAgICAgc29ydGVkRWxlbWVudHMsXG4gICAgICBvdXRwdXRDb250cmFjdHMsXG4gICAgICBtb2RlbEluZm8sXG4gICAgICBjcmVhdGVXb3JrbGlzdEluc3RhbmNlcyxcbiAgICApO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVXb3JrbGlzdEluc3RhbmNlc1xuIl19