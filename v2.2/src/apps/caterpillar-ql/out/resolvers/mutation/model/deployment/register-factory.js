"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _continueFactoryRegistration = _interopRequireDefault(require("./continue-factory-registration"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('caterpillarql:model:register-factory');

const registerFactory = (web3, registryContract, currentIndex, sortedElements, outputContracts, modelInfo) => {
  debug('------------------------------------------------------------------------');
  const factoryContract = new web3.eth.Contract(outputContracts[modelInfo.id][`${sortedElements[currentIndex].nodeName}_Factory`].abi);
  factoryContract.transactionConfirmationBlocks = 1;
  return web3.eth.personal.getAccounts().then(accounts => factoryContract.deploy({
    data: "0x" + outputContracts[modelInfo.id][`${sortedElements[currentIndex].nodeName}_Factory`].evm.bytecode.object
  }).send({
    from: accounts[0],
    gas: 4700000.
  }).then(contractF => (0, _continueFactoryRegistration.default)(web3, registryContract, currentIndex, sortedElements, outputContracts, contractF, modelInfo, registerFactory)));
};

var _default = registerFactory;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvbXV0YXRpb24vbW9kZWwvZGVwbG95bWVudC9yZWdpc3Rlci1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbImRlYnVnIiwicmVnaXN0ZXJGYWN0b3J5Iiwid2ViMyIsInJlZ2lzdHJ5Q29udHJhY3QiLCJjdXJyZW50SW5kZXgiLCJzb3J0ZWRFbGVtZW50cyIsIm91dHB1dENvbnRyYWN0cyIsIm1vZGVsSW5mbyIsImZhY3RvcnlDb250cmFjdCIsImV0aCIsIkNvbnRyYWN0IiwiaWQiLCJub2RlTmFtZSIsImFiaSIsInRyYW5zYWN0aW9uQ29uZmlybWF0aW9uQmxvY2tzIiwicGVyc29uYWwiLCJnZXRBY2NvdW50cyIsInRoZW4iLCJhY2NvdW50cyIsImRlcGxveSIsImRhdGEiLCJldm0iLCJieXRlY29kZSIsIm9iamVjdCIsInNlbmQiLCJmcm9tIiwiZ2FzIiwiY29udHJhY3RGIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUcscUJBQU8sc0NBQVAsQ0FBZDs7QUFFQSxNQUFNQyxlQUFlLEdBQUcsQ0FBQ0MsSUFBRCxFQUFPQyxnQkFBUCxFQUF5QkMsWUFBekIsRUFBdUNDLGNBQXZDLEVBQXVEQyxlQUF2RCxFQUF3RUMsU0FBeEUsS0FBc0Y7QUFDNUdQLEVBQUFBLEtBQUssQ0FBQywwRUFBRCxDQUFMO0FBQ0EsUUFBTVEsZUFBZSxHQUFHLElBQUlOLElBQUksQ0FBQ08sR0FBTCxDQUFTQyxRQUFiLENBQXNCSixlQUFlLENBQUNDLFNBQVMsQ0FBQ0ksRUFBWCxDQUFmLENBQStCLEdBQUVOLGNBQWMsQ0FBQ0QsWUFBRCxDQUFkLENBQTZCUSxRQUFTLFVBQXZFLEVBQWtGQyxHQUF4RyxDQUF4QjtBQUNBTCxFQUFBQSxlQUFlLENBQUNNLDZCQUFoQixHQUFnRCxDQUFoRDtBQUNBLFNBQU9aLElBQUksQ0FBQ08sR0FBTCxDQUFTTSxRQUFULENBQWtCQyxXQUFsQixHQUNKQyxJQURJLENBRUhDLFFBQVEsSUFDTlYsZUFBZSxDQUNaVyxNQURILENBRUk7QUFDRUMsSUFBQUEsSUFBSSxFQUFFLE9BQU9kLGVBQWUsQ0FBQ0MsU0FBUyxDQUFDSSxFQUFYLENBQWYsQ0FBK0IsR0FBRU4sY0FBYyxDQUFDRCxZQUFELENBQWQsQ0FBNkJRLFFBQVMsVUFBdkUsRUFBa0ZTLEdBQWxGLENBQXNGQyxRQUF0RixDQUErRkM7QUFEOUcsR0FGSixFQU1HQyxJQU5ILENBT0k7QUFDRUMsSUFBQUEsSUFBSSxFQUFFUCxRQUFRLENBQUMsQ0FBRCxDQURoQjtBQUVFUSxJQUFBQSxHQUFHLEVBQUU7QUFGUCxHQVBKLEVBWUdULElBWkgsQ0FhSVUsU0FBUyxJQUNQLDBDQUNFekIsSUFERixFQUVFQyxnQkFGRixFQUdFQyxZQUhGLEVBSUVDLGNBSkYsRUFLRUMsZUFMRixFQU1FcUIsU0FORixFQU9FcEIsU0FQRixFQVFFTixlQVJGLENBZE4sQ0FIQyxDQUFQO0FBNkJDLENBakNIOztlQW1DZUEsZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZGVidWcgZnJvbSAnZGVidWcnXG5cbmltcG9ydCBjb250aW51ZUZhY3RvcnlSZWdpc3RyYXRpb24gZnJvbSAnLi9jb250aW51ZS1mYWN0b3J5LXJlZ2lzdHJhdGlvbidcblxuY29uc3QgZGVidWcgPSBfZGVidWcoJ2NhdGVycGlsbGFycWw6bW9kZWw6cmVnaXN0ZXItZmFjdG9yeScpXG5cbmNvbnN0IHJlZ2lzdGVyRmFjdG9yeSA9ICh3ZWIzLCByZWdpc3RyeUNvbnRyYWN0LCBjdXJyZW50SW5kZXgsIHNvcnRlZEVsZW1lbnRzLCBvdXRwdXRDb250cmFjdHMsIG1vZGVsSW5mbykgPT4ge1xuICBkZWJ1ZygnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJylcbiAgY29uc3QgZmFjdG9yeUNvbnRyYWN0ID0gbmV3IHdlYjMuZXRoLkNvbnRyYWN0KG91dHB1dENvbnRyYWN0c1ttb2RlbEluZm8uaWRdW2Ake3NvcnRlZEVsZW1lbnRzW2N1cnJlbnRJbmRleF0ubm9kZU5hbWV9X0ZhY3RvcnlgXS5hYmkpO1xuICBmYWN0b3J5Q29udHJhY3QudHJhbnNhY3Rpb25Db25maXJtYXRpb25CbG9ja3MgPSAxO1xuICByZXR1cm4gd2ViMy5ldGgucGVyc29uYWwuZ2V0QWNjb3VudHMoKVxuICAgIC50aGVuKFxuICAgICAgYWNjb3VudHMgPT5cbiAgICAgICAgZmFjdG9yeUNvbnRyYWN0XG4gICAgICAgICAgLmRlcGxveShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZGF0YTogXCIweFwiICsgb3V0cHV0Q29udHJhY3RzW21vZGVsSW5mby5pZF1bYCR7c29ydGVkRWxlbWVudHNbY3VycmVudEluZGV4XS5ub2RlTmFtZX1fRmFjdG9yeWBdLmV2bS5ieXRlY29kZS5vYmplY3QsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIClcbiAgICAgICAgICAuc2VuZChcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZnJvbTogYWNjb3VudHNbMF0sXG4gICAgICAgICAgICAgIGdhczogNDcwMDAwMC5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgKVxuICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgY29udHJhY3RGID0+XG4gICAgICAgICAgICAgIGNvbnRpbnVlRmFjdG9yeVJlZ2lzdHJhdGlvbihcbiAgICAgICAgICAgICAgICB3ZWIzLFxuICAgICAgICAgICAgICAgIHJlZ2lzdHJ5Q29udHJhY3QsXG4gICAgICAgICAgICAgICAgY3VycmVudEluZGV4LFxuICAgICAgICAgICAgICAgIHNvcnRlZEVsZW1lbnRzLFxuICAgICAgICAgICAgICAgIG91dHB1dENvbnRyYWN0cyxcbiAgICAgICAgICAgICAgICBjb250cmFjdEYsXG4gICAgICAgICAgICAgICAgbW9kZWxJbmZvLFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyRmFjdG9yeSxcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgIClcbiAgICApXG4gIH07XG5cbmV4cG9ydCBkZWZhdWx0IHJlZ2lzdGVyRmFjdG9yeVxuIl19