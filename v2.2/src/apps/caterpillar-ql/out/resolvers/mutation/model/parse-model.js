"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _bpmnModdle = _interopRequireDefault(require("bpmn-moddle"));

var ejs = _interopRequireWildcard(require("ejs"));

var _bignumber = _interopRequireDefault(require("bignumber.js"));

var _definitions = require("./definitions");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* babel-plugin-inline-import '../../../templates/bpmn2sol.ejs' */
const bpmn2solEJS = "\nimport \"AbstractFactory\";\nimport \"AbstractProcess\";\nimport \"AbstractRegistry\";\n<% if(oracleTaskMap.size > 0) { -%>\ncontract Oracle_Wrapper {\n<% oracleTaskMap.forEach((oracleKey, nodeId, map) => { -%>\n    function <%= getOracleFunction(nodeId) %> (<%= typeParameters(nodeId, true, false) %>, function (uint<%= typeParameters(nodeId, false, true) %>) external returns(bool)) external returns(uint);\n<% }) -%>\n}\n<% } -%>\n\ncontract <%= nodeName(processId()) %>_Factory is AbstractFactory {\n    function newInstance(address parent, address processRegistry) public returns(address) {\n        <%= nodeName(processId()) %>_Contract newContract = new <%= nodeName(processId()) %>_Contract(parent, worklist, processRegistry);\n        return address(newContract);\n    }\n\n    function startInstanceExecution(address processAddress) public {\n        <%= nodeName(processId()) %>_Contract(processAddress).startExecution();\n    }\n}\n\n<% var contracts2Call = getContracts2Call();\n   var subprocessToKill = getPossibleKillSubprocess();\n   var eventsToCatch = getCatchingEvents(processId());\n   var eventTypes = allEventTypes(); -%>\n\ncontract <%= nodeName(processId()) %>_Contract is AbstractProcess {\n\n    uint public marking = uint(<%= subprocessStartMarking(processId()) %>);\n    uint public startedActivities = 0;\n<% if(contracts2Call.length > 0) { -%>\n    address[] private subInstanceAddresses;\n    mapping(uint => uint) private subInstanceStartedIndexes;\n<% } -%>\n\n<% /* --------- Solidity events to throw when an end message event is thrown  ---------------------------- */ -%>\n<% var messages = getThrowingMessages();\n   if(messages.length > 0) {\n    messages.forEach(nodeId => { -%>\n    // <%= nodeName(nodeId) %>\n    event <%= nodeId %>_Mesage(bytes32 messageText);\n<% })} -%>\n\n<% /* --------- Fields for interacting with external resources by means of callbacks (Oracle)  --------------- */ -%>\n<% if(oracleInfo.size > 0) { -%>\n    mapping(uint => address) oracleAddresses;\n<% } -%>\n    // Process Variables\n    <%= globalDeclarations() -%>\n\n    constructor(address _parent, address _worklist, address _processRegistry) public AbstractProcess(_parent, _worklist, _processRegistry) {\n<% oracleTaskMap.forEach((oracleKey, nodeId, map) => { -%>\n        oracleAddresses[<%= flowNodeIndex(nodeId) %>] = <%= oracleInfo.get(oracleKey).address %>;\n<% }) -%>\n<% if(getCountExternalTasks() > 0) { -%>\n        for (uint i = 0; i < <%= getCountExternalTasks() %>; i++)\n            requestedID.push(0);\n<% } -%>\n    }\n\n    function startExecution() public {\n        require(marking == uint(<%= subprocessStartMarking(processId()) %>) && startedActivities == 0);\n        step(uint(<%= subprocessStartMarking(processId()) %>), 0);\n    }\n\n<% /* --------------------------------- Event Handling ---------------------------------- */ -%>\n    function handleEvent(bytes32 code, bytes32 eventType, uint _instanceIndex, bool isInstanceCompleted) public {\n<% if(contracts2Call.length > 0 ) { -%>\n        (uint256 tmpMarking, uint256 tmpStartedActivities)  = (marking, startedActivities);\n        uint maskIndex = uint(1) << _instanceIndex;\n        uint sourceChild = 0;\n<%   var first = true;\n       contracts2Call.forEach(nodeId => {\n          var inFirst = true;\n          var node = nodeMap.get(nodeId); -%>\n<% if(first) { first = false; -%>        if <% } else { -%>        else if <% }-%>(subInstanceStartedIndexes[<%= nodeRealIndex(nodeId) %>] & uint(maskIndex) != 0) {\n            if(isInstanceCompleted)\n                subInstanceStartedIndexes[<%= nodeRealIndex(nodeId) %>] &= uint(~maskIndex);\n<% if(is(node, 'bpmn:BoundaryEvent')) { -%>\n<% var terminateCandidates = getTerminateCandidates(processId());\n     if(terminateCandidates.length > 0 ) {\n       terminateCandidates.forEach(bEvtId => {\n         var evtParentId = nodeMap.get(bEvtId).$parent.id;\n         if (inFirst && evtParentId === node.$parent.id) {\n            inFirst = false; -%>\n            if(eventType == \"Terminate\") {\n  <%     if(evtParentId === processId()) { -%>\n                killProcess();\n                propagateEvent('Default', 'Default', 0, 0, <%= flowNodeIndex(nodeId) %>);\n  <%     } else { -%>\n                (tmpMarking, tmpStartedActivities) = killProcess(uint(<%= flowNodeIndex(evtParentId) %>), tmpMarking, tmpStartedActivities);\n                step(tmpMarking | uint(<%= postMarking(evtParentId) %>), tmpStartedActivities);\n  <%     } -%>\n            }\n  <% } }) } -%>\n<% } -%>\n<% if(inFirst) { inFirst = false; -%>            if <% } else { -%>            else if <% }-%>(eventType == \"Default\") {\n<% if (node.loopCharacteristics && node.loopCharacteristics.$type === 'bpmn:MultiInstanceLoopCharacteristics') { -%>\n<%   if (node.loopCharacteristics.isSequential) { -%>\n                if(++_instanceIndex < subInstanceAddresses.length && subInstanceAddresses[_instanceIndex] == 0) {\n                    AbstractProcess child_<%= flowNodeIndex(nodeId) %> = AbstractProcess(AbstractRegistry(processRegistry).newInstanceFor(uint(<%= nodeRealIndex(nodeId) %>), address(this)));\n                    subInstanceStartedIndexes[<%= nodeRealIndex(nodeId) %>] |= (uint(1) << _instanceIndex);\n                    subInstanceAddresses[_instanceIndex] = child_<%= flowNodeIndex(nodeId) %>;\n                    child_<%= flowNodeIndex(nodeId) %>.setInstanceIndex(_instanceIndex);\n                }\n                else {\n                    step(tmpMarking | uint(<%= postMarking(nodeId) %>), tmpStartedActivities & uint(~<%= flowNodeIndex(nodeId) %>));\n                }\n<%  } else { -%>\n                if (subInstanceStartedIndexes[<%= nodeRealIndex(nodeId) %>] == 0)\n                    step(tmpMarking | uint(<%= postMarking(nodeId) %>), tmpStartedActivities & uint(~<%= flowNodeIndex(nodeId) %>));\n<% }} else if(!is(node, 'bpmn:BoundaryEvent') && !node.triggeredByEvent) { -%>\n                step(tmpMarking | uint(<%= postMarking(nodeId) %>), tmpStartedActivities & uint(~<%= flowNodeIndex(nodeId) %>));\n<% } else { -%>\n                tmpStartedActivities &= uint(~<%= flowNodeIndex(nodeId) %>);\n                (marking, startedActivities) = (tmpMarking, tmpStartedActivities);\n                if(tmpMarking | tmpStartedActivities == 0)\n                    propagateEvent(\"<%= nodeName(nodeId) %>\", \"Default\", tmpMarking, tmpStartedActivities, uint(<%= flowNodeIndex(nodeId) %>));\n<% } -%>\n            }\n<% if(eventsToCatch.length > 0) { -%>\n            else\n                sourceChild |= uint(<%= flowNodeIndex(nodeId) %>);\n<% } -%>\n        }\n<% }) -%>\n<% first = true;\n   eventsToCatch.forEach(evtId => {\n   var nodeEvt = nodeMap.get(evtId);\n   var evtType = eventType(evtId); -%>\n<% if (evtType === 'Error' || evtType === 'Escalation') {\n          var candidateSubprocMask = getProcessCandidatesMaskFrom(evtId, evtType, nodeName(evtId), contracts2Call, eventsToCatch); -%>\n<% if(first) { first = false; -%>        if <% } else { -%>        else if <% }-%>(eventType == \"<%= evtType %>\" && code == \"<%= nodeName(evtId) %>\" && sourceChild & uint(<%= candidateSubprocMask %>) != 0) {\n<%    if(isInterrupting(evtId)) {\n        if(nodeEvt.$parent.triggeredByEvent) {\n          var startingKill = nodeEvt.$parent.$parent.id === processId() ? 0 : flowNodeIndex(nodeEvt.$parent.$parent.id); -%>\n            (tmpMarking, tmpStartedActivities) = killProcess(uint(<%= startingKill %>), tmpMarking, tmpStartedActivities);\n            step(tmpMarking | uint(<%= subprocessStartMarking(nodeEvt.$parent.id) %>), tmpStartedActivities | uint(<%= flowNodeIndex(nodeEvt.$parent.id) %>));\n<%            } else { -%>\n            (tmpMarking, tmpStartedActivities) = killProcess(uint(<%= flowNodeIndex(nodeEvt.attachedToRef.id) %>), tmpMarking, tmpStartedActivities);\n            step(tmpMarking | uint(<%= postMarking(evtId) %>), tmpStartedActivities);\n<%            } -%>\n<%          } else {  -%>\n            createNewSubprocessInstance(<%= nodeRealIndex(evtId) %>);\n<% if (nodeEvt.attachedToRef) {\n      let nodeId = nodeEvt.attachedToRef.id;\n      let node = nodeMap.get(nodeId);\n      if (node.loopCharacteristics && node.loopCharacteristics.$type === 'bpmn:MultiInstanceLoopCharacteristics') {\n        if (node.loopCharacteristics.isSequential) { -%>\n            if(++_instanceIndex < subInstanceAddresses.length && subInstanceAddresses[_instanceIndex] == 0) {\n                AbstractProcess child_<%= flowNodeIndex(nodeId) %> = AbstractProcess(AbstractRegistry(processRegistry).newInstanceFor(uint(<%= nodeRealIndex(nodeId) %>), address(this)));\n                subInstanceStartedIndexes[<%= nodeRealIndex(nodeId) %>] |= (uint(1) << _instanceIndex);\n                subInstanceAddresses[_instanceIndex] = child_<%= flowNodeIndex(nodeId) %>;\n                child_<%= flowNodeIndex(nodeId) %>.setInstanceIndex(_instanceIndex);\n                step(tmpMarking, tmpStartedActivities | uint(<%= flowNodeIndex(evtId) %>));\n            }\n            else {\n                step(tmpMarking | uint(<%= postMarking(nodeId) %>), tmpStartedActivities & uint(~<%= flowNodeIndex(nodeId) %>) | uint(<%= flowNodeIndex(evtId) %>));\n            }\n<%      } else { -%>\n            if (subInstanceStartedIndexes[<%= nodeRealIndex(nodeId) %>] == 0)\n                step(tmpMarking | uint(<%= postMarking(nodeId) %>), tmpStartedActivities & uint(~<%= flowNodeIndex(nodeId) %>) | uint(<%= flowNodeIndex(evtId) %>));\n<% }} else if(!is(node, 'bpmn:BoundaryEvent') && !node.triggeredByEvent) { -%>\n            step(tmpMarking | uint(<%= postMarking(nodeId) %>), tmpStartedActivities & uint(~<%= flowNodeIndex(nodeId) %>) | uint(<%= flowNodeIndex(evtId) %>));\n<% } -%>\n<% } else { -%>\n            step(tmpMarking, tmpStartedActivities | uint(<%= flowNodeIndex(evtId) %>));\n<%   }      } -%>\n            }\n<%  } -%>\n<% }); -%>\n        else {\n            (tmpMarking, tmpStartedActivities) = propagateEvent(code, eventType, tmpMarking, tmpStartedActivities, sourceChild);\n            step(tmpMarking, tmpStartedActivities);\n        }\n<% } else { -%>\n        // Process without calls to external contracts.\n        // No events to catch !!!\n<% } -%>\n    }\n\n<% /* --------------------------------- Kill Childrens & Broadcast ------------------------------ */ -%>\n    function killProcess() public {\n        (marking, startedActivities) = killProcess(0, marking, startedActivities);\n    }\n\n    function killProcess(uint processElementIndex, uint tmpMarking, uint tmpStartedActivities) internal returns(uint, uint) {\n<% if(contracts2Call.length == 0) {         /* Case No External contract call in the contract */ -%>\n        if(processElementIndex == 0)\n            tmpMarking = tmpStartedActivities = 0;\n<% if(subprocessToKill.length > 0) { -%>\n<%     subprocessToKill.forEach(subprocId => { -%>\n        else if(processElementIndex & uint(<%= flowNodeIndex(subprocId) %>) != 0) {\n            tmpMarking &= uint(~<%=subprocessFullMarking(subprocId)%>);\n            tmpStartedActivities &= uint(~<%= subprocessNodeFullMarking(subprocId) %>);\n        }\n<%      }) }\n} else {                                    /* Case External Contract Calls in Main contract */ -%>\n        uint externalContracts2Stop = 0;\n        uint allAddresses2Stop = 0;\n        if(processElementIndex == 0) {\n            tmpMarking = tmpStartedActivities = 0;\n<% var getContracts2CallMask = getContracts2CallMaskFrom(processId(), contracts2Call);\n   if(getContracts2CallMask > 0) { -%>\n            externalContracts2Stop = uint(<%= getContracts2CallMask %>);\n<% } -%>\n        }\n<% subprocessToKill.forEach(subprocId => { -%>\n        else if(processElementIndex & uint(<%= flowNodeIndex(subprocId) %>) != 0) {\n<% if(callActivities.indexOf(subprocId) >= 0) { -%>\n            externalContracts2Stop = uint(<%= flowNodeIndex(subprocId) %>);\n<% } else { -%>\n            tmpMarking &= uint(~<%= subprocessFullMarking(subprocId) %>);\n            tmpStartedActivities &= uint(~<%= subprocessNodeFullMarking(subprocId) %>);\n<%  var contracts2CallMask = getContracts2CallMaskFrom(subprocId, contracts2Call);\n    if (contracts2CallMask !== 0) { -%>\n            externalContracts2Stop = uint(<%= contracts2CallMask %>);\n<% } -%>\n<% } -%>\n        }\n<%  }) -%>\n<% contracts2Call.forEach(subprocId => { -%>\n        if(externalContracts2Stop & uint(<%= flowNodeIndex(subprocId) %>) != 0) {\n            allAddresses2Stop |= subInstanceStartedIndexes[<%= nodeRealIndex(subprocId) %>];\n            subInstanceStartedIndexes[<%= nodeRealIndex(subprocId) %>] = 0;\n        }\n<% }) -%>\n        for(uint j = 0; j < subInstanceAddresses.length; j++)\n            if(allAddresses2Stop & (uint(1) << j) != 0)\n                AbstractProcess(subInstanceAddresses[j]).killProcess();\n<% } -%>\n        return (tmpMarking, tmpStartedActivities);\n    }\n\n    function broadcastSignal() public {\n        (uint256 tmpMarking, uint256 tmpStartedActivities) = broadcastSignal(marking, startedActivities, 0);\n        step(tmpMarking, tmpStartedActivities);\n    }\n\n    function broadcastSignal(uint tmpMarking, uint tmpStartedActivities, uint sourceChild) internal returns(uint, uint) {\n<% eventsToCatch.forEach(nodeId => {\n     if(eventType(nodeId) === 'Signal') {\n       var node = nodeMap.get(nodeId);\n        if(is(node, 'bpmn:IntermediateCatchEvent')) {\n          if (isPartOfDeferredChoice(nodeId)) { -%>\n        if(tmpMarking & uint(<%= deferredChoiceMarking(nodeId) %>) == uint(<%= deferredChoiceMarking(nodeId) %>))\n            tmpMarking = tmpMarking & uint(~<%= deferredChoiceMarking(nodeId) %>) | uint(<%= postMarking(nodeId) %>);\n<%            var deferredNodeMarking = deferredChoiceNodeMarking(nodeId);\n              if(deferredNodeMarking != 0) { -%>\n            tmpStartedActivities &= uint(~<%= deferredNodeMarking %>);\n<%    } -%>\n<%        } else {      -%>\n        if(tmpMarking & uint(<%= preMarking(nodeId) %>) == uint(<%= preMarking(nodeId) %>))\n            tmpMarking = tmpMarking & uint(~<%= preMarking(nodeId) %>) | uint(<%= postMarking(nodeId) %>);\n<%  }} else if(is(node, 'bpmn:StartEvent')) {\n           var parent = nodeMap.get(node.$parent.id);\n           if (parent.triggeredByEvent) {\n              if (isInterrupting(nodeId)) { -%>\n        if(tmpMarking & uint(~<%= subprocessFullMarking(parent.id) %>) != 0 || tmpStartedActivities & uint(~<%= subprocessNodeFullMarking(parent.id) %>) != 0) {\n            (tmpMarking, tmpStartedActivities) = killProcess(0, tmpMarking, tmpStartedActivities);\n            tmpStartedActivities |= uint(<%= flowNodeIndex(parent.id) %>);\n            tmpMarking |= uint(<%= subprocessStartMarking(parent.id) %>);\n        }\n<%            } else { -%>\n        if(tmpMarking & uint(<%= subprocessFullMarking(processId()) %>) != 0 || tmpStartedActivities & uint(~<%= flowNodeIndex(parent.id) %>) != 0) {\n            createNewSubprocessInstance(<%= nodeRealIndex(nodeId) %>);\n            tmpStartedActivities |= <%= flowNodeIndex(nodeId) %>;\n        }\n<%            } -%>\n<%         } else { -%>\n               /* Starting subprocess (not event subprocess) */\n<%         } -%>\n<%      } else if (is(node, 'bpmn:BoundaryEvent')) { -%>\n        if(tmpStartedActivities & uint(<%= flowNodeIndex(node.attachedToRef.id) %>) != 0) {\n<%          if(isInterrupting(nodeId)) { -%>\n            (tmpMarking, tmpStartedActivities) = killProcess(uint(<%= flowNodeIndex(node.attachedToRef.id) %>), tmpMarking, tmpStartedActivities);\n            tmpMarking |= uint(<%= postMarking(nodeId) %>);\n<%          } else { -%>\n            createNewSubprocessInstance(<%= nodeRealIndex(nodeId) %>);\n            tmpStartedActivities |= uint(<%= flowNodeIndex(nodeId) %>);\n<%          } -%>\n        }\n<% } -%>\n<% }}) -%>\n<% if (contracts2Call.length > 0) { -%>\n        uint contracts2Broadcast = 0;\n<%  contracts2Call.forEach(nodeId => { -%>\n        if (tmpStartedActivities & uint(<%= flowNodeIndex(nodeId) %>) != 0)\n            contracts2Broadcast |= subInstanceStartedIndexes[<%= nodeRealIndex(nodeId) %>];\n<%  }) -%>\n        contracts2Broadcast &= uint(~sourceChild);\n        if(contracts2Broadcast != 0)\n            for(uint j = 0; j < subInstanceAddresses.length; j++)\n                if(contracts2Broadcast & (uint(1) << j) != 0)\n                    AbstractProcess(subInstanceAddresses[j]).broadcastSignal();\n<%  }   -%>\n        return (tmpMarking, tmpStartedActivities);\n    }\n\n<% /* --------------------------------- Functions from BPMN elements -------------------------- */ -%>\n<%  nodeList.forEach( nodeId => {\n        let node = nodeMap.get(nodeId),\n            nodePreMarking = preMarking(nodeId),\n            nodePostMarking = postMarking(nodeId);\n    if (is(node, 'bpmn:ServiceTask')) { -%>\n    // <%= nodeName(node.id) %>\n    function <%= nodeName(node.id) %>_callbak (uint reqId<%= concatParameters(name2Ids.get(nodeName[0]), false, true, true) %>) external returns(bool) {\n        require(msg.sender == oracleAddresses[<%= flowNodeIndex(node.id) %>]);\n        uint index = uint(1) << reqId;\n        if(requestedID[<%= nodeRealIndex(node.id) %>] & index == index) {\n            <%= nodeFunctionBody(nodeId) %>\n            requestedID[<%= nodeRealIndex(node.id) %>] &= ~uint(index);\n            step(marking | uint(<%= nodePostMarking %>), startedActivities);\n            return true;\n        }\n        return false ;\n    }\n<% }}); -%>\n\n<%  boundaryMessages = getMessages();\n    groupedIds = getWorkItemsGroupByParameters(false);\n    groupedIds.forEach(idGroup => { -%>\n    function <%= nodeName(idGroup[0]) %>_complete(uint elementIndex<%= concatParameters(idGroup[0], false, true, true) %>) external {\n        (uint256 tmpMarking, uint256 tmpStartedActivities) = (marking, startedActivities);\n<%    idGroup.forEach(nodeId => {\n        var node = nodeMap.get(nodeId); -%>\n        if(elementIndex == uint(<%= nodeRealIndex(nodeId) %>)) {\n            require(msg.sender == worklist && tmpStartedActivities & uint(<%= flowNodeIndex(nodeId) %>) != 0);\n<% if(boundaryMessages.indexOf(nodeId) < 0) {\n     var functionBody = nodeFunctionBody(nodeId);\n     if(functionBody.length > 0) { -%>\n           <%- functionBody %>\n<%   } -%>\n<% if (isPartOfDeferredChoice(nodeId)) {\n          var deferredNodeMarking = deferredChoiceNodeMarking(nodeId);\n          if(deferredNodeMarking != 0) { -%>\n            step(tmpMarking & uint(~<%= deferredChoiceMarking(nodeId) %>) | uint(<%= postMarking(nodeId) %>), tmpStartedActivities & uint(~<%= deferredNodeMarking %>));\n<%        } else { -%>\n            step(tmpMarking & uint(~<%= deferredChoiceMarking(nodeId) %>) | uint(<%= postMarking(nodeId) %>), tmpStartedActivities);\n<%        } -%>\n<% } else { -%>\n            step(tmpMarking | uint(<%= postMarking(nodeId) %>), tmpStartedActivities & uint(~<%= flowNodeIndex(nodeId) %>));\n<% }} else {\n  var parent = nodeMap.get(node.$parent.id);\n  if(parent.triggeredByEvent) { -%>\n<% if (isInterrupting(nodeId)) { -%>\n            killProcess();\n            step(uint(<%= subprocessStartMarking(parent.id) %>), uint(<%= flowNodeIndex(parent.id) %>));\n<% } else { -%>\n            createNewSubprocessInstance(<%= nodeRealIndex(nodeId) %>);\n            step(tmpMarking, tmpStartedActivities | <%= flowNodeIndex(parent.id) %>);\n<%   } -%>\n<% } else {\n    var attachedTo = node.attachedToRef.id;\n    if (isInterrupting(nodeId)) { -%>\n            (tmpMarking, tmpStartedActivities) = killProcess(uint(<%= flowNodeIndex(attachedTo) %>), tmpMarking, tmpStartedActivities);\n            step(tmpMarking | uint(<%= postMarking(nodeId) %>), tmpStartedActivities);\n<%  } else { -%>\n            createNewSubprocessInstance(<%= nodeRealIndex(nodeId) %>);\n            step(tmpMarking, tmpStartedActivities | <%= flowNodeIndex(nodeId) %>);\n<%     }}} -%>\n            return;\n        }\n<% }) -%>\n    }\n<%   }) -%>\n\n<% if(contracts2Call.length > 0) { -%>\n    function createNewSubprocessInstance(uint nodeIndex) private {\n        AbstractProcess child = AbstractProcess(AbstractRegistry(processRegistry).newInstanceFor(nodeIndex, address(this)));\n        uint index = subInstanceAddresses.length;\n        subInstanceAddresses.push(address(child));\n        subInstanceStartedIndexes[nodeIndex] |= (uint(1) << index);\n        child.setInstanceIndex(index);\n    }\n<% } -%>\n\n<% /* ----------------- Step: Method to execute internal activities automatically ------------------ */ -%>\n    function step(uint tmpMarking, uint tmpStartedActivities) internal {\n        while (true) {\n<% nodeList.forEach(nodeId => {\n    var node = nodeMap.get(nodeId);\n    var nodePostMarking = postMarking(nodeId);\n    if(catchingMessages.indexOf(nodeId) < 0) {\n        var nodePreMarking = preMarking(nodeId);\n     if (node.loopCharacteristics && node.loopCharacteristics.$type === 'bpmn:MultiInstanceLoopCharacteristics') { -%>\n            if (tmpMarking & uint(<%= nodePreMarking %>) != 0) {\n<%        if(!is (node, \"bpmn:Task\")) { -%>\n                for(uint i = 0; i < <%= node.loopCharacteristics.loopCardinality ? node.loopCharacteristics.loopCardinality.body : 1 %>; i++) {\n<% if (node.loopCharacteristics.isSequential) { -%>\n                    subInstanceAddresses.push(0);\n<% } else { -%>\n                    createNewSubprocessInstance(<%= nodeRealIndex(nodeId) %>);\n<% } -%>\n                }\n<% if (node.loopCharacteristics.isSequential) { -%>\n                AbstractProcess child_<%= flowNodeIndex(nodeId) %> = AbstractProcess(AbstractRegistry(processRegistry).newInstanceFor(uint(<%= nodeRealIndex(nodeId) %>), address(this)));\n                uint index = subInstanceAddresses.length - <%= node.loopCharacteristics.loopCardinality ? node.loopCharacteristics.loopCardinality.body : 1 %>;\n                subInstanceStartedIndexes[<%= nodeRealIndex(nodeId) %>] |= (uint(1) << index);\n                subInstanceAddresses[index] = child_<%= flowNodeIndex(nodeId) %>;\n                child_<%= flowNodeIndex(nodeId) %>.setInstanceIndex(index);\n<% } -%>\n                tmpMarking &= uint(~<%= nodePreMarking %>);\n                tmpStartedActivities |= <%= flowNodeIndex(nodeId) %>;\n<%      } -%>\n                continue;\n            }\n<% } else if (is(node, 'bpmn:ExclusiveGateway')) { -%>\n            if (tmpMarking & uint(<%= nodePreMarking %>) != 0) {\n                tmpMarking &= uint(~<%= nodePreMarking %>);\n<%          if (node.outgoing && node.outgoing.length > 1) {\n            var i = 0; node.outgoing.forEach( outgoing => { -%>\n<%= i > 0 ? 'else ' : '' %><%if (i < node.outgoing.length - 1){ %>if (<%- getCondition(outgoing) %>)<% } -%>\n                tmpMarking |= uint(<%= flowEdgeIndex(outgoing.id) %>);\n<% i++;}) -%>\n<%          } else { -%>\n                tmpMarking |= uint(<%= postMarking(nodeId) %>);\n<%          } -%>\n                continue;\n            }\n<% } else if(is(node, 'bpmn:ParallelGateway') || is(node,'bpmn:EventBasedGateway')) { -%>\n            if (tmpMarking & uint(<%= nodePreMarking %>) == uint(<%= nodePreMarking %>)) {\n                tmpMarking = tmpMarking & uint(~<%= nodePreMarking %>) | uint(<%= nodePostMarking %>);\n                continue;\n            }\n<% } else if(is(node, 'bpmn:SubProcess') && !node.triggeredByEvent && multiinstanceActivities.indexOf(nodeId) < 0) { -%>\n            if (tmpMarking & uint(<%= nodePreMarking %>) != 0) {\n                tmpStartedActivities |= uint(<%= flowNodeIndex(nodeId) %>);\n                tmpMarking = tmpMarking & uint(~<%= nodePreMarking %>) | uint(<%= subprocessStartMarking(nodeId) %>);\n                continue;\n            }\n<% } else if(is(node, 'bpmn:ReceiveTask')) {\n    if (isPartOfDeferredChoice(nodeId)) { -%>\n            if (tmpStartedActivities & uint(<%= flowNodeIndex(nodeId) %>) == 0 && tmpMarking & uint(<%= deferredChoiceMarking(nodeId) %>) == uint(<%= deferredChoiceMarking(nodeId) %>)) {\n                <%= nodeName(processId()) %>_AbstractWorklist(worklist).<%= nodeName(nodeId) %>_start(<%= nodeRealIndex(nodeId) %><%= concatParameters(nodeId, true, false, true) %>);\n                tmpStartedActivities |= uint(<%= flowNodeIndex(nodeId) %>);\n                continue;\n            }\n<%  } else { -%>\n            if (tmpMarking & uint(<%= nodePreMarking %>) != 0) {\n                <%= nodeName(processId()) %>_AbstractWorklist(worklist).<%= nodeName(nodeId) %>_start(<%= nodeRealIndex(nodeId) %><%= concatParameters(nodeId, true, false, true) %>);\n                tmpMarking &= uint(~<%= nodePreMarking %>);\n                tmpStartedActivities |= uint(<%= flowNodeIndex(node.id) %>);\n                continue;\n            }\n<% }} else if((is(node, 'bpmn:Task'))) { -%>\n            if (tmpMarking & uint(<%= nodePreMarking %>) != 0) {\n<%    if (is(node, 'bpmn:UserTask'))  { -%>\n                <%= nodeName(processId()) %>_AbstractWorklist(worklist).<%= nodeName(nodeId) %>_start(<%= nodeRealIndex(nodeId) %><%= concatParameters(nodeId, true, false, true) %>);\n                tmpMarking &= uint(~<%= nodePreMarking %>);\n                tmpStartedActivities |= uint(<%= flowNodeIndex(node.id) %>);\n<%  } else if(is(node, 'bpmn:ServiceTask')) {\n          var functName = oracleTaskMap.get(nodeId);\n          var localInfo = oracleInfo.get(functName); -%>\n                uint reqId = Oracle_Wrapper(oracleAddresses[<%= flowNodeIndex(nodeId) %>]).<%= localInfo.functionName %>(<%= concatParameters(node.id, true, false, false) %>, this.<%= nodeName(nodeId) %>_callbak);\n                requestedID[<%= nodeRealIndex(node.id) %>] |= uint(1) << reqId;\n                tmpMarking &= uint(~<%= nodePreMarking %>);\n                tmpStartedActivities |= uint(<%= flowNodeIndex(node.id) %>);\n<%  } else if (is(node, 'bpmn:ScriptTask')) {\n         if (node.script) { -%>\n                <%- nodeFunctionBody(nodeId) -%>\n<%       } -%>\n                tmpMarking = tmpMarking & uint(~<%= nodePreMarking %>) | uint(<%= nodePostMarking %>);\n<%  } else { -%>\n                tmpMarking = tmpMarking & uint(~<%= nodePreMarking %>) | uint(<%= nodePostMarking %>);\n<%  } -%>\n                continue;\n            }\n<% } else if(is(node, 'bpmn:EndEvent')) {\n          var evtType = eventType(nodeId); -%>\n            if (tmpMarking & uint(<%= nodePreMarking %>) != 0) {\n<% if(evtType === 'Default' || evtType === 'Message') { -%>\n<% if(evtType === 'Message') { -%>\n                <%= nodeId %>_Mesage('<%= nodeName(nodeId) %>');\n<% } -%>\n                tmpMarking &= uint(~<%= nodePreMarking %>);\n                if (tmpMarking & uint(<%= subprocessFullMarking(node.$parent.id) %>) == 0 && tmpStartedActivities & uint(<%= subprocessNodeMarking(node.$parent.id) %>) == 0) {\n<% if(node.$parent.id === processId() || nodeMap.get(node.$parent.id).triggeredByEvent || (is(nodeMap.get(processId()), 'bpmn:BoundaryEvent') && node.$parent.id === nodeMap.get(processId()).$parent.id)) { -%>\n<% if(nodeMap.get(node.$parent.id).triggeredByEvent) { -%>\n                    tmpStartedActivities &= uint(~<%= flowNodeIndex(node.$parent.id) %>);\n<% } -%>\n                    (tmpMarking, tmpStartedActivities) = propagateEvent(\"<%= nodeName(nodeId) %>\", \"Default\", tmpMarking, tmpStartedActivities, uint(<%= flowNodeIndex(nodeId) %>));\n<% } else { -%>\n                    tmpStartedActivities &= uint(~<%= flowNodeIndex(node.$parent.id) %>);\n                    tmpMarking |= uint(<%= postMarking(node.$parent.id) %>);\n<% } -%>\n                }\n<% } else if (evtType === 'Terminate') { -%>\n<% if(is(nodeMap.get(processId()), 'bpmn:BoundaryEvent') && node.$parent.id === nodeMap.get(processId()).$parent.id) { -%>\n                (tmpMarking, tmpStartedActivities) = propagateEvent(\"<%= nodeName(nodeId) %>\", \"Terminate\", tmpMarking, tmpStartedActivities, uint(<%= flowNodeIndex(nodeId) %>));\n<% } else if(node.$parent.id === processId()) { -%>\n                (tmpMarking, tmpStartedActivities) = killProcess(0, tmpMarking, tmpStartedActivities);\n                (tmpMarking, tmpStartedActivities) = propagateEvent(\"<%= nodeName(nodeId) %>\", \"Default\", tmpMarking, tmpStartedActivities, uint(<%= flowNodeIndex(nodeId) %>));\n<% } else { -%>\n                (tmpMarking, tmpStartedActivities) = killProcess(uint(<%= flowNodeIndex(node.$parent.id) %>), tmpMarking, tmpStartedActivities);\n                tmpMarking |= uint(<%= postMarking(node.$parent.id) %>);\n                tmpStartedActivities &= uint(~<%= flowNodeIndex(node.$parent.id) %>);\n<% } -%>\n<% } else if (evtType === 'Signal') { -%>\n                tmpMarking &= uint(~<%= nodePreMarking %>);\n                (tmpMarking, tmpStartedActivities) = propagateEvent(\"<%= nodeName(nodeId) %>\", \"Signal\", tmpMarking, tmpStartedActivities, uint(<%= flowNodeIndex(nodeId) %>));\n<% } else if (evtType === 'Error' || evtType === 'Escalation') {\n        var localEvents2Catch = getCatchingEventsFrom(node.$parent.id, evtType, nodeName(nodeId));\n        if(localEvents2Catch.length == 0) { -%>\n                (tmpMarking, tmpStartedActivities) = propagateEvent(\"<%= nodeName(nodeId) %>\", \"<%= evtType %>\", tmpMarking & uint(~<%= nodePreMarking %>), tmpStartedActivities, uint(<%= flowNodeIndex(nodeId) %>));\n<%      } else {\n        localEvents2Catch.forEach(evtId => {\n            var nodeEvt = nodeMap.get(evtId);\n            if(isInterrupting(evtId)) {\n              if(nodeEvt.$parent.triggeredByEvent) {\n                 var startingKill = nodeEvt.$parent.$parent.id === processId() ? 0 : flowNodeIndex(nodeEvt.$parent.$parent.id); -%>\n                (tmpMarking, tmpStartedActivities) = killProcess(uint(<%= startingKill %>), tmpMarking & uint(~<%= nodePreMarking %>), tmpStartedActivities);\n                tmpMarking |= uint(<%= subprocessStartMarking(nodeEvt.$parent.id) %>);\n                tmpStartedActivities |= uint(<%= flowNodeIndex(nodeEvt.$parent.id) %>);\n<%            } else { -%>\n                (tmpMarking, tmpStartedActivities) = killProcess(uint(<%= flowNodeIndex(nodeEvt.attachedToRef.id) %>), tmpMarking & uint(~<%= nodePreMarking %>), tmpStartedActivities);\n                tmpMarking |= uint(<%= postMarking(evtId) %>);\n<%            } -%>\n<%          } else {  -%>\n                tmpMarking &= uint(~<%= nodePreMarking %>);\n                createNewSubprocessInstance(<%= nodeRealIndex(evtId) %>);\n                tmpStartedActivities |= uint(<%= flowNodeIndex(evtId) %>);\n<%          } }) -%>\n<%   } } -%>\n                continue;\n            }\n<% } else if(is(node, 'bpmn:IntermediateThrowEvent')) {\n       var evtType = eventType(nodeId); -%>\n            if (tmpMarking & uint(<%= nodePreMarking %>) != 0) {\n<% if(evtType === 'Default') { -%>\n                tmpMarking = tmpMarking & uint(~<%= nodePreMarking %>) | uint(<%= nodePostMarking %>);\n<% } else {\n    if (isPartOfDeferredChoice(nodeId)) { -%>\n                tmpMarking = tmpMarking & uint(~<%= deferredChoiceMarking(nodeId) %>) | uint(<%= nodePostMarking %>);\n<%    var deferredNodeMarking = deferredChoiceNodeMarking(nodeId);\n      if(deferredNodeMarking != 0) { -%>\n              tmpStartedActivities &= uint(~<%= deferredNodeMarking %>);\n<%    } -%>\n<%  } else { -%>\n                tmpMarking = tmpMarking & uint(~<%= nodePreMarking %>) | uint(<%= nodePostMarking %>);\n<%  }  if (evtType === 'Signal') { -%>\n                (tmpMarking, tmpStartedActivities) = propagateEvent(\"<%= nodeName(nodeId) %>\", \"Signal\", tmpMarking, tmpStartedActivities, uint(<%= flowNodeIndex(nodeId) %>));\n<%  } else if(evtType === 'Message') { -%>\n                <%= nodeId %>_Mesage('<%= nodeName(nodeId) %>');\n<%  } else if(evtType === 'Escalation') {\n          var localEvents2Catch = getCatchingEventsFrom(node.$parent.id, evtType, nodeName(nodeId));\n          if(localEvents2Catch.length == 0) { -%>\n                (tmpMarking, tmpStartedActivities) = propagateEvent(\"<%= nodeName(nodeId) %>\", \"<%= evtType %>\", tmpMarking & uint(~<%= nodePreMarking %>), tmpStartedActivities, uint(<%= flowNodeIndex(nodeId) %>));\n  <%      } else {\n          localEvents2Catch.forEach(evtId => {\n              var nodeEvt = nodeMap.get(evtId);\n              if(isInterrupting(evtId)) {\n                if(nodeEvt.$parent.triggeredByEvent) {\n                   var startingKill = nodeEvt.$parent.$parent.id === processId() ? 0 : flowNodeIndex(nodeEvt.$parent.$parent.id); -%>\n                (tmpMarking, tmpStartedActivities) = killProcess(uint(<%= startingKill %>), tmpMarking & uint(~<%= nodePreMarking %>), tmpStartedActivities);\n                tmpMarking |= uint(<%= subprocessStartMarking(nodeEvt.$parent.id) %>);\n                tmpStartedActivities |= uint(<%= flowNodeIndex(nodeEvt.$parent.id) %>);\n  <%            } else { -%>\n                (tmpMarking, tmpStartedActivities) = killProcess(uint(<%= flowNodeIndex(nodeEvt.attachedToRef.id) %>), tmpMarking & uint(~<%= nodePreMarking %>), tmpStartedActivities);\n                tmpMarking |= uint(<%= postMarking(evtId) %>);\n  <%            } -%>\n  <%          } else {  -%>\n                tmpMarking &= uint(~<%= nodePreMarking %>);\n                createNewSubprocessInstance(<%= nodeRealIndex(evtId) %>);\n  <% if(nodeEvt.$parent.triggeredByEvent) { -%>\n                tmpStartedActivities |= uint(<%= flowNodeIndex(nodeEvt.$parent.id) %>);\n  <% } else { -%>\n                tmpStartedActivities |= uint(<%= flowNodeIndex(evtId) %>);\n  <% }         } }) -%>\n  <%   } -%>\n<% }} -%>\n                continue;\n            }\n<% } else if (callActivities.indexOf(nodeId) >= 0) { -%>\n            if (tmpMarking & uint(<%= nodePreMarking %>) != 0) {\n                createNewSubprocessInstance(<%= nodeRealIndex(nodeId) %>);\n                tmpMarking &= uint(~<%= nodePreMarking %>);\n                tmpStartedActivities |= uint(<%= flowNodeIndex(nodeId) %>);\n                continue;\n            }\n<% }} else {\n  if(isBoundaryEvent(nodeId)) {\n    var attachedTo = node.attachedToRef.id; -%>\n            if (tmpStartedActivities & uint(<%= flowNodeIndex(attachedTo) %>) != 0 && tmpStartedActivities & uint(<%= flowNodeIndex(nodeId) %>) == 0) {\n                <%= nodeName(processId()) %>_AbstractWorklist(worklist).<%= nodeName(nodeId) %>_start(<%= nodeRealIndex(nodeId) %><%= concatParameters(nodeId, true, false, true) %>);\n                tmpStartedActivities |= uint(<%= flowNodeIndex(nodeId) %>);\n                continue;\n            }\n            if (tmpStartedActivities & uint(<%= flowNodeIndex(attachedTo) %>) == 0 && tmpStartedActivities & uint(<%= flowNodeIndex(nodeId) %>) != 0) {\n                tmpStartedActivities &= uint(~<%= flowNodeIndex(nodeId) %>);\n                continue;\n            }\n  <% } -%>\n<% }}); -%>\n            break;\n        }\n        if(marking != 0 || startedActivities != 0) {\n            marking = tmpMarking;\n            startedActivities = tmpStartedActivities;\n        }\n    }\n\n    function getWorklistAddress() external view returns(address) {\n        return worklist;\n    }\n\n    function getInstanceIndex() external view returns(uint) {\n        return instanceIndex;\n    }\n\n<% /* ------------- Methods to obtain information about multiple contract instances running ------------------ */ -%>\n<% if (callActivities.length > 0 || multiinstanceActivities.length > 0 || nonInterruptingEvents.length > 0) { -%>\n    function allInstanceAddresses() external view returns(address [] memory) {\n        return subInstanceAddresses;\n    }\n\n    function startedInstanceIndexFor(uint instanceNode) external view returns(uint) {\n        return subInstanceStartedIndexes[instanceNode];\n    }\n\n<% } -%>\n}\n";

/* babel-plugin-inline-import '../../../templates/worklist2sol.ejs' */
const worklist2solEJS = "pragma solidity ^0.5.0;\n\nimport \"AbstractWorklist\";\n\ncontract <%= nodeName(processId()) %>_AbstractWorklist {\n\n  <%  groupedIds = getWorkItemsGroupByParameters(true);\n      groupedIds.forEach(idGroup => {\n          var nodeId = idGroup[0]; -%>\n    function <%= nodeName(nodeId) %>_start(uint<%= getParameterType(nodeId, true, true, true) %>) external;\n  <% }) -%>\n\n  <%  groupedIds = getWorkItemsGroupByParameters(false);\n      groupedIds.forEach(idGroup => {\n          var nodeId = idGroup[0]; -%>\n    function <%= nodeName(nodeId) %>_complete(uint<%= getParameterType(nodeId, false, true, true) %>) external;\n  <% }) -%>\n\n}\n\ncontract <%= nodeName(processId()) %>_worklist is AbstractWorklist {\n\n    // Events with the information to include in the Log when a workitem is registered\n<%  groupedIds = getWorkItemsGroupByParameters(true);\n    groupedIds.forEach(idGroup => { -%>\n    event <%= nodeName(idGroup[0]) %>_Requested(uint<%= getParameterType(idGroup[0], true, true, true) %>);\n<% }) -%>\n\n<%  groupedIds = getWorkItemsGroupByParameters(true);\n    groupedIds.forEach(idGroup => {\n        var nodeId = idGroup[0]; -%>\n    function <%= nodeName(nodeId) %>_start(uint elementIndex<%= getParameters(nodeId, true, true, true) %>) external {\n        workitems.push(Workitem(elementIndex, msg.sender));\n        emit <%= nodeName(nodeId) %>_Requested(workitems.length - 1<%= getParameters(nodeId, true, false, true) %>);\n    }\n<% }) -%>\n\n<%  groupedIds = getWorkItemsGroupByParameters(false);\n    groupedIds.forEach(idGroup => {\n        var nodeId = idGroup[0]; -%>\n    function <%= nodeName(nodeId) %>(uint workitemId<%= getParameters(nodeId, false, true, true) %>) external {\n\n        require(workitemId < workitems.length && workitems[workitemId].processInstanceAddr != address(0) && \n        canPerform(msg.sender, workitems[workitemId].processInstanceAddr, workitems[workitemId].elementIndex));\n        \n        <%= nodeName(processId()) %>_AbstractWorklist(workitems[workitemId].processInstanceAddr).<%= nodeName(nodeId) %>_complete(workitems[workitemId].elementIndex<%= getParameters(nodeId, false, false, true) %>);\n        workitems[workitemId].processInstanceAddr = address(0);\n    }\n<% }) -%>\n\n}\n";
const debug = (0, _debug2.default)('caterpillarql:parse-model');
const bpmn2solTemplate = ejs.compile(bpmn2solEJS);
const worklist2solTemplate = ejs.compile(worklist2solEJS);
let moddle = new _bpmnModdle.default();

let parseBpmn = bpmnDoc => {
  return new Promise((resolve, reject) => {
    moddle.fromXML(bpmnDoc, (err, definitions) => {
      if (!err) resolve(definitions);else reject(err);
    });
  });
};

let is = (element, type) => element.$instanceOf(type);

let collectControlFlowInfo;

collectControlFlowInfo = (proc, globalNodeMap, globalControlFlowInfo) => {
  let nodeList = [];
  let edgeList = [];
  let boundaryEvents = [];
  let nonBlockingBoundaryEvents = [];
  let controlFlowInfo;

  for (let node of proc.flowElements.filter(e => is(e, "bpmn:FlowNode"))) {
    if (is(node, "bpmn:BoundaryEvent")) {
      boundaryEvents.push(node.id);
      if (node.cancelActivity == false) nonBlockingBoundaryEvents.push(node.id);
    } else {
      nodeList.push(node.id);
    }

    globalNodeMap.set(node.id, node);
  }

  let sources = [...nodeList];

  for (let flowEdge of proc.flowElements.filter(e => is(e, "bpmn:SequenceFlow"))) {
    if (sources.indexOf(flowEdge.targetRef.id) > -1) {
      sources.splice(sources.indexOf(flowEdge.targetRef.id), 1);
    }

    edgeList.push(flowEdge.id);
  } // Let us remove all source elements from the node list


  nodeList = nodeList.filter(node => sources.indexOf(node) < 0);

  if (nonBlockingBoundaryEvents.length > 0) {
    let dfs = sources => {
      let open = [...sources];
      let nodeList = [];
      let edgeList = [];

      while (open.length > 0) {
        let currId = open.pop();
        let curr = globalNodeMap.get(currId);
        nodeList.push(currId);
        if (curr.outgoing && curr.outgoing.length > 0) for (let succEdge of curr.outgoing) {
          let succ = succEdge.targetRef;
          edgeList.push(succEdge.id);
          if (open.indexOf(succ.id) < 0 && nodeList.indexOf(succ.id) < 0) open.push(succ.id);
        }
      }

      return [nodeList, edgeList];
    };

    let [mainPathNodeList, mainPathEdgeList] = dfs(sources);
    let localBoundary = [];
    boundaryEvents.forEach(evtId => {
      if (nonBlockingBoundaryEvents.indexOf(evtId) < 0) localBoundary.push(evtId);
    });

    if (localBoundary.length > 0) {
      let [boundaryNodePath, boundaryEdgePath] = dfs(localBoundary);
      boundaryNodePath = boundaryNodePath.filter(node => localBoundary.indexOf(node) < 0);
      mainPathNodeList = mainPathNodeList.concat(boundaryNodePath);
      mainPathEdgeList = mainPathEdgeList.concat(boundaryEdgePath);
    } // Let us remove all source elements from the node list


    mainPathNodeList = mainPathNodeList.filter(node => sources.indexOf(node) < 0);
    controlFlowInfo = new _definitions.ControlFlowInfo(proc, mainPathNodeList, mainPathEdgeList, sources, boundaryEvents);
    globalControlFlowInfo.push(controlFlowInfo);

    for (let eventId of nonBlockingBoundaryEvents) {
      let event = globalNodeMap.get(eventId);

      if (!mainPathNodeList.find(e => event.attachedToRef.id === e)) {
        throw new Error("ERROR: Found non-interrupting event which is not attached to a subprocess in the main process path");
      }

      let [localNodeList, localEdgeList] = dfs([eventId]);
      if (mainPathNodeList.filter(nodeId => localNodeList.indexOf(nodeId) >= 0).length > 0) throw new Error("ERROR: Non-interrupting event outgoing path is not synchronized and merges with main process path"); // Let us remove all source elements from the node list

      localNodeList = localNodeList.filter(node => sources.indexOf(node) < 0);
      let childControlFlowInfo = new _definitions.ControlFlowInfo(event, localNodeList, localEdgeList, [eventId], []);
      childControlFlowInfo.parent = proc;
      globalControlFlowInfo.push(childControlFlowInfo);
    }
  } else {
    controlFlowInfo = new _definitions.ControlFlowInfo(proc, nodeList, edgeList, sources, boundaryEvents);
    globalControlFlowInfo.push(controlFlowInfo);
  }

  for (let subprocess of proc.flowElements.filter(e => is(e, "bpmn:SubProcess"))) {
    let subprocessControlFlowInfo = collectControlFlowInfo(subprocess, globalNodeMap, globalControlFlowInfo);
    subprocessControlFlowInfo.parent = proc;

    if (!(subprocess.loopCharacteristics && subprocess.loopCharacteristics.$type === "bpmn:MultiInstanceLoopCharacteristics")) {
      // Subprocess is embedded ... then copy all nodes and edges to the parent process
      subprocessControlFlowInfo.isEmbedded = true;
      controlFlowInfo.nodeList = controlFlowInfo.nodeList.concat(subprocessControlFlowInfo.nodeList);
      controlFlowInfo.edgeList = controlFlowInfo.edgeList.concat(subprocessControlFlowInfo.edgeList);
      controlFlowInfo.boundaryEvents = controlFlowInfo.boundaryEvents.concat(subprocessControlFlowInfo.boundaryEvents);
    }
  }

  if (proc.documentation) {
    controlFlowInfo.globalParameters = proc.documentation[0].text;
  }

  return controlFlowInfo;
};

let restrictRelation = new Map();

let extractParameters = (cad, nodeId, controlFlowInfo) => {
  // Extracting Roles from UserTasks functionBody
  let arr = cad.split('@');

  if (arr.length >= 3) {
    if (controlFlowInfo != null) controlFlowInfo.taskRoleMap.set(nodeId, arr[1].trim());
    if (arr[2].length > 1) cad = arr[2];else return undefined;
  } // Extracting Information of Oracle from Service Tasks (if aplicable)


  let oracle_Data = "";

  for (let j = 0, first = false; j < cad.length; j++) {
    if (cad.charAt(j) === "(") {
      if (!first) first = true;else {
        cad = cad.substr(j);
        break;
      }
    }

    if (cad.charAt(j) === ":") {
      oracle_Data = "";
      break;
    }

    oracle_Data += cad.charAt(j);
  } // Processing Information of function parameters (both service and user tasks)


  cad = cad.replace("(", " ").replace(")", " ").trim();
  cad = cad.replace("(", " ").replace(")", " ").trim();
  let firstSplit = cad.split(":");

  if (firstSplit.length > 2) {
    let aux = '';

    for (let i = 1; i < firstSplit.length; i++) aux += firstSplit[i];

    firstSplit = [firstSplit[0], aux];
  }

  let secondSplit = firstSplit[firstSplit.length - 1].trim().split("->");
  let resMap = new Map();
  let inputOutput = [firstSplit[0].trim(), secondSplit[0].trim()];
  let parameterType = ["input", "output"];
  resMap.set("body", [secondSplit[secondSplit.length - 1].trim()]);

  for (let i = 0; i < inputOutput.length; i++) {
    let temp = inputOutput[i].split(",");
    let res = [];
    temp.forEach(subCad => {
      let aux = subCad.trim().split(" ");

      if (aux[0].trim().length > 0) {
        res.push(aux[0].trim());
        res.push(aux[aux.length - 1].trim());
      }
    });
    resMap.set(parameterType[i], res);
  } // Updating Information of Oracle in controlFlowInfo


  if (controlFlowInfo != null) {
    let inParameters = [];
    let outParameters = [];
    let toIterate = resMap.get('input');

    for (let i = 0; i < toIterate.length; i += 2) inParameters.push(new _definitions.ParameterInfo(toIterate[i], toIterate[i + 1]));

    toIterate = resMap.get('output');
    let parameters = new Map();
    parameters.set('input', inParameters);
    parameters.set('output', outParameters);

    for (let i = 0; i < toIterate.length; i += 2) outParameters.push(new _definitions.ParameterInfo(toIterate[i], toIterate[i + 1]));

    if (oracle_Data.length > 0) {
      oracle_Data = oracle_Data.trim().replace(" ", "_");
      oracle_Data = oracle_Data.replace("(", " ").replace(").", " ").trim();
      let splitResult = oracle_Data.split(" ");

      if (!controlFlowInfo.oracleInfo.has(splitResult[0])) {
        controlFlowInfo.oracleInfo.set(splitResult[0], new _definitions.OracleInfo(splitResult[0]));
      }

      controlFlowInfo.oracleTaskMap.set(nodeId, splitResult[0]);
      let localOracle = controlFlowInfo.oracleInfo.get(splitResult[0]);
      localOracle.address = splitResult[1];
      localOracle.functionName = splitResult[2];
      localOracle.functionParameters = parameters.get('input');
    } else controlFlowInfo.localParameters.set(nodeId, parameters);
  }

  return resMap;
};

let getNodeName = node => node.name ? node.name.replace(/\s+/g, "_") : node.id;

let parseModel = modelInfo => {
  return new Promise((resolve, reject) => {
    parseBpmn(modelInfo.bpmn).then(definitions => {
      debug('parsed model', definitions);
      modelInfo.solidity = "pragma solidity ^0.5.0;\n";
      modelInfo.controlFlowInfoMap = new Map(); // Sanity checks

      if (!definitions.diagrams || definitions.diagrams.length == 0) throw new Error("ERROR: No diagram found in BPMN file");
      let proc = definitions.diagrams[0].plane.bpmnElement;
      modelInfo.name = proc.name ? proc.name.replace(/\s+/g, "_") : proc.id;
      modelInfo.id = proc.id;

      if (proc.$type !== "bpmn:Process") {
        if (proc.$type === "bpmn:Collaboration") {
          for (let i = 0; i < definitions.rootElements.length; i++) if (definitions.rootElements[i].$type === "bpmn:Process") {
            proc = definitions.rootElements[i];
            modelInfo.name = proc.name ? proc.name.replace(/\s+/g, "_") : proc.id;
            modelInfo.id = proc.id;
            break;
          }
        } else {
          throw new Error("ERROR: No root process model found");
        }
      } // BPMN to Solidity parsing


      let globalNodeMap = new Map(),
          globalNodeIndexMap = new Map(),
          globalEdgeIndexMap = new Map(),
          globalControlFlowInfo = []; ////////////////////////////////////////////////////////////

      globalNodeMap.set(proc.id, proc);
      let mainControlFlowInfo = collectControlFlowInfo(proc, globalNodeMap, globalControlFlowInfo);
      let globalControlFlowInfoMap = new Map();
      globalControlFlowInfo.forEach(controlFlowInfo => globalControlFlowInfoMap.set(controlFlowInfo.self.id, controlFlowInfo)); // Event sub-processes appear in the source list, and not in the nodeList
      // In addition, all the elements of a non interrupting subprocess event appears embedded on its parent process

      for (let controlFlowInfo of globalControlFlowInfo) {
        let indexesToRemove = [];
        controlFlowInfo.sources.forEach(nodeId => {
          if (globalNodeMap.get(nodeId).triggeredByEvent) {
            controlFlowInfo.nodeList.push(nodeId);
            indexesToRemove.push(controlFlowInfo.sources.indexOf(nodeId));
            let nodeInfo = globalControlFlowInfoMap.get(nodeId);
            if (!globalNodeMap.get(nodeInfo.sources[0]).isInterrupting) nodeInfo.nodeList.forEach(childId => {
              let index = controlFlowInfo.nodeList.indexOf(childId);
              if (index >= 0) controlFlowInfo.nodeList.splice(index, 1);
            });
          }
        });
        indexesToRemove.sort((ind1, ind2) => {
          return ind2 - ind1;
        });
        indexesToRemove.forEach(index => {
          controlFlowInfo.sources.splice(index, 1);
        });

        if (is(globalNodeMap.get(controlFlowInfo.self.id), "bpmn:SubProcess") && controlFlowInfo.self.triggeredByEvent && globalNodeMap.get(controlFlowInfo.sources[0]).isInterrupting == false) {
          controlFlowInfo.isEmbedded = false;
        }
      }

      let hasExternalCall = nodeId => {
        let node = globalNodeMap.get(nodeId);
        return is(node, "bpmn:ServiceTask");
      };

      modelInfo.globalNodeMap = globalNodeMap;

      for (let controlFlowInfo of globalControlFlowInfo) {
        if (!controlFlowInfo.isEmbedded) {
          let multiinstanceActivities = [],
              callActivities = [],
              nonInterruptingEvents = [],
              catchingMessages = [];
          controlFlowInfo.nodeList.map(nodeId => globalNodeMap.get(nodeId)).forEach(e => {
            if ((is(e, "bpmn:Task") || is(e, "bpmn:SubProcess")) && e.loopCharacteristics && e.loopCharacteristics.$type === "bpmn:MultiInstanceLoopCharacteristics") {
              controlFlowInfo.multiinstanceActivities.set(e.id, getNodeName(e));
              multiinstanceActivities.push(e.id);
            } else if (is(e, "bpmn:CallActivity")) {
              controlFlowInfo.callActivities.set(e.id, getNodeName(e));
              callActivities.push(e.id);
            } else if (is(e, "bpmn:IntermediateCatchEvent") && is(e.eventDefinitions[0], "bpmn:MessageEventDefinition")) catchingMessages.push(e.id);else if (is(e, "bpmn:StartEvent") && is(e.eventDefinitions[0], "bpmn:MessageEventDefinition")) catchingMessages.push(e.id);
          }); // It is also necessary to add boundary events of embedded sub-processes

          controlFlowInfo.sources.forEach(nodeId => {
            let start = globalNodeMap.get(nodeId);

            if (start.eventDefinitions && start.eventDefinitions[0] && is(start.eventDefinitions[0], "bpmn:MessageEventDefinition") && controlFlowInfo.nodeList.indexOf(nodeId) < 0) {
              controlFlowInfo.nodeList.push(nodeId);
              if (catchingMessages.indexOf(nodeId) < 0) catchingMessages.push(nodeId);
            }
          });
          controlFlowInfo.boundaryEvents.forEach(nodeId => {
            let node = globalNodeMap.get(nodeId);
            if (node.outgoing) for (let outgoing of node.outgoing) controlFlowInfo.edgeList.push(outgoing.id);

            if (!node.cancelActivity) {
              controlFlowInfo.nonInterruptingEvents.set(node.id, getNodeName(node));
              nonInterruptingEvents.push(node.id);
              controlFlowInfo.nodeList.push(nodeId); // Eager reinsertion

              if (node.eventDefinitions[0] && is(node.eventDefinitions[0], 'bpmn:MessageEventDefinition')) {
                if (catchingMessages.indexOf(nodeId) < 0) catchingMessages.push(nodeId);
              }
            } else if (node.eventDefinitions && is(node.eventDefinitions[0], "bpmn:MessageEventDefinition")) {
              if (controlFlowInfo.nodeList.indexOf(nodeId) < 0) controlFlowInfo.nodeList.push(nodeId);
              if (catchingMessages.indexOf(nodeId) < 0) catchingMessages.push(nodeId);
            }
          });
          globalNodeMap.forEach(node => {
            if (is(node, "bpmn:SubProcess") && node.triggeredByEvent && controlFlowInfo.nodeList.indexOf(node.id)) {
              for (let start of node.flowElements.filter(e => is(e, "bpmn:FlowNode") && is(e, "bpmn:StartEvent"))) {
                if (start.isInterrupting == false) {
                  let parent = globalNodeMap.get(start.$parent.id);
                  controlFlowInfo.nonInterruptingEvents.set(start.id, getNodeName(parent));
                  nonInterruptingEvents.push(start.id);
                  controlFlowInfo.nodeList.push(start.id);

                  if (start.eventDefinitions[0] && is(start.eventDefinitions[0], "bpmn:MessageEventDefinition")) {
                    if (catchingMessages.indexOf(start.id) < 0) catchingMessages.push(start.id);
                  }
                }

                if (controlFlowInfo.boundaryEvents.indexOf(start.id) < 0) {
                  controlFlowInfo.boundaryEvents.push(start.id);
                  if (controlFlowInfo.nodeList.indexOf(start.$parent.id) < 0) controlFlowInfo.nodeList.push(start.$parent.id);
                }

                if (start.eventDefinitions[0] && is(start.eventDefinitions[0], "bpmn:MessageEventDefinition")) {
                  if (controlFlowInfo.nodeList.indexOf(start.id) < 0) controlFlowInfo.nodeList.push(start.id);
                  if (catchingMessages.indexOf(start.id) < 0) catchingMessages.push(start.id);
                }

                if (start.outgoing) for (let outgoing of start.outgoing) controlFlowInfo.edgeList.push(outgoing.id);
              }
            }
          });
          let part1 = [];
          let part2 = [];
          controlFlowInfo.nodeList.forEach(nodeId => {
            if (hasExternalCall(nodeId)) part1.push(nodeId);else part2.push(nodeId);
          });
          controlFlowInfo.nodeList = part1.concat(part2);
          controlFlowInfo.nodeList.forEach((nodeId, index) => {
            let node = globalNodeMap.get(nodeId);
            controlFlowInfo.nodeIndexMap.set(nodeId, index + 1);
            globalNodeIndexMap.set(nodeId, index + 1);
            controlFlowInfo.nodeNameMap.set(nodeId, getNodeName(globalNodeMap.get(nodeId)));

            if (node.documentation && node.documentation[0].text && node.documentation[0].text.length > 0) {
              if (is(node, 'bpmn:CallActivity')) controlFlowInfo.externalBundles.set(nodeId, node.documentation[0].text);else extractParameters(node.documentation[0].text, node.id, controlFlowInfo);
            }
          });
          controlFlowInfo.edgeList.forEach((edgeId, index) => {
            controlFlowInfo.edgeIndexMap.set(edgeId, index + 1);
            globalEdgeIndexMap.set(edgeId, index + 1);
          });
          controlFlowInfo.catchingMessages = catchingMessages; // ControlFlow Perspective: Generation of Smart Contracts

          let codeGenerationInfo = {
            nodeList: controlFlowInfo.nodeList,
            nodeMap: globalNodeMap,
            catchingMessages: controlFlowInfo.catchingMessages,
            multiinstanceActivities: multiinstanceActivities,
            callActivities: callActivities,
            nonInterruptingEvents: nonInterruptingEvents,
            oracleInfo: controlFlowInfo.oracleInfo,
            oracleTaskMap: controlFlowInfo.oracleTaskMap,
            processId: () => controlFlowInfo.self.id,
            nodeName: nodeId => getNodeName(globalNodeMap.get(nodeId)),
            eventType: nodeId => {
              let node = globalNodeMap.get(nodeId);

              if (node.eventDefinitions && node.eventDefinitions[0]) {
                let cad = node.eventDefinitions[0].$type;
                return cad.substring(5, cad.length - 15);
              }

              return "Default";
            },
            allEventTypes: () => {
              let taken = [];
              globalNodeMap.forEach(node => {
                if (node.eventDefinitions && node.eventDefinitions[0] && !is(node.eventDefinitions[0], "bpmn:TerminateEventDefinition") && !is(node.eventDefinitions[0], "bpmn:MessageEventDefinition")) {
                  let cad = node.eventDefinitions[0].$type;
                  if (taken.indexOf(cad.substring(5, cad.length - 15)) < 0) taken.push(cad.substring(5, cad.length - 15));
                }
              });
              return taken;
            },
            getMessages: () => {
              let taken = [];
              let candidates = controlFlowInfo.boundaryEvents;
              controlFlowInfo.nodeList.forEach(nodeId => {
                if (is(globalNodeMap.get(nodeId), "bpmn:SubProcess")) {
                  let subP = globalControlFlowInfoMap.get(nodeId);
                  candidates = candidates.concat(subP.boundaryEvents);
                  subP.sources.forEach(id => {
                    if (!is(globalNodeMap.get(id), "bpmn:Subprocess") && candidates.indexOf(id) < 0) candidates.push(id);
                  });
                }
              });
              candidates.forEach(evtId => {
                let evt = globalNodeMap.get(evtId);
                if (evt.eventDefinitions && evt.eventDefinitions[0] && is(evt.eventDefinitions[0], "bpmn:MessageEventDefinition")) taken.push(evtId);
              });
              return taken;
            },
            getThrowingMessages: () => {
              let res = [];
              controlFlowInfo.nodeList.forEach(nodeId => {
                let node = globalNodeMap.get(nodeId);
                if ((is(node, "bpmn:EndEvent") || is(node, "bpmn:IntermediateThrowEvent")) && node.eventDefinitions && node.eventDefinitions[0] && is(node.eventDefinitions[0], "bpmn:MessageEventDefinition")) res.push(nodeId);
              });
              return res;
            },
            getThrowingEvents: (subprocId, evType) => {
              let res = [];
              globalNodeMap.forEach(node => {
                if (node.eventDefinitions && node.eventDefinitions[0]) {
                  let cad = node.eventDefinitions[0].$type;

                  if (cad.substring(5, cad.length - 15) === evType) {
                    if ((is(node, "bpmn:EndEvent") || is(node, "bpmn:IntermediateThrowEvent")) && (node.$parent.id === subprocId || controlFlowInfo.nodeList.indexOf(node.id) >= 0)) {
                      res.push(node.id);
                    }
                  }
                }
              });
              return res;
            },
            getCatchingEvents: subprocId => {
              let res = [];
              globalNodeMap.forEach(node => {
                if (node.eventDefinitions && node.eventDefinitions[0]) {
                  if (is(node, "bpmn:StartEvent")) {
                    let parent = globalNodeMap.get(node.$parent.id);
                    if (parent.triggeredByEvent && parent.$parent.id === subprocId) res.unshift(node.id);else if (!parent.triggeredByEvent && (parent.id === subprocId || controlFlowInfo.nodeList.indexOf(parent.id) > -1)) res.push(node.id);
                  } else if (is(node, "bpmn:BoundaryEvent") || is(node, "bpmn:IntermediateCatchEvent")) {
                    if (node.$parent.id === subprocId || controlFlowInfo.nodeList.indexOf(node.$parent.id) > -1) res.push(node.id);
                  }
                }
              });
              return res;
            },
            getTerminateCandidates: subprocId => {
              let res = [];
              globalNodeMap.forEach(node => {
                if (node.eventDefinitions && node.eventDefinitions[0]) {
                  if (is(node, "bpmn:BoundaryEvent") && node.cancelActivity == false) {
                    if (globalControlFlowInfoMap.has(node.id)) {
                      let localC = globalControlFlowInfoMap.get(node.id);
                      localC.nodeList.forEach(elemId => {
                        let elem = globalNodeMap.get(elemId);
                        if (elem.eventDefinitions && is(elem.eventDefinitions[0], "bpmn:TerminateEventDefinition") && elem.$parent.id === node.$parent.id) res.push(node.id);
                      });
                    } else {
                      debug('Missing Non Interrupting event');
                    }
                  }
                }
              });
              return res;
            },
            getProcessCandidatesMaskFrom: (evtId, evtType, evtCode, sourceProcesses, allEvents) => {
              let eventList = [];
              let bitarray = [];
              allEvents.forEach(nodeId => {
                let cad = globalNodeMap.get(nodeId).eventDefinitions[0].$type;
                if (evtType === cad.substring(5, cad.length - 15) && evtCode === getNodeName(globalNodeMap.get(nodeId))) eventList.push(nodeId);
              });
              sourceProcesses.forEach(procId => {
                let parent = globalNodeMap.get(procId);
                let previousParent = parent;
                let res = [];
                let eventFound = false;

                while (!eventFound && res.length == 0 && parent.$parent && controlFlowInfo.self.id !== parent.id) {
                  parent = globalNodeMap.get(parent.$parent.id);
                  eventList.forEach(nodeId => {
                    let node = globalNodeMap.get(nodeId);

                    if (!eventFound && is(node, "bpmn:BoundaryEvent") && node.attachedToRef.id === previousParent.id) {
                      eventFound = node.cancelActivity != false;
                      if (eventFound) res = [nodeId];else res.push(nodeId);
                    }
                  });

                  if (res.length == 0) {
                    eventList.forEach(nodeId => {
                      let node = globalNodeMap.get(nodeId);

                      if (!eventFound && is(node, "bpmn:StartEvent") && node.$parent.triggeredByEvent && node.$parent.$parent.id === parent.id) {
                        eventFound = node.isInterrupting != false;
                        if (eventFound) res = [nodeId];else res.push(nodeId);
                      }
                    });
                  }

                  previousParent = parent;
                }

                if (res.indexOf(evtId)) bitarray[globalNodeIndexMap.get(procId)] = 1;
              });
              let result = "0b";

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return result === "0b" ? 0 : new _bignumber.default(result).toFixed();
            },
            getCatchingEventsFrom: (procId, evtType, evtCode) => {
              // Escalation and Error catching events.
              // No intermediate events in normal flow allowed
              let res = [];
              let parent = globalNodeMap.get(procId);
              let eventFound = false;
              let candidates = controlFlowInfo.boundaryEvents.concat(controlFlowInfo.nodeList);
              let eventList = [];
              candidates.forEach(nodeId => {
                let node = globalNodeMap.get(nodeId);

                if (node.eventDefinitions) {
                  let cad = node.eventDefinitions[0].$type;
                  let type = cad.substring(5, cad.length - 15);

                  if (type === evtType && evtCode === getNodeName(globalNodeMap.get(nodeId)) && eventList.indexOf(nodeId) < 0) {
                    eventList.push(nodeId);
                  }
                }
              });

              if (!parent.triggeredByEvent) {
                eventList.forEach(nodeId => {
                  let node = globalNodeMap.get(nodeId);

                  if (!eventFound && is(node, "bpmn:StartEvent") && node.$parent.triggeredByEvent && node.$parent.$parent.id === parent.id) {
                    eventFound = node.isInterrupting != false;
                    if (eventFound) res = [nodeId];else res.push(nodeId);
                  }
                });
              }

              if (controlFlowInfo.self.id === procId || res.length > 0) {
                return res;
              } else {
                if (parent.triggeredByEvent) parent = globalNodeMap.get(parent.$parent.id);
                let previousParent = parent;

                while (!eventFound && res.length == 0 && parent.$parent && controlFlowInfo.self.id !== parent.id) {
                  parent = globalNodeMap.get(parent.$parent.id);
                  eventList.forEach(nodeId => {
                    let node = globalNodeMap.get(nodeId);

                    if (!eventFound && is(node, "bpmn:BoundaryEvent") && node.attachedToRef.id === previousParent.id) {
                      eventFound = node.cancelActivity != false;
                      if (eventFound) res = [nodeId];else res.push(nodeId);
                    }
                  });

                  if (res.length == 0) {
                    eventList.forEach(nodeId => {
                      let node = globalNodeMap.get(nodeId);

                      if (!eventFound && is(node, "bpmn:StartEvent") && node.$parent.triggeredByEvent && node.$parent.$parent.id === parent.id) {
                        eventFound = node.isInterrupting != false;
                        if (eventFound) res = [nodeId];else res.push(nodeId);
                      }
                    });
                  }

                  previousParent = parent;
                }

                return res;
              }
            },
            getWorkItemsGroupByParameters: isInput => {
              let name2Ids = new Map();
              controlFlowInfo.nodeList.forEach(nodeId => {
                let node = globalNodeMap.get(nodeId);

                if (is(node, 'bpmn:UserTask') || is(node, 'bpmn:ReceiveTask') || catchingMessages.indexOf(nodeId) >= 0) {
                  let params = "";

                  if (node.documentation && node.documentation[0].text && node.documentation[0].text.length > 0 && extractParameters(node.documentation[0].text, nodeId, null) !== undefined) {
                    let localParams = isInput ? extractParameters(node.documentation[0].text, nodeId, null).get("input") : extractParameters(node.documentation[0].text, nodeId, null).get("output");

                    if (localParams.length > 0) {
                      params = localParams[0];

                      for (let i = 2; i < localParams.length; i += 2) params += localParams[i];
                    }
                  }

                  let name = getNodeName(globalNodeMap.get(nodeId)) + params;

                  if (!name2Ids.has(name)) {
                    name2Ids.set(name, []);
                  }

                  name2Ids.get(name).push(nodeId);
                }
              });
              return name2Ids;
            },
            getContracts2Call: () => {
              let res = callActivities.concat(multiinstanceActivities);
              nonInterruptingEvents.forEach(evtId => {
                let node = globalNodeMap.get(evtId);
                res.push(is(node, "bpmn:StartEvent") ? node.$parent.id : evtId);
              });
              return res;
            },
            getContracts2CallFrom: (subprocId, candidates) => {
              let res = [subprocId];

              if (!controlFlowInfo.callActivities.has(subprocId)) {
                candidates.forEach(nodeId => {
                  let node = globalNodeMap.get(nodeId);

                  while (node.$parent) {
                    if (node.$parent.id === subprocId) {
                      res.push(nodeId);
                      break;
                    }

                    node = node.$parent;
                  }
                });
              }

              return res;
            },
            getContracts2CallMaskFrom: (subprocId, candidates) => {
              let bitarray = [];
              candidates.forEach(nodeId => {
                let node = globalNodeMap.get(nodeId);

                while (node.$parent) {
                  if (node.$parent.id === subprocId) {
                    bitarray[globalNodeIndexMap.get(nodeId)] = 1;
                    break;
                  }

                  node = node.$parent;
                }
              });
              let result = "0b";

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return result === "0b" ? 0 : new _bignumber.default(result).toFixed();
            },
            getContracts2CallArray: (subprocId, candidates) => {
              let res = '[uint(' + globalNodeIndexMap.get(candidates[0]) + ')';

              for (let i = 1; i < candidates.length; i++) res += ', uint(' + globalNodeIndexMap.get(candidates[i]) + ')';

              return res + ']';
            },
            getPossibleKillSubprocess: () => {
              let res = [];
              controlFlowInfo.boundaryEvents.forEach(nodeId => {
                let node = globalNodeMap.get(nodeId);

                if (node.$parent.triggeredByEvent && node.$parent.$parent.id !== controlFlowInfo.self.id) {
                  if (node.isInterrupting != false && res.indexOf(node.$parent.$parent.id) < 0) res.push(node.$parent.$parent.id);
                } else if (node.attachedToRef) {
                  let attachedTo = node.attachedToRef.id;

                  if (node.cancelActivity != false && res.indexOf(attachedTo) < 0) {
                    res.push(attachedTo);
                  }
                }
              });
              globalNodeMap.forEach(node => {
                if (node.eventDefinitions && node.eventDefinitions[0]) {
                  if (is(node, "bpmn:BoundaryEvent") && node.cancelActivity == false) {
                    if (globalControlFlowInfoMap.has(node.id)) {
                      let localC = globalControlFlowInfoMap.get(node.id);
                      localC.nodeList.forEach(elemId => {
                        let elem = globalNodeMap.get(elemId);

                        if (elem.eventDefinitions && is(elem.eventDefinitions[0], "bpmn:TerminateEventDefinition") && elem.$parent.id === node.$parent.id && controlFlowInfo.nodeList.indexOf(node.$parent.id) >= 0 && res.indexOf(node.$parent.id) < 0 && node.$parent.id != controlFlowInfo.self.id) {
                          res.push(node.$parent.id);
                        }
                      });
                    }
                  }
                }
              });
              controlFlowInfo.nodeList.forEach(nodeId => {
                let node = globalNodeMap.get(nodeId);

                if (node.eventDefinitions && is(node.eventDefinitions[0], "bpmn:TerminateEventDefinition")) {
                  if (res.indexOf(node.$parent.id) < 0 && node.$parent.id != controlFlowInfo.self.id && !is(globalNodeMap.get(controlFlowInfo.self.id), "bpmn:BoundaryEvent")) {
                    debug('I am here 2');
                    res.push(node.$parent.id);
                  }
                }
              });
              return res;
            },
            getCountExternalTasks: () => {
              let res = 0;
              controlFlowInfo.nodeList.forEach(nodeId => {
                if (hasExternalCall(nodeId)) res++;
              });
              return res;
            },
            getStartedMessages: processId => {
              let res = [];
              controlFlowInfo.nodeList.forEach(nodeId => {
                let node = globalNodeMap.get(nodeId);
                if (is(node, "bpmn:StartEvent") && node.$parent.id === processId && node.eventDefinitions && is(node.eventDefinitions[0], "bpmn:MessageEventDefinition") && globalNodeMap.get(node.$parent.id).triggeredByEvent) res.push(nodeId);
              });
              return res;
            },
            getParent: nodeId => {
              // Retrieves the id of the parent
              let node = globalNodeMap.get(nodeId);
              if (is(node, "bpmn:StartEvent") && node.$parent && globalNodeMap.get(node.$parent.id).triggeredByEvent) return globalNodeMap.get(node.$parent.id).$parent.id;
              if (is(node, "bpmn:BoundaryEvent") && node.cancelActivity) return node.attachedToRef.id;
              return node.$parent ? node.$parent.id : nodeId;
            },
            getContractName: nodeId => {
              // Retrieves the contract name related to the node.
              let node = globalNodeMap.get(nodeId);
              if (is(node, "bpmn:StartEvent") && node.$parent && globalNodeMap.get(node.$parent.id).triggeredByEvent) return node.$parent.id;
              if (is(node, "bpmn:BoundaryEvent")) return node.id;
              return controlFlowInfo.self.id;
            },
            getAllChildren: (subprocId, direct) => {
              let taken = direct ? [] : [subprocId];
              controlFlowInfo.nodeList.map(nodeId => globalNodeMap.get(nodeId)).forEach(e => {
                if (is(e, "bpmn:SubProcess") || callActivities.indexOf(e.id) >= 0 || nonInterruptingEvents.indexOf(e.id) >= 0 && !is(e, "bpmn:StartEvent")) if ((direct && subprocId !== e.id && e.$parent.id === subprocId || !direct) && taken.indexOf(e.id) < 0) taken.push(e.id);
              });
              return taken;
            },
            isStartingContractEvent: (eventId, processId) => {
              let evt = globalNodeMap.get(eventId);

              if (is(evt, "bpmn:StartEvent")) {
                if (globalNodeMap.get(evt.$parent.id).triggeredByEvent) return evt.$parent.id !== processId;
                if (is(evt.eventDefinitions[0], "bpmn:MessageEventDefinition")) return true;
              } else if (is(evt, "bpmn:BoundaryEvent")) {
                return eventId !== processId;
              } else if (is(evt, "bpmn:IntermediateCatchEvent") && is(evt.eventDefinitions[0], "bpmn:MessageEventDefinition")) return true;

              return false;
            },
            isInterrupting: eventId => {
              // True if an event is interrupting
              let node = globalNodeMap.get(eventId);
              if (node.eventDefinitions && is(node.eventDefinitions[0], "bpmn:ErrorEventDefinition")) return true;
              if (is(node, "bpmn:StartEvent") && node.$parent && globalNodeMap.get(node.$parent.id).triggeredByEvent) return node.isInterrupting != false;
              if (is(node, "bpmn:BoundaryEvent")) return node.cancelActivity != false;
              return false;
            },
            isEmbeddedSubprocess: subprocessId => {
              return globalControlFlowInfoMap.get(subprocessId).isEmbedded;
            },
            isBoundaryEvent: evtId => {
              return controlFlowInfo.boundaryEvents.indexOf(evtId) >= 0;
            },
            preMarking: nodeId => {
              let node = globalNodeMap.get(nodeId);
              let bitarray = [];
              if (node.incoming) for (let incoming of node.incoming) bitarray[controlFlowInfo.edgeIndexMap.get(incoming.id)] = 1;else bitarray[0] = 1;
              let result = "0b";

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return new _bignumber.default(result).toFixed();
            },
            postMarking: nodeId => {
              let node = globalNodeMap.get(nodeId);
              let bitarray = [];
              let result = "0b";
              if (node.outgoing) for (let outgoing of node.outgoing) {
                bitarray[controlFlowInfo.edgeIndexMap.get(outgoing.id)] = 1;
              } else result = "0";

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return new _bignumber.default(result).toFixed();
            },
            subprocessNodeMarking: subprocessId => {
              let bitarray = [];
              globalNodeMap.forEach(node => {
                if (node.$parent && node.$parent.id === subprocessId) {
                  if (is(node, "bpmn:Task") || is(node, 'bpmn:SubProcess')) bitarray[globalNodeIndexMap.get(node.id)] = 1;else if (!globalNodeMap.get(subprocessId).triggeredByEvent && node.eventDefinitions && node.eventDefinitions[0] && is(node.eventDefinitions[0], "bpmn:MessageEventDefinition")) bitarray[globalNodeIndexMap.get(node.id)] = 1;
                }
              });
              let result = bitarray.length > 0 ? "0b" : 0;

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return new _bignumber.default(result).toFixed();
            },
            subprocessNodeFullMarking: subprocId => {
              let children = [subprocId];
              let bitarray = [];
              controlFlowInfo.nodeList.forEach(nodeId => {
                let node = globalNodeMap.get(nodeId);

                if (is(node, "bpmn:SubProcess") || callActivities.indexOf(node.id) >= 0 || nonInterruptingEvents.indexOf(node.id) >= 0 && !is(node, "bpmn:StartEvent")) {
                  while (node.$parent) {
                    if (node.$parent.id === subprocId) {
                      if (multiinstanceActivities.indexOf(nodeId) >= 0 || callActivities.indexOf(node.id) >= 0 || nonInterruptingEvents.indexOf(node.id) >= 0) {
                        bitarray[globalNodeIndexMap.get(nodeId)] = 1;
                      } else if (children.indexOf(nodeId) < 0) {
                        children.push(nodeId);
                      }

                      break;
                    }

                    node = node.$parent;
                  }
                }
              });
              let result = "0b";
              if (globalNodeIndexMap.get(subprocId)) bitarray[globalNodeIndexMap.get(subprocId)] = 1;
              controlFlowInfo.nodeList.map(nodeId => globalNodeMap.get(nodeId)).forEach(node => {
                if (node.$parent && children.indexOf(node.$parent.id) >= 0) {
                  bitarray[globalNodeIndexMap.get(node.id)] = 1;
                }
              });
              catchingMessages.map(evtId => globalNodeMap.get(evtId)).forEach(evt => {
                if (evt.attachedToRef && children.indexOf(evt.attachedToRef) >= 0) {
                  bitarray[globalNodeIndexMap.get(evt.id)] = 1;
                }
              });

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return result === '0b' ? new _bignumber.default(0) : new _bignumber.default(result).toFixed();
            },
            subprocessStartMarking: subprocessId => {
              let toSearch = globalNodeMap.get(subprocessId);
              let bitarray = [];
              let result = "0b";

              if (is(toSearch, "bpmn:BoundaryEvent")) {
                for (let outgoing of toSearch.outgoing) bitarray[controlFlowInfo.edgeIndexMap.get(outgoing.id)] = 1;
              } else {
                for (let node of toSearch.flowElements.filter(e => is(e, "bpmn:FlowNode") && is(e, "bpmn:StartEvent"))) {
                  if (node.$parent.id === subprocessId) if (!globalNodeMap.get(node.$parent.id).triggeredByEvent && node.eventDefinitions && node.eventDefinitions[0] && is(node.eventDefinitions[0], "bpmn:MessageEventDefinition")) bitarray[0] = 1;else if (node.outgoing) for (let outgoing of node.outgoing) bitarray[controlFlowInfo.edgeIndexMap.get(outgoing.id)] = 1;
                }
              }

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return new _bignumber.default(result).toFixed();
            },
            getAllAncestorsMask: subprocId => {
              let bitarray = [];
              let result = "0b";
              let node = globalNodeMap.get(subprocId);

              while (node.$parent) {
                bitarray[controlFlowInfo.nodeIndexMap.get(node.id)] = 1;
                node = node.$parent;
              }

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return new _bignumber.default(result).toFixed();
            },
            subprocessMarking: subprocessId => {
              let bitarray = [];
              let result = "0b";
              let localInfo = globalControlFlowInfoMap.get(subprocessId);
              let edgeList = [];
              localInfo.nodeList.forEach(nodeId => {
                let node = globalNodeMap.get(nodeId);

                if (node.$parent && node.$parent.id === subprocessId && node.incoming) {
                  for (let incoming of node.incoming) {
                    edgeList.push(incoming.id);
                  }
                }
              });
              edgeList.forEach(edgeId => {
                bitarray[controlFlowInfo.edgeIndexMap.get(edgeId)] = 1;
              });

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return new _bignumber.default(result).toFixed();
            },
            subprocessFullMarking: subprocId => {
              let bitarray = [];
              let result = "0b";
              let children = [subprocId];
              controlFlowInfo.nodeList.forEach(nodeId => {
                let node = globalNodeMap.get(nodeId);

                if (is(node, "bpmn:SubProcess") && multiinstanceActivities.indexOf(nodeId) < 0) {
                  while (node.$parent) {
                    if (node.$parent.id === subprocId) {
                      if (children.indexOf(nodeId) < 0) children.push(nodeId);
                      break;
                    }

                    node = node.$parent;
                  }
                }
              });
              children.forEach(subprocessId => {
                let localInfo = globalControlFlowInfoMap.get(subprocessId);
                localInfo.edgeList.forEach(edgeId => {
                  bitarray[controlFlowInfo.edgeIndexMap.get(edgeId)] = 1;
                });
              });

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return new _bignumber.default(result).toFixed();
            },
            flowEdgeIndex: flowEdgeId => {
              let bitarray = [];
              bitarray[controlFlowInfo.edgeIndexMap.get(flowEdgeId)] = 1;
              let result = "0b";

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return new _bignumber.default(result).toFixed();
            },
            flowNodeIndex: flowNodeId => {
              let bitarray = [];
              bitarray[globalNodeIndexMap.get(flowNodeId)] = 1;
              let result = "0b";

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return new _bignumber.default(result).toFixed();
            },
            nodeRealIndex: nodeId => {
              return globalNodeIndexMap.get(nodeId);
            },
            isPartOfDeferredChoice: eventId => {
              let event = globalNodeMap.get(eventId);

              if (event.incoming) {
                let node = event.incoming[0].sourceRef;
                return is(node, "bpmn:EventBasedGateway");
              }

              return false;
            },
            getDeferredChoiceElements: nodeId => {
              let event = globalNodeMap.get(nodeId);
              let res = [];

              if (event.incoming) {
                let node = event.incoming[0].sourceRef;

                if (is(node, "bpmn:EventBasedGateway")) {
                  for (let outgoing of node.outgoing) {
                    if (outgoing.targetRef.id !== nodeId) res.push(outgoing.targetRef.id);
                  }
                }
              }

              return res;
            },
            deferredChoiceNodeMarking: nodeId => {
              let event = globalNodeMap.get(nodeId);
              let bitarray = [];

              if (event.incoming) {
                let node = event.incoming[0].sourceRef;

                if (is(node, "bpmn:EventBasedGateway")) {
                  for (let outgoing of node.outgoing) {
                    bitarray[controlFlowInfo.nodeIndexMap.get(outgoing.targetRef.id)] = 1;
                  }
                }
              }

              let result = "0";

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return new _bignumber.default(result).toFixed();
            },
            deferredChoiceMarking: eventId => {
              let event = globalNodeMap.get(eventId);
              let node = event.incoming[0].sourceRef;
              let bitarray = [];
              let result = "0b";
              if (node.outgoing) for (let outgoing of node.outgoing) {
                bitarray[controlFlowInfo.edgeIndexMap.get(outgoing.id)] = 1;
              } else result = "0";

              for (let i = bitarray.length - 1; i >= 0; i--) result += bitarray[i] ? "1" : "0";

              return new _bignumber.default(result).toFixed();
            },
            globalDeclarations: () => {
              if (controlFlowInfo.globalParameters.length > 0) return controlFlowInfo.globalParameters;else return "";
            },
            getOracleFunction: nodeId => {
              if (controlFlowInfo.oracleTaskMap.has(nodeId)) return controlFlowInfo.oracleInfo.get(controlFlowInfo.oracleTaskMap.get(nodeId)).functionName;
              return "";
            },
            nodeParameters: nodeId => {
              let node = globalNodeMap.get(nodeId);

              if (node.documentation && node.documentation[0].text && node.documentation[0].text.length > 0) {
                let resDict = extractParameters(node.documentation[0].text, nodeId, null);
                return resDict !== undefined ? resDict.get("input").length > 0 || resDict.get("output").length > 0 : false;
              }

              return false;
            },
            typeParameters: (nodeId, isInput, hasPreviousParameter) => {
              let node = globalNodeMap.get(nodeId);
              let res = "";

              if (node.documentation && node.documentation[0].text && node.documentation[0].text.length > 0 && extractParameters(node.documentation[0].text, nodeId, null) !== undefined) {
                let localParams = isInput ? extractParameters(node.documentation[0].text, nodeId, null).get("input") : extractParameters(node.documentation[0].text, nodeId, null).get("output");

                if (localParams.length > 0) {
                  res = localParams[0];

                  for (let i = 2; i < localParams.length; i += 2) res += ", " + localParams[i];
                }
              }

              return hasPreviousParameter && res.length > 0 ? ", " + res : res;
            },
            concatParameters: (nodeId, isInput, hasType, hasPreviousParameter) => {
              let node = globalNodeMap.get(nodeId);
              let res = "";

              if (node.documentation && node.documentation[0].text && node.documentation[0].text.length > 0 && extractParameters(node.documentation[0].text, nodeId, null) !== undefined) {
                let localParams = isInput ? extractParameters(node.documentation[0].text, nodeId, null).get("input") : extractParameters(node.documentation[0].text, nodeId, null).get("output");

                if (localParams.length > 0) {
                  res = hasType ? localParams[0] + " " + localParams[1] : localParams[1];

                  for (let i = 2; i < localParams.length; i += 2) res += "," + (hasType ? localParams[i] + " " + localParams[i + 1] : localParams[i + 1]);
                }
              }

              return hasPreviousParameter && res.length > 0 ? ", " + res : res;
            },
            nodeFunctionBody: nodeId => {
              let node = globalNodeMap.get(nodeId);

              if (node.script) {
                return node.script.split("->");
              } else if (node.documentation && node.documentation[0].text && node.documentation[0].text.length > 0 && extractParameters(node.documentation[0].text, nodeId, null) !== undefined) {
                return extractParameters(node.documentation[0].text, nodeId, null).get("body");
              } else return "";
            },
            getCondition: flowEdge => flowEdge.conditionExpression ? flowEdge.conditionExpression.body : flowEdge.name ? flowEdge.name : flowEdge.id,
            is: is
          };
          let localSolidity = bpmn2solTemplate(codeGenerationInfo); // Code for using the worklist template

          let userTaskList = [];
          let parameterInfo = new Map();
          controlFlowInfo.nodeList.forEach(nodeId => {
            let node = globalNodeMap.get(nodeId);

            if (is(node, 'bpmn:UserTask') || is(node, 'bpmn:ReceiveTask')) {
              userTaskList.push(nodeId);

              if (controlFlowInfo.localParameters.has(nodeId) && (controlFlowInfo.localParameters.get(nodeId).get('input').length > 0 || controlFlowInfo.localParameters.get(nodeId).get('output').length > 0)) {
                parameterInfo.set(nodeId, controlFlowInfo.localParameters.get(nodeId));
              }
            }
          });
          if (controlFlowInfo.catchingMessages.length > 0) userTaskList = userTaskList.concat(controlFlowInfo.catchingMessages); // worklist: Smart Contract Generation

          let worklistGenerationInfo = {
            nodeList: userTaskList,
            restrictRelation: restrictRelation,
            parameterInfo: parameterInfo,
            nodeIndex: globalNodeIndexMap,
            nodeMap: globalNodeMap,
            processId: () => controlFlowInfo.self.id,
            nodeName: nodeId => {
              return getNodeName(globalNodeMap.get(nodeId));
            },
            getParameterType: (nodeId, isInput, isType, hasPrevious) => {
              let res = "";

              if (parameterInfo.get(nodeId)) {
                let localParams = isInput ? parameterInfo.get(nodeId).get("input") : parameterInfo.get(nodeId).get("output");

                if (localParams && localParams.length > 0) {
                  res = isType ? localParams[0].type : localParams[0].name;

                  for (let i = 1; i < localParams.length; i++) res += isType ? ", " + localParams[i].type : ", " + localParams[i].name;
                }
              }

              return res.length > 0 && hasPrevious ? ", " + res : res;
            },
            getParameters: (nodeId, isInput, hasType, hasPrevious) => {
              let res = "";

              if (parameterInfo.get(nodeId)) {
                let localParams = isInput ? parameterInfo.get(nodeId).get("input") : parameterInfo.get(nodeId).get("output");

                if (localParams && localParams.length > 0) {
                  res = hasType ? localParams[0].type + " " + localParams[0].name : localParams[0].name;

                  for (let i = 1; i < localParams.length; i++) res += hasType ? ", " + localParams[i].type + " " + localParams[i].name : ", " + localParams[i].name;
                }
              }

              return res.length > 0 && hasPrevious ? ", " + res : res;
            },
            getWorkItemsGroupByParameters: isInput => {
              let name2Ids = new Map();
              controlFlowInfo.nodeList.forEach(nodeId => {
                let node = globalNodeMap.get(nodeId);

                if (is(node, 'bpmn:UserTask') || is(node, 'bpmn:ReceiveTask') || catchingMessages.indexOf(nodeId) >= 0) {
                  let params = "";

                  if (node.documentation && node.documentation[0].text && node.documentation[0].text.length > 0 && extractParameters(node.documentation[0].text, nodeId, null) !== undefined) {
                    let localParams = isInput ? extractParameters(node.documentation[0].text, nodeId, null).get("input") : extractParameters(node.documentation[0].text, nodeId, null).get("output");

                    if (localParams.length > 0) {
                      params = localParams[0];

                      for (let i = 2; i < localParams.length; i += 2) params += localParams[i];
                    }
                  }

                  let name = getNodeName(globalNodeMap.get(nodeId)) + params;

                  if (!name2Ids.has(name)) {
                    name2Ids.set(name, []);
                  }

                  name2Ids.get(name).push(nodeId);
                }
              });
              return name2Ids;
            },
            is: is
          };
          modelInfo.solidity += localSolidity;

          if (userTaskList.length > 0) {
            modelInfo.solidity += worklist2solTemplate(worklistGenerationInfo);
            debug(JSON.stringify(modelInfo.solidity));
          }

          modelInfo.controlFlowInfoMap.set(controlFlowInfo.self.id, controlFlowInfo);
        } else {
          controlFlowInfo.nodeList.forEach(nodeId => controlFlowInfo.nodeIndexMap.set(nodeId, globalNodeIndexMap.get(nodeId)));
          controlFlowInfo.edgeList.forEach(edgeId => controlFlowInfo.edgeIndexMap.set(edgeId, globalEdgeIndexMap.get(edgeId)));
        }
      } //////////////////////////////////////////////////////////////////////////////////


      modelInfo.entryContractName = modelInfo.name + ":" + (proc.name ? proc.name.replace(/\s+/g, "_") : proc.id) + "_Contract";
      resolve();
    }).catch(err => {
      throw new Error(err);
      reject();
    });
  });
};

var _default = parseModel;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,