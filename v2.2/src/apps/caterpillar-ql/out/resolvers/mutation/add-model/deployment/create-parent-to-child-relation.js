"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _registerFactory = _interopRequireDefault(require("./register-factory"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var debug = (0, _debug2["default"])('caterpillarql:add-model:create-parent-to-child-relation');

var createParent2ChildRelation = function createParent2ChildRelation(web3, registryContract, currentIndex, sortedElements, outputContracts, modelInfo) {
  return web3.eth.personal.getAccounts().then(function (accounts) {
    return registryContract.methods.addChildBundleId(web3.utils.fromAscii(sortedElements[currentIndex].bundleParent), web3.utils.fromAscii(sortedElements[currentIndex].bundleId), sortedElements[currentIndex].nodeIndex).send({
      from: accounts[0],
      gas: 4700000
    }).then(function (result) {
      if (currentIndex + 1 < sortedElements.length) {
        return createParent2ChildRelation(web3, registryContract, currentIndex + 1, sortedElements, outputContracts, modelInfo);
      } else {
        debug('....................................................................');
        var removedCallActivities = [];
        sortedElements.forEach(function (element) {
          if (modelInfo.controlFlowInfoMap.has(element.nodeId) || modelInfo.globalNodeMap.get(element.nodeId).$type === 'bpmn:StartEvent') {
            removedCallActivities.push(element);
          }
        });

        if (removedCallActivities.length > 0) {
          debug('DEPLOYING FACTORIES AND UPDATING PROCESS-FACTORY RELATION IN REGISTRY ...');
          return (0, _registerFactory["default"])(web3, registryContract, 0, removedCallActivities, outputContracts, modelInfo);
        }
      }
    });
  });
};

var _default = createParent2ChildRelation;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvbXV0YXRpb24vYWRkLW1vZGVsL2RlcGxveW1lbnQvY3JlYXRlLXBhcmVudC10by1jaGlsZC1yZWxhdGlvbi50cyJdLCJuYW1lcyI6WyJkZWJ1ZyIsImNyZWF0ZVBhcmVudDJDaGlsZFJlbGF0aW9uIiwid2ViMyIsInJlZ2lzdHJ5Q29udHJhY3QiLCJjdXJyZW50SW5kZXgiLCJzb3J0ZWRFbGVtZW50cyIsIm91dHB1dENvbnRyYWN0cyIsIm1vZGVsSW5mbyIsImV0aCIsInBlcnNvbmFsIiwiZ2V0QWNjb3VudHMiLCJ0aGVuIiwiYWNjb3VudHMiLCJtZXRob2RzIiwiYWRkQ2hpbGRCdW5kbGVJZCIsInV0aWxzIiwiZnJvbUFzY2lpIiwiYnVuZGxlUGFyZW50IiwiYnVuZGxlSWQiLCJub2RlSW5kZXgiLCJzZW5kIiwiZnJvbSIsImdhcyIsInJlc3VsdCIsImxlbmd0aCIsInJlbW92ZWRDYWxsQWN0aXZpdGllcyIsImZvckVhY2giLCJlbGVtZW50IiwiY29udHJvbEZsb3dJbmZvTWFwIiwiaGFzIiwibm9kZUlkIiwiZ2xvYmFsTm9kZU1hcCIsImdldCIsIiR0eXBlIiwicHVzaCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOzs7O0FBRUEsSUFBTUEsS0FBSyxHQUFHLHdCQUFPLHlEQUFQLENBQWQ7O0FBRUEsSUFBTUMsMEJBQTBCLEdBQUcsU0FBN0JBLDBCQUE2QixDQUFDQyxJQUFELEVBQU9DLGdCQUFQLEVBQXlCQyxZQUF6QixFQUF1Q0MsY0FBdkMsRUFBdURDLGVBQXZELEVBQXdFQyxTQUF4RSxFQUFzRjtBQUN2SCxTQUFPTCxJQUFJLENBQUNNLEdBQUwsQ0FBU0MsUUFBVCxDQUFrQkMsV0FBbEIsR0FDSkMsSUFESSxDQUVILFVBQUFDLFFBQVE7QUFBQSxXQUNOVCxnQkFBZ0IsQ0FDYlUsT0FESCxDQUVHQyxnQkFGSCxDQUdJWixJQUFJLENBQUNhLEtBQUwsQ0FBV0MsU0FBWCxDQUFxQlgsY0FBYyxDQUFDRCxZQUFELENBQWQsQ0FBNkJhLFlBQWxELENBSEosRUFJSWYsSUFBSSxDQUFDYSxLQUFMLENBQVdDLFNBQVgsQ0FBcUJYLGNBQWMsQ0FBQ0QsWUFBRCxDQUFkLENBQTZCYyxRQUFsRCxDQUpKLEVBS0liLGNBQWMsQ0FBQ0QsWUFBRCxDQUFkLENBQTZCZSxTQUxqQyxFQU9HQyxJQVBILENBUUk7QUFDRUMsTUFBQUEsSUFBSSxFQUFFVCxRQUFRLENBQUMsQ0FBRCxDQURoQjtBQUVFVSxNQUFBQSxHQUFHLEVBQUU7QUFGUCxLQVJKLEVBYUdYLElBYkgsQ0FjSSxVQUFDWSxNQUFELEVBQVk7QUFDVixVQUFJbkIsWUFBWSxHQUFHLENBQWYsR0FBbUJDLGNBQWMsQ0FBQ21CLE1BQXRDLEVBQThDO0FBQzVDLGVBQU92QiwwQkFBMEIsQ0FBQ0MsSUFBRCxFQUFPQyxnQkFBUCxFQUF5QkMsWUFBWSxHQUFHLENBQXhDLEVBQTJDQyxjQUEzQyxFQUEyREMsZUFBM0QsRUFBNEVDLFNBQTVFLENBQWpDO0FBQ0QsT0FGRCxNQUVPO0FBQ0xQLFFBQUFBLEtBQUssQ0FBQyxzRUFBRCxDQUFMO0FBQ0EsWUFBSXlCLHFCQUFxQixHQUFHLEVBQTVCO0FBQ0FwQixRQUFBQSxjQUFjLENBQUNxQixPQUFmLENBQXVCLFVBQUFDLE9BQU8sRUFBSTtBQUNoQyxjQUFJcEIsU0FBUyxDQUFDcUIsa0JBQVYsQ0FBNkJDLEdBQTdCLENBQWlDRixPQUFPLENBQUNHLE1BQXpDLEtBQW9EdkIsU0FBUyxDQUFDd0IsYUFBVixDQUF3QkMsR0FBeEIsQ0FBNEJMLE9BQU8sQ0FBQ0csTUFBcEMsRUFBNENHLEtBQTVDLEtBQXNELGlCQUE5RyxFQUFpSTtBQUMvSFIsWUFBQUEscUJBQXFCLENBQUNTLElBQXRCLENBQTJCUCxPQUEzQjtBQUNEO0FBQ0YsU0FKRDs7QUFLQSxZQUFJRixxQkFBcUIsQ0FBQ0QsTUFBdEIsR0FBK0IsQ0FBbkMsRUFBc0M7QUFDcEN4QixVQUFBQSxLQUFLLENBQUMsMkVBQUQsQ0FBTDtBQUNBLGlCQUFPLGlDQUFnQkUsSUFBaEIsRUFBc0JDLGdCQUF0QixFQUF3QyxDQUF4QyxFQUEyQ3NCLHFCQUEzQyxFQUFrRW5CLGVBQWxFLEVBQW1GQyxTQUFuRixDQUFQO0FBQ0Q7QUFDRjtBQUNGLEtBOUJMLENBRE07QUFBQSxHQUZMLENBQVA7QUFvQ0QsQ0FyQ0Q7O2VBdUNlTiwwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZGVidWcgZnJvbSAnZGVidWcnXG5cbmltcG9ydCByZWdpc3RlckZhY3RvcnkgZnJvbSAnLi9yZWdpc3Rlci1mYWN0b3J5J1xuXG5jb25zdCBkZWJ1ZyA9IF9kZWJ1ZygnY2F0ZXJwaWxsYXJxbDphZGQtbW9kZWw6Y3JlYXRlLXBhcmVudC10by1jaGlsZC1yZWxhdGlvbicpXG5cbmNvbnN0IGNyZWF0ZVBhcmVudDJDaGlsZFJlbGF0aW9uID0gKHdlYjMsIHJlZ2lzdHJ5Q29udHJhY3QsIGN1cnJlbnRJbmRleCwgc29ydGVkRWxlbWVudHMsIG91dHB1dENvbnRyYWN0cywgbW9kZWxJbmZvKSA9PiB7XG4gIHJldHVybiB3ZWIzLmV0aC5wZXJzb25hbC5nZXRBY2NvdW50cygpXG4gICAgLnRoZW4oXG4gICAgICBhY2NvdW50cyA9PlxuICAgICAgICByZWdpc3RyeUNvbnRyYWN0XG4gICAgICAgICAgLm1ldGhvZHNcbiAgICAgICAgICAuYWRkQ2hpbGRCdW5kbGVJZChcbiAgICAgICAgICAgIHdlYjMudXRpbHMuZnJvbUFzY2lpKHNvcnRlZEVsZW1lbnRzW2N1cnJlbnRJbmRleF0uYnVuZGxlUGFyZW50KSxcbiAgICAgICAgICAgIHdlYjMudXRpbHMuZnJvbUFzY2lpKHNvcnRlZEVsZW1lbnRzW2N1cnJlbnRJbmRleF0uYnVuZGxlSWQpLFxuICAgICAgICAgICAgc29ydGVkRWxlbWVudHNbY3VycmVudEluZGV4XS5ub2RlSW5kZXgsXG4gICAgICAgICAgKVxuICAgICAgICAgIC5zZW5kKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBmcm9tOiBhY2NvdW50c1swXSxcbiAgICAgICAgICAgICAgZ2FzOiA0NzAwMDAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIClcbiAgICAgICAgICAudGhlbihcbiAgICAgICAgICAgIChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnRJbmRleCArIDEgPCBzb3J0ZWRFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlUGFyZW50MkNoaWxkUmVsYXRpb24od2ViMywgcmVnaXN0cnlDb250cmFjdCwgY3VycmVudEluZGV4ICsgMSwgc29ydGVkRWxlbWVudHMsIG91dHB1dENvbnRyYWN0cywgbW9kZWxJbmZvKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWJ1ZygnLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4nKTtcbiAgICAgICAgICAgICAgICBsZXQgcmVtb3ZlZENhbGxBY3Rpdml0aWVzID0gW107XG4gICAgICAgICAgICAgICAgc29ydGVkRWxlbWVudHMuZm9yRWFjaChlbGVtZW50ID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChtb2RlbEluZm8uY29udHJvbEZsb3dJbmZvTWFwLmhhcyhlbGVtZW50Lm5vZGVJZCkgfHwgbW9kZWxJbmZvLmdsb2JhbE5vZGVNYXAuZ2V0KGVsZW1lbnQubm9kZUlkKS4kdHlwZSA9PT0gJ2JwbW46U3RhcnRFdmVudCcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZENhbGxBY3Rpdml0aWVzLnB1c2goZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlbW92ZWRDYWxsQWN0aXZpdGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICBkZWJ1ZygnREVQTE9ZSU5HIEZBQ1RPUklFUyBBTkQgVVBEQVRJTkcgUFJPQ0VTUy1GQUNUT1JZIFJFTEFUSU9OIElOIFJFR0lTVFJZIC4uLicpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2lzdGVyRmFjdG9yeSh3ZWIzLCByZWdpc3RyeUNvbnRyYWN0LCAwLCByZW1vdmVkQ2FsbEFjdGl2aXRpZXMsIG91dHB1dENvbnRyYWN0cywgbW9kZWxJbmZvKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICApXG4gICAgICAgIClcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVBhcmVudDJDaGlsZFJlbGF0aW9uXG4iXX0=