"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _repo = require("../../../repo");

var _continueRegistration = _interopRequireDefault(require("./continue-registration"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var debug = (0, _debug2["default"])('caterpillarql:add-model:register-models');

var registerModels = function registerModels(web3, registryContract, currentIndex, sortedElements, nodeIndexes, modelInfo, contracts) {
  var nodeName = sortedElements[currentIndex].nodeName;
  var gNodeId = sortedElements[currentIndex].nodeId;
  var controlFlowInfo = modelInfo.controlFlowInfoMap.get(gNodeId);
  if (modelInfo.globalNodeMap.get(gNodeId).$type === 'bpmn:StartEvent') controlFlowInfo = modelInfo.controlFlowInfoMap.get(modelInfo.globalNodeMap.get(gNodeId).$parent.id);

  if (controlFlowInfo) {
    var indexToFunctionName = [];
    var childrenSubproc = [];
    controlFlowInfo.nodeList.forEach(function (nodeId) {
      var element = modelInfo.globalNodeMap.get(nodeId);

      if (controlFlowInfo.nodeList.indexOf(nodeId) >= 0) {
        var type = "None";
        var role = "None";
        var indexRole = 0;
        if (controlFlowInfo.callActivities.has(nodeId) || controlFlowInfo.multiinstanceActivities.has(nodeId) || controlFlowInfo.nonInterruptingEvents.has(nodeId)) type = "Separate-Instance";else if (element.$type === 'bpmn:ServiceTask') type = "Service";else if (element.$type === 'bpmn:UserTask' || element.$type === 'bpmn:ReceiveTask' || controlFlowInfo.catchingMessages.indexOf(nodeId) >= 0) {
          type = "Workitem";
          if (!controlFlowInfo.taskRoleMap.has(nodeId)) throw 'No role related to User Task: ' + controlFlowInfo.nodeNameMap.get(nodeId);
          role = controlFlowInfo.taskRoleMap.get(nodeId);
        }
        indexToFunctionName[controlFlowInfo.nodeIndexMap.get(nodeId)] = {
          name: controlFlowInfo.nodeNameMap.get(nodeId),
          id: nodeId,
          type: type,
          role: role
        };

        if (controlFlowInfo.callActivities.has(nodeId) || controlFlowInfo.multiinstanceActivities.has(nodeId) || controlFlowInfo.nonInterruptingEvents.has(nodeId)) {
          childrenSubproc.push(nodeId);
          sortedElements[nodeIndexes.get(nodeId)].nodeIndex = controlFlowInfo.nodeIndexMap.get(nodeId);
          if (controlFlowInfo.externalBundles.has(nodeId)) sortedElements[nodeIndexes.get(nodeId)].bundleId = controlFlowInfo.externalBundles.get(nodeId);
        }
      }
    });
    var bpmnModel = currentIndex < sortedElements.length - 1 ? 'empty' : modelInfo.bpmn;
    var worklistAbi = contracts["".concat(modelInfo.id)]["".concat(nodeName, "_Worklist")] ? contracts["".concat(modelInfo.id)]["".concat(nodeName, "_Worklist")].abi : 'undefined';
    return _repo.process.create({
      rootProcessID: gNodeId,
      rootProcessName: nodeName,
      bpmnModel: bpmnModel,
      solidityCode: modelInfo.solidity,
      abi: JSON.stringify(contracts["".concat(modelInfo.id)]["".concat(nodeName, "_Contract")].abi),
      bytecode: contracts["".concat(modelInfo.id)]["".concat(nodeName, "_Contract")].evm.bytecode.object,
      indexToElement: indexToFunctionName,
      worklistAbi: JSON.stringify(worklistAbi)
    }).then(function (repoData) {
      var idAsString = repoData._id.toString();

      sortedElements[currentIndex].bundleId = idAsString;
      sortedElements[currentIndex].bundleParent = idAsString;
      childrenSubproc.forEach(function (childId) {
        sortedElements[nodeIndexes.get(childId)].bundleParent = idAsString;
      });
      debug("Compilation artifacts of ".concat(nodeName, " updated in repository with id ").concat(idAsString));
      return (0, _continueRegistration["default"])(web3, registryContract, currentIndex, sortedElements, nodeIndexes, modelInfo, contracts, registerModels);
    });
  } else {
    return (0, _continueRegistration["default"])(web3, registryContract, currentIndex, sortedElements, nodeIndexes, modelInfo, contracts, registerModels);
  }
};

var _default = registerModels;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,