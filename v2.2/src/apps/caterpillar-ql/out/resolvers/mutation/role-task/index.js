"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _compile = _interopRequireDefault(require("../../util/compile"));

var _registryContract = _interopRequireDefault(require("../../util/registry-contract"));

var _findRoleMap = _interopRequireDefault(require("../../util/find-role-map"));

var _repo = require("../../repo");

var _searchRepository = _interopRequireDefault(require("./deployment/search-repository"));

var _generateRoleTaskIndexes = _interopRequireDefault(require("./deployment/dynamic-binding/validation_code_gen/generate-role-task-indexes"));

var _generateRoleTaskContract = _interopRequireDefault(require("./deployment/dynamic-binding/validation_code_gen/generate-role-task-contract"));

var _createContract = _interopRequireDefault(require("../../util/create-contract"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('caterpillarql:role-task');

var _default = async ({
  policyId,
  rootProc,
  registry,
  web3
}) => {
  const contract = await (0, _registryContract.default)({
    address: registry,
    web3
  });
  const [policy] = await _repo.policy.find({
    _id: policyId
  });
  const searchResults = await (0, _searchRepository.default)(web3, contract, rootProc, policyId, (0, _findRoleMap.default)(policy.indexToRole));
  const content = (0, _generateRoleTaskContract.default)({
    contractName: 'TaskRoleContract',
    processData: (0, _generateRoleTaskIndexes.default)(searchResults)
  });
  const output = (0, _compile.default)({
    TaskRoleContract: {
      content
    }
  });
  const procContract = (0, _createContract.default)(web3)(output.contracts.TaskRoleContract.TaskRoleContract_Contract.abi);
  const accounts = await web3.eth.personal.getAccounts();
  const ret = await procContract.deploy({
    data: "0x" + output.contracts.TaskRoleContract.TaskRoleContract_Contract.evm.bytecode.object
  }).send({
    from: accounts[0],
    gas: 4700000
  });
  const created = await _repo.roleTask.create({
    address: ret.address,
    solidityCode: content,
    abi: JSON.stringify(output.contracts.TaskRoleContract.TaskRoleContract_Contract.abi),
    bytecode: output.contracts.TaskRoleContract.TaskRoleContract_Contract.evm.bytecode.object
  });
  const related = await contract.relateProcessToPolicy({
    bundleId: web3.utils.fromAscii(rootProc),
    policyId: web3.utils.fromAscii(policyId),
    roleTaskId: web3.utils.fromAscii(created._id.toString())
  })({
    from: accounts[0],
    gas: 4700000
  });
  return created;
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvbXV0YXRpb24vcm9sZS10YXNrL2luZGV4LnRzIl0sIm5hbWVzIjpbImRlYnVnIiwicG9saWN5SWQiLCJyb290UHJvYyIsInJlZ2lzdHJ5Iiwid2ViMyIsImNvbnRyYWN0IiwiYWRkcmVzcyIsInBvbGljeSIsInBvbGljeVNjaGVtYSIsImZpbmQiLCJfaWQiLCJzZWFyY2hSZXN1bHRzIiwiaW5kZXhUb1JvbGUiLCJjb250ZW50IiwiY29udHJhY3ROYW1lIiwicHJvY2Vzc0RhdGEiLCJvdXRwdXQiLCJUYXNrUm9sZUNvbnRyYWN0IiwicHJvY0NvbnRyYWN0IiwiY29udHJhY3RzIiwiVGFza1JvbGVDb250cmFjdF9Db250cmFjdCIsImFiaSIsImFjY291bnRzIiwiZXRoIiwicGVyc29uYWwiLCJnZXRBY2NvdW50cyIsInJldCIsImRlcGxveSIsImRhdGEiLCJldm0iLCJieXRlY29kZSIsIm9iamVjdCIsInNlbmQiLCJmcm9tIiwiZ2FzIiwiY3JlYXRlZCIsInJvbGVUYXNrU2NoZW1hIiwiY3JlYXRlIiwic29saWRpdHlDb2RlIiwiSlNPTiIsInN0cmluZ2lmeSIsInJlbGF0ZWQiLCJyZWxhdGVQcm9jZXNzVG9Qb2xpY3kiLCJidW5kbGVJZCIsInV0aWxzIiwiZnJvbUFzY2lpIiwicm9sZVRhc2tJZCIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBSUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUcscUJBQU8seUJBQVAsQ0FBZDs7ZUFFZSxPQUFPO0FBQ3BCQyxFQUFBQSxRQURvQjtBQUVwQkMsRUFBQUEsUUFGb0I7QUFHcEJDLEVBQUFBLFFBSG9CO0FBSXBCQyxFQUFBQTtBQUpvQixDQUFQLEtBS1E7QUFDckIsUUFBTUMsUUFBUSxHQUFHLE1BQU0sK0JBQWlCO0FBQ3RDQyxJQUFBQSxPQUFPLEVBQUVILFFBRDZCO0FBRXRDQyxJQUFBQTtBQUZzQyxHQUFqQixDQUF2QjtBQUlBLFFBQU0sQ0FBQ0csTUFBRCxJQUFXLE1BQU1DLGFBQ3BCQyxJQURvQixDQUNmO0FBQ0pDLElBQUFBLEdBQUcsRUFBRVQ7QUFERCxHQURlLENBQXZCO0FBSUEsUUFBTVUsYUFBYSxHQUFHLE1BQU0sK0JBQzFCUCxJQUQwQixFQUUxQkMsUUFGMEIsRUFHMUJILFFBSDBCLEVBSTFCRCxRQUowQixFQUsxQiwwQkFBWU0sTUFBTSxDQUFDSyxXQUFuQixDQUwwQixDQUE1QjtBQU9BLFFBQU1DLE9BQU8sR0FBRyx1Q0FBeUI7QUFDdkNDLElBQUFBLFlBQVksRUFBRSxrQkFEeUI7QUFFdkNDLElBQUFBLFdBQVcsRUFBRSxzQ0FBd0JKLGFBQXhCO0FBRjBCLEdBQXpCLENBQWhCO0FBS0EsUUFBTUssTUFBTSxHQUFHLHNCQUFRO0FBQ3JCQyxJQUFBQSxnQkFBZ0IsRUFBRTtBQUNoQkosTUFBQUE7QUFEZ0I7QUFERyxHQUFSLENBQWY7QUFNQSxRQUFNSyxZQUFZLEdBQUcsNkJBQWVkLElBQWYsRUFBcUJZLE1BQU0sQ0FBQ0csU0FBUCxDQUFpQkYsZ0JBQWpCLENBQWtDRyx5QkFBbEMsQ0FBNERDLEdBQWpGLENBQXJCO0FBRUEsUUFBTUMsUUFBUSxHQUFHLE1BQU1sQixJQUFJLENBQUNtQixHQUFMLENBQVNDLFFBQVQsQ0FBa0JDLFdBQWxCLEVBQXZCO0FBRUEsUUFBTUMsR0FBRyxHQUFHLE1BQU1SLFlBQVksQ0FDM0JTLE1BRGUsQ0FDUjtBQUNOQyxJQUFBQSxJQUFJLEVBQUUsT0FBT1osTUFBTSxDQUFDRyxTQUFQLENBQWlCRixnQkFBakIsQ0FBa0NHLHlCQUFsQyxDQUE0RFMsR0FBNUQsQ0FBZ0VDLFFBQWhFLENBQXlFQztBQURoRixHQURRLEVBSWZDLElBSmUsQ0FJVjtBQUNKQyxJQUFBQSxJQUFJLEVBQUVYLFFBQVEsQ0FBQyxDQUFELENBRFY7QUFFSlksSUFBQUEsR0FBRyxFQUFFO0FBRkQsR0FKVSxDQUFsQjtBQVNBLFFBQU1DLE9BQU8sR0FBRyxNQUFNQyxlQUNuQkMsTUFEbUIsQ0FFbEI7QUFDSS9CLElBQUFBLE9BQU8sRUFBRW9CLEdBQUcsQ0FBQ3BCLE9BRGpCO0FBRUlnQyxJQUFBQSxZQUFZLEVBQUV6QixPQUZsQjtBQUdJUSxJQUFBQSxHQUFHLEVBQUVrQixJQUFJLENBQUNDLFNBQUwsQ0FBZXhCLE1BQU0sQ0FBQ0csU0FBUCxDQUFpQkYsZ0JBQWpCLENBQWtDRyx5QkFBbEMsQ0FBNERDLEdBQTNFLENBSFQ7QUFJSVMsSUFBQUEsUUFBUSxFQUFFZCxNQUFNLENBQUNHLFNBQVAsQ0FBaUJGLGdCQUFqQixDQUFrQ0cseUJBQWxDLENBQTREUyxHQUE1RCxDQUFnRUMsUUFBaEUsQ0FBeUVDO0FBSnZGLEdBRmtCLENBQXRCO0FBU0EsUUFBTVUsT0FBTyxHQUFHLE1BQU1wQyxRQUFRLENBQzNCcUMscUJBRG1CLENBQ0c7QUFDckJDLElBQUFBLFFBQVEsRUFBRXZDLElBQUksQ0FBQ3dDLEtBQUwsQ0FBV0MsU0FBWCxDQUFxQjNDLFFBQXJCLENBRFc7QUFFckJELElBQUFBLFFBQVEsRUFBRUcsSUFBSSxDQUFDd0MsS0FBTCxDQUFXQyxTQUFYLENBQXFCNUMsUUFBckIsQ0FGVztBQUdyQjZDLElBQUFBLFVBQVUsRUFBRTFDLElBQUksQ0FBQ3dDLEtBQUwsQ0FBV0MsU0FBWCxDQUFxQlYsT0FBTyxDQUFDekIsR0FBUixDQUFZcUMsUUFBWixFQUFyQjtBQUhTLEdBREgsRUFNbkI7QUFDQ2QsSUFBQUEsSUFBSSxFQUFFWCxRQUFRLENBQUMsQ0FBRCxDQURmO0FBRUNZLElBQUFBLEdBQUcsRUFBRTtBQUZOLEdBTm1CLENBQXRCO0FBV0EsU0FBT0MsT0FBUDtBQUNELEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2RlYnVnIGZyb20gJ2RlYnVnJ1xuaW1wb3J0IGNvbXBpbGUgZnJvbSAnLi4vLi4vdXRpbC9jb21waWxlJ1xuaW1wb3J0IHJlZ2lzdHJ5Q29udHJhY3QgZnJvbSAnLi4vLi4vdXRpbC9yZWdpc3RyeS1jb250cmFjdCdcbmltcG9ydCBmaW5kUm9sZU1hcCBmcm9tICcuLi8uLi91dGlsL2ZpbmQtcm9sZS1tYXAnXG5pbXBvcnQge1xuICByb2xlVGFzayBhcyByb2xlVGFza1NjaGVtYSxcbiAgcG9saWN5IGFzIHBvbGljeVNjaGVtYVxufSBmcm9tICcuLi8uLi9yZXBvJ1xuaW1wb3J0IHNlYXJjaFJlcG9zaXRvcnkgZnJvbSAnLi9kZXBsb3ltZW50L3NlYXJjaC1yZXBvc2l0b3J5J1xuaW1wb3J0IGdlbmVyYXRlUm9sZVRhc2tJbmRleGVzIGZyb20gJy4vZGVwbG95bWVudC9keW5hbWljLWJpbmRpbmcvdmFsaWRhdGlvbl9jb2RlX2dlbi9nZW5lcmF0ZS1yb2xlLXRhc2staW5kZXhlcydcbmltcG9ydCBnZW5lcmF0ZVJvbGVUYXNrQ29udHJhY3QgZnJvbSAnLi9kZXBsb3ltZW50L2R5bmFtaWMtYmluZGluZy92YWxpZGF0aW9uX2NvZGVfZ2VuL2dlbmVyYXRlLXJvbGUtdGFzay1jb250cmFjdCdcbmltcG9ydCBjcmVhdGVDb250cmFjdCBmcm9tICcuLi8uLi91dGlsL2NyZWF0ZS1jb250cmFjdCdcblxuY29uc3QgZGVidWcgPSBfZGVidWcoJ2NhdGVycGlsbGFycWw6cm9sZS10YXNrJylcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKHtcbiAgcG9saWN5SWQsXG4gIHJvb3RQcm9jLFxuICByZWdpc3RyeSxcbiAgd2ViMyxcbn0pOiBQcm9taXNlPG9iamVjdD4gPT4ge1xuICBjb25zdCBjb250cmFjdCA9IGF3YWl0IHJlZ2lzdHJ5Q29udHJhY3Qoe1xuICAgIGFkZHJlc3M6IHJlZ2lzdHJ5LFxuICAgIHdlYjMsXG4gIH0pXG4gIGNvbnN0IFtwb2xpY3ldID0gYXdhaXQgcG9saWN5U2NoZW1hXG4gICAgLmZpbmQoe1xuICAgICAgX2lkOiBwb2xpY3lJZFxuICAgIH0pXG4gIGNvbnN0IHNlYXJjaFJlc3VsdHMgPSBhd2FpdCBzZWFyY2hSZXBvc2l0b3J5KFxuICAgIHdlYjMsXG4gICAgY29udHJhY3QsXG4gICAgcm9vdFByb2MsXG4gICAgcG9saWN5SWQsXG4gICAgZmluZFJvbGVNYXAocG9saWN5LmluZGV4VG9Sb2xlKVxuICApXG4gIGNvbnN0IGNvbnRlbnQgPSBnZW5lcmF0ZVJvbGVUYXNrQ29udHJhY3Qoe1xuICAgIGNvbnRyYWN0TmFtZTogJ1Rhc2tSb2xlQ29udHJhY3QnLFxuICAgIHByb2Nlc3NEYXRhOiBnZW5lcmF0ZVJvbGVUYXNrSW5kZXhlcyhzZWFyY2hSZXN1bHRzKSxcbiAgfSlcblxuICBjb25zdCBvdXRwdXQgPSBjb21waWxlKHtcbiAgICBUYXNrUm9sZUNvbnRyYWN0OiB7XG4gICAgICBjb250ZW50LFxuICAgIH0sXG4gIH0pXG5cbiAgY29uc3QgcHJvY0NvbnRyYWN0ID0gY3JlYXRlQ29udHJhY3Qod2ViMykob3V0cHV0LmNvbnRyYWN0cy5UYXNrUm9sZUNvbnRyYWN0LlRhc2tSb2xlQ29udHJhY3RfQ29udHJhY3QuYWJpKTtcbiAgXG4gIGNvbnN0IGFjY291bnRzID0gYXdhaXQgd2ViMy5ldGgucGVyc29uYWwuZ2V0QWNjb3VudHMoKVxuXG4gIGNvbnN0IHJldCA9IGF3YWl0IHByb2NDb250cmFjdFxuICAgIC5kZXBsb3koe1xuICAgICAgZGF0YTogXCIweFwiICsgb3V0cHV0LmNvbnRyYWN0cy5UYXNrUm9sZUNvbnRyYWN0LlRhc2tSb2xlQ29udHJhY3RfQ29udHJhY3QuZXZtLmJ5dGVjb2RlLm9iamVjdCwgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIH0pXG4gICAgLnNlbmQoe1xuICAgICAgZnJvbTogYWNjb3VudHNbMF0sXG4gICAgICBnYXM6IDQ3MDAwMDBcbiAgICB9KVxuXG4gIGNvbnN0IGNyZWF0ZWQgPSBhd2FpdCByb2xlVGFza1NjaGVtYVxuICAgIC5jcmVhdGUoXG4gICAgICB7XG4gICAgICAgICAgYWRkcmVzczogcmV0LmFkZHJlc3MsXG4gICAgICAgICAgc29saWRpdHlDb2RlOiBjb250ZW50LFxuICAgICAgICAgIGFiaTogSlNPTi5zdHJpbmdpZnkob3V0cHV0LmNvbnRyYWN0cy5UYXNrUm9sZUNvbnRyYWN0LlRhc2tSb2xlQ29udHJhY3RfQ29udHJhY3QuYWJpKSxcbiAgICAgICAgICBieXRlY29kZTogb3V0cHV0LmNvbnRyYWN0cy5UYXNrUm9sZUNvbnRyYWN0LlRhc2tSb2xlQ29udHJhY3RfQ29udHJhY3QuZXZtLmJ5dGVjb2RlLm9iamVjdFxuICAgICAgfVxuICAgIClcbiAgY29uc3QgcmVsYXRlZCA9IGF3YWl0IGNvbnRyYWN0XG4gICAgLnJlbGF0ZVByb2Nlc3NUb1BvbGljeSh7XG4gICAgICBidW5kbGVJZDogd2ViMy51dGlscy5mcm9tQXNjaWkocm9vdFByb2MpLFxuICAgICAgcG9saWN5SWQ6IHdlYjMudXRpbHMuZnJvbUFzY2lpKHBvbGljeUlkKSxcbiAgICAgIHJvbGVUYXNrSWQ6IHdlYjMudXRpbHMuZnJvbUFzY2lpKGNyZWF0ZWQuX2lkLnRvU3RyaW5nKCkpLFxuICAgIH0pXG4gICAgKHtcbiAgICAgIGZyb206IGFjY291bnRzWzBdLFxuICAgICAgZ2FzOiA0NzAwMDAwXG4gICAgfSlcbiAgXG4gIHJldHVybiBjcmVhdGVkXG59Il19