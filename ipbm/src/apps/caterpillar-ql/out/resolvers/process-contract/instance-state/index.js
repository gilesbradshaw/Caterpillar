"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _repo = require("../../repo");

var _createContract = _interopRequireDefault(require("../../util/create-contract"));

var _debug2 = _interopRequireDefault(require("debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('caterpillarql:process-contract:instance-state');

const findParameters = (contractAbi, functionName) => {
  let jsonAbi = JSON.parse(contractAbi);
  let candidates = [];
  jsonAbi.forEach(element => {
    if (element.name === functionName) {
      candidates = element.inputs;
    }
  });
  let res = [];
  candidates.forEach(element => {
    if (element.name && element.name !== 'workitemId') res.push(element);
  });
  return res;
};

var _default = ({
  web3,
  bpmnModel,
  registryContract
}) => async contractAddress => {
  debug({
    contractAddress
  }); // the model id

  const bundleId = await registryContract.bundleFor({
    instance: contractAddress
  });
  const [{
    abi,
    indexToElement,
    worklistAbi
  }] = await _repo.process.find({
    _id: bundleId
  }); // this is the contract for this instance

  const instanceContract = (0, _createContract.default)(web3)(JSON.parse(abi), contractAddress); // this is the address of the worklist contract for the instance

  const worklistAddress = await instanceContract.methods.getWorklistAddress.call();
  debug({
    worklistAddress
  }); // what does it mean when it is 0??

  const worklistContract = worklistAddress.toString() !== '0x0000000000000000000000000000000000000000' && (0, _createContract.default)(web3)(JSON.parse(worklistAbi), worklistAddress);

  if (!worklistContract) {
    return null;
  }

  const startedActivities = web3.utils.toBN((await instanceContract.methods.startedActivities.call())).toString(2).split('').reverse();
  debug({
    startedActivities
  });
  const s = await Promise.all(startedActivities.map((state, index) => ({
    index,
    state
  })).filter(({
    state,
    index
  }) => state === '1' && indexToElement[index].type === 'Workitem').map(({
    state,
    index
  }) => worklistContract.methods.workItemsFor(index, contractAddress).call().then(async x => ({
    index,
    refs: await Promise.all(web3.utils.toBN(x).toString(2).split('').reverse().map((val, index) => ({
      index,
      val
    })).filter(({
      val
    }) => val === '1').map(({
      index
    }) => worklistContract.methods.processInstanceFor(index).call().then(processAddress => ({
      index,
      processAddress,
      worklistAddress
    }))))
  }))));
  debug(JSON.stringify(s, null, 2));
  return {
    bpmn: bpmnModel,
    workItems: s.map(({
      index,
      refs
    }) => ({
      elementId: indexToElement[index].id,
      elementName: indexToElement[index].name,
      input: findParameters(worklistAbi, indexToElement[index].name),
      refs,
      worklistAddress
    }))
  };
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,