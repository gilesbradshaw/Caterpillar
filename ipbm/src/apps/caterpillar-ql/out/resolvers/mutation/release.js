"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _repo = require("../repo");

var _registryContract = _interopRequireDefault(require("../util/registry-contract"));

var _findRoleMap = _interopRequireDefault(require("../util/find-role-map"));

var _createContract = _interopRequireDefault(require("../util/create-contract"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('caterpillarql:mutation:release');

var _default = async ({
  pcase,
  registry,
  nominator,
  nominatorRole,
  nomineeRole,
  web3
}) => {
  const accounts = await web3.eth.personal.getAccounts();
  const contract = await (0, _registryContract.default)({
    address: registry,
    web3
  });
  const policyId = await contract.bindingPolicyFor({
    address: pcase
  });
  const [policy] = await _repo.policy.find({
    _id: policyId
  });
  const roleIndexMap = (0, _findRoleMap.default)(policy.indexToRole);

  if (!roleIndexMap.has(nominatorRole)) {
    throw new Error('No nominator role');
  }

  if (!roleIndexMap.has(nomineeRole)) {
    throw new Error('No nominee role');
  }

  if (!web3.utils.isAddress(nominator)) {
    throw new Error('nominator is not an address');
  }

  if (!web3.utils.isAddress(pcase)) {
    throw new Error('pcase is not an address');
  }

  const bundleId = await contract.bundleFor({
    instance: pcase
  });
  const accessControlAddress = await contract.findRuntimePolicy({
    address: pcase
  }).call();
  debug({
    accessControlAddress
  });

  if (accessControlAddress === '0x0000000000000000000000000000000000000000') {
    throw new Error('Process instance not found');
  }

  debug(`${nominatorRole}[${nominator}] is releasing ${nomineeRole}`);
  debug(`Process Case: ${pcase}`);
  const released = await (0, _createContract.default)(web3)(JSON.parse(policy.accessControlAbi), accessControlAddress).methods.release(roleIndexMap.get(nominatorRole), roleIndexMap.get(nomineeRole), nominator, pcase).send({
    from: nominator,
    gas: 4700000
  });
  debug({
    released
  });
  return {
    id: bundleId,
    address: pcase
  };
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvbXV0YXRpb24vcmVsZWFzZS50cyJdLCJuYW1lcyI6WyJkZWJ1ZyIsInBjYXNlIiwicmVnaXN0cnkiLCJub21pbmF0b3IiLCJub21pbmF0b3JSb2xlIiwibm9taW5lZVJvbGUiLCJ3ZWIzIiwiYWNjb3VudHMiLCJldGgiLCJwZXJzb25hbCIsImdldEFjY291bnRzIiwiY29udHJhY3QiLCJhZGRyZXNzIiwicG9saWN5SWQiLCJiaW5kaW5nUG9saWN5Rm9yIiwicG9saWN5IiwicG9saWN5U2NoZW1hIiwiZmluZCIsIl9pZCIsInJvbGVJbmRleE1hcCIsImluZGV4VG9Sb2xlIiwiaGFzIiwiRXJyb3IiLCJ1dGlscyIsImlzQWRkcmVzcyIsImJ1bmRsZUlkIiwiYnVuZGxlRm9yIiwiaW5zdGFuY2UiLCJhY2Nlc3NDb250cm9sQWRkcmVzcyIsImZpbmRSdW50aW1lUG9saWN5IiwiY2FsbCIsInJlbGVhc2VkIiwiSlNPTiIsInBhcnNlIiwiYWNjZXNzQ29udHJvbEFiaSIsIm1ldGhvZHMiLCJyZWxlYXNlIiwiZ2V0Iiwic2VuZCIsImZyb20iLCJnYXMiLCJpZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUtBOztBQUVBOztBQUNBOzs7O0FBRUEsTUFBTUEsS0FBSyxHQUFHLHFCQUFPLGdDQUFQLENBQWQ7O2VBRWUsT0FBTztBQUNwQkMsRUFBQUEsS0FEb0I7QUFFcEJDLEVBQUFBLFFBRm9CO0FBR3BCQyxFQUFBQSxTQUhvQjtBQUlwQkMsRUFBQUEsYUFKb0I7QUFLcEJDLEVBQUFBLFdBTG9CO0FBTXBCQyxFQUFBQTtBQU5vQixDQUFQLEtBT1E7QUFFckIsUUFBTUMsUUFBUSxHQUFHLE1BQU1ELElBQUksQ0FBQ0UsR0FBTCxDQUFTQyxRQUFULENBQWtCQyxXQUFsQixFQUF2QjtBQUNBLFFBQU1DLFFBQVEsR0FBRyxNQUFNLCtCQUFpQjtBQUN0Q0MsSUFBQUEsT0FBTyxFQUFFVixRQUQ2QjtBQUV0Q0ksSUFBQUE7QUFGc0MsR0FBakIsQ0FBdkI7QUFJQSxRQUFNTyxRQUFRLEdBQUcsTUFBTUYsUUFBUSxDQUM1QkcsZ0JBRG9CLENBQ0g7QUFDaEJGLElBQUFBLE9BQU8sRUFBRVg7QUFETyxHQURHLENBQXZCO0FBSUEsUUFBTSxDQUFDYyxNQUFELElBQVcsTUFBTUMsYUFDbEJDLElBRGtCLENBQ2I7QUFBRUMsSUFBQUEsR0FBRyxFQUFFTDtBQUFQLEdBRGEsQ0FBdkI7QUFFQSxRQUFNTSxZQUFZLEdBQUcsMEJBQVlKLE1BQU0sQ0FBQ0ssV0FBbkIsQ0FBckI7O0FBQ0EsTUFBSSxDQUFDRCxZQUFZLENBQUNFLEdBQWIsQ0FBaUJqQixhQUFqQixDQUFMLEVBQXNDO0FBQ3BDLFVBQU0sSUFBSWtCLEtBQUosQ0FBVSxtQkFBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBSSxDQUFDSCxZQUFZLENBQUNFLEdBQWIsQ0FBaUJoQixXQUFqQixDQUFMLEVBQW9DO0FBQ2xDLFVBQU0sSUFBSWlCLEtBQUosQ0FBVSxpQkFBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBRyxDQUFDaEIsSUFBSSxDQUFDaUIsS0FBTCxDQUFXQyxTQUFYLENBQXFCckIsU0FBckIsQ0FBSixFQUFxQztBQUNuQyxVQUFNLElBQUltQixLQUFKLENBQVUsNkJBQVYsQ0FBTjtBQUNEOztBQUVELE1BQUcsQ0FBQ2hCLElBQUksQ0FBQ2lCLEtBQUwsQ0FBV0MsU0FBWCxDQUFxQnZCLEtBQXJCLENBQUosRUFBaUM7QUFDL0IsVUFBTSxJQUFJcUIsS0FBSixDQUFVLHlCQUFWLENBQU47QUFDRDs7QUFDRCxRQUFNRyxRQUFRLEdBQUcsTUFBTWQsUUFBUSxDQUM1QmUsU0FEb0IsQ0FDVjtBQUNUQyxJQUFBQSxRQUFRLEVBQUUxQjtBQURELEdBRFUsQ0FBdkI7QUFLQSxRQUFNMkIsb0JBQW9CLEdBQUcsTUFBTWpCLFFBQVEsQ0FDeENrQixpQkFEZ0MsQ0FDZDtBQUNqQmpCLElBQUFBLE9BQU8sRUFBRVg7QUFEUSxHQURjLEVBSWhDNkIsSUFKZ0MsRUFBbkM7QUFNQTlCLEVBQUFBLEtBQUssQ0FBQztBQUFFNEIsSUFBQUE7QUFBRixHQUFELENBQUw7O0FBRUEsTUFBSUEsb0JBQW9CLEtBQUssNENBQTdCLEVBQTJFO0FBQ3pFLFVBQU0sSUFBSU4sS0FBSixDQUFVLDRCQUFWLENBQU47QUFDRDs7QUFFRHRCLEVBQUFBLEtBQUssQ0FBRSxHQUFFSSxhQUFjLElBQUdELFNBQVUsa0JBQWlCRSxXQUFZLEVBQTVELENBQUw7QUFDQUwsRUFBQUEsS0FBSyxDQUFFLGlCQUFnQkMsS0FBTSxFQUF4QixDQUFMO0FBRUEsUUFBTThCLFFBQVEsR0FBRyxNQUFNLDZCQUFlekIsSUFBZixFQUFxQjBCLElBQUksQ0FBQ0MsS0FBTCxDQUFXbEIsTUFBTSxDQUFDbUIsZ0JBQWxCLENBQXJCLEVBQTBETixvQkFBMUQsRUFDcEJPLE9BRG9CLENBRXBCQyxPQUZvQixDQUduQmpCLFlBQVksQ0FBQ2tCLEdBQWIsQ0FBaUJqQyxhQUFqQixDQUhtQixFQUluQmUsWUFBWSxDQUFDa0IsR0FBYixDQUFpQmhDLFdBQWpCLENBSm1CLEVBS25CRixTQUxtQixFQU1uQkYsS0FObUIsRUFRcEJxQyxJQVJvQixDQVFmO0FBQ0pDLElBQUFBLElBQUksRUFBRXBDLFNBREY7QUFFSnFDLElBQUFBLEdBQUcsRUFBRTtBQUZELEdBUmUsQ0FBdkI7QUFhQXhDLEVBQUFBLEtBQUssQ0FBQztBQUFFK0IsSUFBQUE7QUFBRixHQUFELENBQUw7QUFDQSxTQUFPO0FBQ0xVLElBQUFBLEVBQUUsRUFBRWhCLFFBREM7QUFFTGIsSUFBQUEsT0FBTyxFQUFFWDtBQUZKLEdBQVA7QUFJRCxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9kZWJ1ZyBmcm9tICdkZWJ1ZydcblxuaW1wb3J0IHtcbiAgcm9sZVRhc2sgYXMgcm9sZVRhc2tTY2hlbWEsXG4gIHBvbGljeSBhcyBwb2xpY3lTY2hlbWEsXG4gIHByb2Nlc3MgYXMgcHJvY2Vzc1NjaGVtYVxufSBmcm9tICcuLi9yZXBvJ1xuaW1wb3J0IHJlZ2lzdHJ5Q29udHJhY3QgZnJvbSAnLi4vdXRpbC9yZWdpc3RyeS1jb250cmFjdCdcbmltcG9ydCBoZXhUb0lkIGZyb20gJy4uL3V0aWwvaGV4LXRvLWlkJ1xuaW1wb3J0IGZpbmRSb2xlTWFwIGZyb20gJy4uL3V0aWwvZmluZC1yb2xlLW1hcCdcbmltcG9ydCBjcmVhdGVDb250cmFjdCBmcm9tICcuLi91dGlsL2NyZWF0ZS1jb250cmFjdCdcblxuY29uc3QgZGVidWcgPSBfZGVidWcoJ2NhdGVycGlsbGFycWw6bXV0YXRpb246cmVsZWFzZScpXG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICh7XG4gIHBjYXNlLFxuICByZWdpc3RyeSxcbiAgbm9taW5hdG9yLFxuICBub21pbmF0b3JSb2xlLFxuICBub21pbmVlUm9sZSxcbiAgd2ViMyxcbn0pOiBQcm9taXNlPG9iamVjdD4gPT4ge1xuICBcbiAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCB3ZWIzLmV0aC5wZXJzb25hbC5nZXRBY2NvdW50cygpXG4gIGNvbnN0IGNvbnRyYWN0ID0gYXdhaXQgcmVnaXN0cnlDb250cmFjdCh7XG4gICAgYWRkcmVzczogcmVnaXN0cnksXG4gICAgd2ViMyxcbiAgfSlcbiAgY29uc3QgcG9saWN5SWQgPSBhd2FpdCBjb250cmFjdFxuICAgIC5iaW5kaW5nUG9saWN5Rm9yKHtcbiAgICAgIGFkZHJlc3M6IHBjYXNlLFxuICAgIH0pXG4gIGNvbnN0IFtwb2xpY3ldID0gYXdhaXQgcG9saWN5U2NoZW1hXG4gICAgICAuZmluZCh7IF9pZDogcG9saWN5SWQgfSlcbiAgY29uc3Qgcm9sZUluZGV4TWFwID0gZmluZFJvbGVNYXAocG9saWN5LmluZGV4VG9Sb2xlKVxuICBpZiAoIXJvbGVJbmRleE1hcC5oYXMobm9taW5hdG9yUm9sZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIG5vbWluYXRvciByb2xlJylcbiAgfVxuICBcbiAgaWYgKCFyb2xlSW5kZXhNYXAuaGFzKG5vbWluZWVSb2xlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gbm9taW5lZSByb2xlJylcbiAgfVxuICBcbiAgaWYoIXdlYjMudXRpbHMuaXNBZGRyZXNzKG5vbWluYXRvcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ25vbWluYXRvciBpcyBub3QgYW4gYWRkcmVzcycpXG4gIH1cbiAgXG4gIGlmKCF3ZWIzLnV0aWxzLmlzQWRkcmVzcyhwY2FzZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3BjYXNlIGlzIG5vdCBhbiBhZGRyZXNzJylcbiAgfVxuICBjb25zdCBidW5kbGVJZCA9IGF3YWl0IGNvbnRyYWN0XG4gICAgLmJ1bmRsZUZvcih7XG4gICAgICBpbnN0YW5jZTogcGNhc2UsXG4gICAgfSlcbiAgXG4gIGNvbnN0IGFjY2Vzc0NvbnRyb2xBZGRyZXNzID0gYXdhaXQgY29udHJhY3RcbiAgICAuZmluZFJ1bnRpbWVQb2xpY3koe1xuICAgICAgYWRkcmVzczogcGNhc2UsXG4gICAgfSlcbiAgICAuY2FsbCgpXG4gIFxuICBkZWJ1Zyh7IGFjY2Vzc0NvbnRyb2xBZGRyZXNzIH0pXG5cbiAgaWYgKGFjY2Vzc0NvbnRyb2xBZGRyZXNzID09PSAnMHgwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwJykge1xuICAgIHRocm93IG5ldyBFcnJvcignUHJvY2VzcyBpbnN0YW5jZSBub3QgZm91bmQnKVxuICB9XG5cbiAgZGVidWcoYCR7bm9taW5hdG9yUm9sZX1bJHtub21pbmF0b3J9XSBpcyByZWxlYXNpbmcgJHtub21pbmVlUm9sZX1gKTtcbiAgZGVidWcoYFByb2Nlc3MgQ2FzZTogJHtwY2FzZX1gKTtcbiAgXG4gIGNvbnN0IHJlbGVhc2VkID0gYXdhaXQgY3JlYXRlQ29udHJhY3Qod2ViMykoSlNPTi5wYXJzZShwb2xpY3kuYWNjZXNzQ29udHJvbEFiaSksIGFjY2Vzc0NvbnRyb2xBZGRyZXNzKVxuICAgIC5tZXRob2RzXG4gICAgLnJlbGVhc2UoXG4gICAgICByb2xlSW5kZXhNYXAuZ2V0KG5vbWluYXRvclJvbGUpLFxuICAgICAgcm9sZUluZGV4TWFwLmdldChub21pbmVlUm9sZSksXG4gICAgICBub21pbmF0b3IsXG4gICAgICBwY2FzZSxcbiAgICApXG4gICAgLnNlbmQoe1xuICAgICAgZnJvbTogbm9taW5hdG9yLFxuICAgICAgZ2FzOiA0NzAwMDAwXG4gICAgfSlcblxuICBkZWJ1Zyh7IHJlbGVhc2VkIH0pXG4gIHJldHVybiB7XG4gICAgaWQ6IGJ1bmRsZUlkLFxuICAgIGFkZHJlc3M6IHBjYXNlXG4gIH1cbn0iXX0=