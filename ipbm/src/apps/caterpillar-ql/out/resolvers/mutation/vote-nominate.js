"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _repo = require("../repo");

var _registryContract = _interopRequireDefault(require("../util/registry-contract"));

var _findRoleMap = _interopRequireDefault(require("../util/find-role-map"));

var _createContract = _interopRequireDefault(require("../util/create-contract"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('caterpillarql:mutation:vote-nominate');

var _default = async ({
  isAccepted,
  pcase,
  registry,
  endorser,
  endorserRole,
  nominatorRole,
  nomineeRole,
  web3
}) => {
  const contract = await (0, _registryContract.default)({
    address: registry,
    web3
  });
  const policyId = await contract.bindingPolicyFor({
    address: pcase
  });
  const [policy] = await _repo.policy.find({
    _id: policyId
  });
  const roleIndexMap = (0, _findRoleMap.default)(policy.indexToRole);

  if (!roleIndexMap.has(nominatorRole)) {
    throw new Error('No nominator role');
  }

  if (!roleIndexMap.has(nomineeRole)) {
    throw new Error('No nominee role');
  }

  if (!roleIndexMap.has(endorserRole)) {
    throw new Error('Noendorser role');
  }

  if (!web3.utils.isAddress(endorser)) {
    throw new Error('endorser is not an address');
  }

  if (!web3.utils.isAddress(pcase)) {
    throw new Error('pcase is not an address');
  }

  const bundleId = await contract.bundleFor({
    instance: pcase
  });
  debug({
    bundleId
  });
  const accessControlAddress = await contract.findRuntimePolicy({
    address: pcase
  });
  debug({
    accessControlAddress
  });

  if (accessControlAddress === '0x0000000000000000000000000000000000000000') {
    throw new Error('Process instance not found');
  }

  const voted = await (0, _createContract.default)(web3)(JSON.parse(policy.accessControlAbi), accessControlAddress).methods.voteN(roleIndexMap.get(nominatorRole), roleIndexMap.get(nomineeRole), roleIndexMap.get(endorserRole), endorser, pcase, isAccepted.toString()).send({
    from: endorser,
    gas: 4700000
  });
  debug({
    voted
  });
  return {
    id: bundleId,
    address: pcase
  };
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvbXV0YXRpb24vdm90ZS1ub21pbmF0ZS50cyJdLCJuYW1lcyI6WyJkZWJ1ZyIsImlzQWNjZXB0ZWQiLCJwY2FzZSIsInJlZ2lzdHJ5IiwiZW5kb3JzZXIiLCJlbmRvcnNlclJvbGUiLCJub21pbmF0b3JSb2xlIiwibm9taW5lZVJvbGUiLCJ3ZWIzIiwiY29udHJhY3QiLCJhZGRyZXNzIiwicG9saWN5SWQiLCJiaW5kaW5nUG9saWN5Rm9yIiwicG9saWN5IiwicG9saWN5U2NoZW1hIiwiZmluZCIsIl9pZCIsInJvbGVJbmRleE1hcCIsImluZGV4VG9Sb2xlIiwiaGFzIiwiRXJyb3IiLCJ1dGlscyIsImlzQWRkcmVzcyIsImJ1bmRsZUlkIiwiYnVuZGxlRm9yIiwiaW5zdGFuY2UiLCJhY2Nlc3NDb250cm9sQWRkcmVzcyIsImZpbmRSdW50aW1lUG9saWN5Iiwidm90ZWQiLCJKU09OIiwicGFyc2UiLCJhY2Nlc3NDb250cm9sQWJpIiwibWV0aG9kcyIsInZvdGVOIiwiZ2V0IiwidG9TdHJpbmciLCJzZW5kIiwiZnJvbSIsImdhcyIsImlkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7O0FBS0E7O0FBRUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUcscUJBQU8sc0NBQVAsQ0FBZDs7ZUFFZSxPQUFPO0FBQ3BCQyxFQUFBQSxVQURvQjtBQUVwQkMsRUFBQUEsS0FGb0I7QUFHcEJDLEVBQUFBLFFBSG9CO0FBSXBCQyxFQUFBQSxRQUpvQjtBQUtwQkMsRUFBQUEsWUFMb0I7QUFNcEJDLEVBQUFBLGFBTm9CO0FBT3BCQyxFQUFBQSxXQVBvQjtBQVFwQkMsRUFBQUE7QUFSb0IsQ0FBUCxLQVNRO0FBRXJCLFFBQU1DLFFBQVEsR0FBRyxNQUFNLCtCQUFpQjtBQUN0Q0MsSUFBQUEsT0FBTyxFQUFFUCxRQUQ2QjtBQUV0Q0ssSUFBQUE7QUFGc0MsR0FBakIsQ0FBdkI7QUFJQSxRQUFNRyxRQUFRLEdBQUcsTUFBTUYsUUFBUSxDQUM1QkcsZ0JBRG9CLENBQ0g7QUFDaEJGLElBQUFBLE9BQU8sRUFBRVI7QUFETyxHQURHLENBQXZCO0FBSUEsUUFBTSxDQUFDVyxNQUFELElBQVcsTUFBTUMsYUFDbEJDLElBRGtCLENBQ2I7QUFBRUMsSUFBQUEsR0FBRyxFQUFFTDtBQUFQLEdBRGEsQ0FBdkI7QUFFQSxRQUFNTSxZQUFZLEdBQUcsMEJBQVlKLE1BQU0sQ0FBQ0ssV0FBbkIsQ0FBckI7O0FBQ0EsTUFBSSxDQUFDRCxZQUFZLENBQUNFLEdBQWIsQ0FBaUJiLGFBQWpCLENBQUwsRUFBc0M7QUFDcEMsVUFBTSxJQUFJYyxLQUFKLENBQVUsbUJBQVYsQ0FBTjtBQUNEOztBQUVELE1BQUksQ0FBQ0gsWUFBWSxDQUFDRSxHQUFiLENBQWlCWixXQUFqQixDQUFMLEVBQW9DO0FBQ2xDLFVBQU0sSUFBSWEsS0FBSixDQUFVLGlCQUFWLENBQU47QUFDRDs7QUFDRCxNQUFJLENBQUNILFlBQVksQ0FBQ0UsR0FBYixDQUFpQmQsWUFBakIsQ0FBTCxFQUFxQztBQUNuQyxVQUFNLElBQUllLEtBQUosQ0FBVSxpQkFBVixDQUFOO0FBQ0Q7O0FBRUQsTUFBRyxDQUFDWixJQUFJLENBQUNhLEtBQUwsQ0FBV0MsU0FBWCxDQUFxQmxCLFFBQXJCLENBQUosRUFBb0M7QUFDbEMsVUFBTSxJQUFJZ0IsS0FBSixDQUFVLDRCQUFWLENBQU47QUFDRDs7QUFFRCxNQUFHLENBQUNaLElBQUksQ0FBQ2EsS0FBTCxDQUFXQyxTQUFYLENBQXFCcEIsS0FBckIsQ0FBSixFQUFpQztBQUMvQixVQUFNLElBQUlrQixLQUFKLENBQVUseUJBQVYsQ0FBTjtBQUNEOztBQUNELFFBQU1HLFFBQVEsR0FBRyxNQUFNZCxRQUFRLENBQzVCZSxTQURvQixDQUNWO0FBQ1RDLElBQUFBLFFBQVEsRUFBRXZCO0FBREQsR0FEVSxDQUF2QjtBQUlBRixFQUFBQSxLQUFLLENBQUM7QUFBRXVCLElBQUFBO0FBQUYsR0FBRCxDQUFMO0FBRUEsUUFBTUcsb0JBQW9CLEdBQUcsTUFBTWpCLFFBQVEsQ0FDeENrQixpQkFEZ0MsQ0FDZDtBQUNqQmpCLElBQUFBLE9BQU8sRUFBRVI7QUFEUSxHQURjLENBQW5DO0FBS0FGLEVBQUFBLEtBQUssQ0FBQztBQUFFMEIsSUFBQUE7QUFBRixHQUFELENBQUw7O0FBRUEsTUFBSUEsb0JBQW9CLEtBQUssNENBQTdCLEVBQTJFO0FBQ3pFLFVBQU0sSUFBSU4sS0FBSixDQUFVLDRCQUFWLENBQU47QUFDRDs7QUFDRCxRQUFNUSxLQUFLLEdBQUcsTUFBTSw2QkFBZXBCLElBQWYsRUFBcUJxQixJQUFJLENBQUNDLEtBQUwsQ0FBV2pCLE1BQU0sQ0FBQ2tCLGdCQUFsQixDQUFyQixFQUEwREwsb0JBQTFELEVBQ2pCTSxPQURpQixDQUVqQkMsS0FGaUIsQ0FHaEJoQixZQUFZLENBQUNpQixHQUFiLENBQWlCNUIsYUFBakIsQ0FIZ0IsRUFJaEJXLFlBQVksQ0FBQ2lCLEdBQWIsQ0FBaUIzQixXQUFqQixDQUpnQixFQUtoQlUsWUFBWSxDQUFDaUIsR0FBYixDQUFpQjdCLFlBQWpCLENBTGdCLEVBTWhCRCxRQU5nQixFQU9oQkYsS0FQZ0IsRUFRaEJELFVBQVUsQ0FBQ2tDLFFBQVgsRUFSZ0IsRUFVakJDLElBVmlCLENBVVo7QUFDSkMsSUFBQUEsSUFBSSxFQUFFakMsUUFERjtBQUVKa0MsSUFBQUEsR0FBRyxFQUFFO0FBRkQsR0FWWSxDQUFwQjtBQWVBdEMsRUFBQUEsS0FBSyxDQUFDO0FBQUU0QixJQUFBQTtBQUFGLEdBQUQsQ0FBTDtBQUNBLFNBQU87QUFDTFcsSUFBQUEsRUFBRSxFQUFFaEIsUUFEQztBQUVMYixJQUFBQSxPQUFPLEVBQUVSO0FBRkosR0FBUDtBQUlELEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2RlYnVnIGZyb20gJ2RlYnVnJ1xuXG5pbXBvcnQge1xuICByb2xlVGFzayBhcyByb2xlVGFza1NjaGVtYSxcbiAgcG9saWN5IGFzIHBvbGljeVNjaGVtYSxcbiAgcHJvY2VzcyBhcyBwcm9jZXNzU2NoZW1hXG59IGZyb20gJy4uL3JlcG8nXG5pbXBvcnQgcmVnaXN0cnlDb250cmFjdCBmcm9tICcuLi91dGlsL3JlZ2lzdHJ5LWNvbnRyYWN0J1xuaW1wb3J0IGhleFRvSWQgZnJvbSAnLi4vdXRpbC9oZXgtdG8taWQnXG5pbXBvcnQgZmluZFJvbGVNYXAgZnJvbSAnLi4vdXRpbC9maW5kLXJvbGUtbWFwJ1xuaW1wb3J0IGNyZWF0ZUNvbnRyYWN0IGZyb20gJy4uL3V0aWwvY3JlYXRlLWNvbnRyYWN0J1xuXG5jb25zdCBkZWJ1ZyA9IF9kZWJ1ZygnY2F0ZXJwaWxsYXJxbDptdXRhdGlvbjp2b3RlLW5vbWluYXRlJylcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKHtcbiAgaXNBY2NlcHRlZCxcbiAgcGNhc2UsXG4gIHJlZ2lzdHJ5LFxuICBlbmRvcnNlcixcbiAgZW5kb3JzZXJSb2xlLFxuICBub21pbmF0b3JSb2xlLFxuICBub21pbmVlUm9sZSxcbiAgd2ViMyxcbn0pOiBQcm9taXNlPG9iamVjdD4gPT4ge1xuICBcbiAgY29uc3QgY29udHJhY3QgPSBhd2FpdCByZWdpc3RyeUNvbnRyYWN0KHtcbiAgICBhZGRyZXNzOiByZWdpc3RyeSxcbiAgICB3ZWIzLFxuICB9KVxuICBjb25zdCBwb2xpY3lJZCA9IGF3YWl0IGNvbnRyYWN0XG4gICAgLmJpbmRpbmdQb2xpY3lGb3Ioe1xuICAgICAgYWRkcmVzczogcGNhc2UsXG4gICAgfSlcbiAgY29uc3QgW3BvbGljeV0gPSBhd2FpdCBwb2xpY3lTY2hlbWFcbiAgICAgIC5maW5kKHsgX2lkOiBwb2xpY3lJZCB9KVxuICBjb25zdCByb2xlSW5kZXhNYXAgPSBmaW5kUm9sZU1hcChwb2xpY3kuaW5kZXhUb1JvbGUpXG4gIGlmICghcm9sZUluZGV4TWFwLmhhcyhub21pbmF0b3JSb2xlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gbm9taW5hdG9yIHJvbGUnKVxuICB9XG4gIFxuICBpZiAoIXJvbGVJbmRleE1hcC5oYXMobm9taW5lZVJvbGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBub21pbmVlIHJvbGUnKVxuICB9XG4gIGlmICghcm9sZUluZGV4TWFwLmhhcyhlbmRvcnNlclJvbGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb2VuZG9yc2VyIHJvbGUnKVxuICB9XG4gIFxuICBpZighd2ViMy51dGlscy5pc0FkZHJlc3MoZW5kb3JzZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdlbmRvcnNlciBpcyBub3QgYW4gYWRkcmVzcycpXG4gIH1cbiAgXG4gIGlmKCF3ZWIzLnV0aWxzLmlzQWRkcmVzcyhwY2FzZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3BjYXNlIGlzIG5vdCBhbiBhZGRyZXNzJylcbiAgfVxuICBjb25zdCBidW5kbGVJZCA9IGF3YWl0IGNvbnRyYWN0XG4gICAgLmJ1bmRsZUZvcih7XG4gICAgICBpbnN0YW5jZTogcGNhc2UsXG4gICAgfSlcbiAgZGVidWcoeyBidW5kbGVJZCB9KVxuICBcbiAgY29uc3QgYWNjZXNzQ29udHJvbEFkZHJlc3MgPSBhd2FpdCBjb250cmFjdFxuICAgIC5maW5kUnVudGltZVBvbGljeSh7XG4gICAgICBhZGRyZXNzOiBwY2FzZSxcbiAgICB9KVxuXG4gIGRlYnVnKHsgYWNjZXNzQ29udHJvbEFkZHJlc3MgfSlcblxuICBpZiAoYWNjZXNzQ29udHJvbEFkZHJlc3MgPT09ICcweDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdQcm9jZXNzIGluc3RhbmNlIG5vdCBmb3VuZCcpXG4gIH1cbiAgY29uc3Qgdm90ZWQgPSBhd2FpdCBjcmVhdGVDb250cmFjdCh3ZWIzKShKU09OLnBhcnNlKHBvbGljeS5hY2Nlc3NDb250cm9sQWJpKSwgYWNjZXNzQ29udHJvbEFkZHJlc3MpXG4gICAgLm1ldGhvZHNcbiAgICAudm90ZU4oXG4gICAgICByb2xlSW5kZXhNYXAuZ2V0KG5vbWluYXRvclJvbGUpLFxuICAgICAgcm9sZUluZGV4TWFwLmdldChub21pbmVlUm9sZSksXG4gICAgICByb2xlSW5kZXhNYXAuZ2V0KGVuZG9yc2VyUm9sZSksXG4gICAgICBlbmRvcnNlcixcbiAgICAgIHBjYXNlLFxuICAgICAgaXNBY2NlcHRlZC50b1N0cmluZygpLFxuICAgIClcbiAgICAuc2VuZCh7XG4gICAgICBmcm9tOiBlbmRvcnNlcixcbiAgICAgIGdhczogNDcwMDAwMFxuICAgIH0pXG5cbiAgZGVidWcoeyB2b3RlZCB9KVxuICByZXR1cm4ge1xuICAgIGlkOiBidW5kbGVJZCxcbiAgICBhZGRyZXNzOiBwY2FzZVxuICB9XG59Il19