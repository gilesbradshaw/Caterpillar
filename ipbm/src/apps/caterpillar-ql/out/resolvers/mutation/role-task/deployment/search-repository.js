"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _repo = require("../../../repo");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('caterpillarql:role-task:search-repository');

let searchRepository = (web3, registryContract, procId, policyId, roleIndexMap) => _repo.process.find({
  _id: procId
}).then(([repoData] = []) => repoData && !console.log('i', repoData.indexToElement) && Promise.all(repoData.indexToElement.map((element, index) => ({
  element,
  index
})).filter(({
  element
}) => element && element.type === 'Separate-Instance').map(({
  index
}) => registryContract.childrenFor({
  id: web3.utils.fromAscii(procId.toString()),
  index
}).then(instanceProcId => searchRepository(web3, registryContract, instanceProcId, policyId, roleIndexMap)))).then(separateInstances => ({
  procId,
  rootProcessName: repoData.rootProcessName,
  rootProcessId: repoData.rootProcessId,
  separateInstances,
  workItems: repoData.indexToElement.map((element, index) => ({
    element,
    index
  })).filter(({
    element
  }) => element && element.type === 'Workitem').map(({
    index,
    element
  }) => ({
    element,
    taskIndex: index,
    roleIndex: roleIndexMap.get(element.role)
  }))
})));

var _default = searchRepository;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvbXV0YXRpb24vcm9sZS10YXNrL2RlcGxveW1lbnQvc2VhcmNoLXJlcG9zaXRvcnkudHMiXSwibmFtZXMiOlsiZGVidWciLCJzZWFyY2hSZXBvc2l0b3J5Iiwid2ViMyIsInJlZ2lzdHJ5Q29udHJhY3QiLCJwcm9jSWQiLCJwb2xpY3lJZCIsInJvbGVJbmRleE1hcCIsInByb2Nlc3MiLCJmaW5kIiwiX2lkIiwidGhlbiIsInJlcG9EYXRhIiwiY29uc29sZSIsImxvZyIsImluZGV4VG9FbGVtZW50IiwiUHJvbWlzZSIsImFsbCIsIm1hcCIsImVsZW1lbnQiLCJpbmRleCIsImZpbHRlciIsInR5cGUiLCJjaGlsZHJlbkZvciIsImlkIiwidXRpbHMiLCJmcm9tQXNjaWkiLCJ0b1N0cmluZyIsImluc3RhbmNlUHJvY0lkIiwic2VwYXJhdGVJbnN0YW5jZXMiLCJyb290UHJvY2Vzc05hbWUiLCJyb290UHJvY2Vzc0lkIiwid29ya0l0ZW1zIiwidGFza0luZGV4Iiwicm9sZUluZGV4IiwiZ2V0Iiwicm9sZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBR0EsTUFBTUEsS0FBSyxHQUFHLHFCQUFPLDJDQUFQLENBQWQ7O0FBRUEsSUFBSUMsZ0JBQWdCLEdBQUcsQ0FDckJDLElBRHFCLEVBRXJCQyxnQkFGcUIsRUFHckJDLE1BSHFCLEVBSXJCQyxRQUpxQixFQUtyQkMsWUFMcUIsS0FPckJDLGNBQ0dDLElBREgsQ0FDUTtBQUFFQyxFQUFBQSxHQUFHLEVBQUVMO0FBQVAsQ0FEUixFQUVHTSxJQUZILENBR0ksQ0FBQyxDQUFDQyxRQUFELElBQWEsRUFBZCxLQUNFQSxRQUFRLElBQ04sQ0FBQ0MsT0FBTyxDQUFDQyxHQUFSLENBQVksR0FBWixFQUFpQkYsUUFBUSxDQUFDRyxjQUExQixDQURILElBRUVDLE9BQU8sQ0FBQ0MsR0FBUixDQUNFTCxRQUFRLENBQ0xHLGNBREgsQ0FFR0csR0FGSCxDQUdJLENBQ0VDLE9BREYsRUFFRUMsS0FGRixNQUdNO0FBQ0pELEVBQUFBLE9BREk7QUFFSkMsRUFBQUE7QUFGSSxDQUhOLENBSEosRUFXR0MsTUFYSCxDQVlJLENBQUM7QUFBRUYsRUFBQUE7QUFBRixDQUFELEtBQ0VBLE9BQU8sSUFBSUEsT0FBTyxDQUFDRyxJQUFSLEtBQWlCLG1CQWJsQyxFQWVHSixHQWZILENBZ0JJLENBQUM7QUFDQ0UsRUFBQUE7QUFERCxDQUFELEtBR0VoQixnQkFBZ0IsQ0FDYm1CLFdBREgsQ0FDZTtBQUNYQyxFQUFBQSxFQUFFLEVBQUVyQixJQUFJLENBQUNzQixLQUFMLENBQVdDLFNBQVgsQ0FBcUJyQixNQUFNLENBQUNzQixRQUFQLEVBQXJCLENBRE87QUFFWFAsRUFBQUE7QUFGVyxDQURmLEVBS0dULElBTEgsQ0FNSWlCLGNBQWMsSUFDWjFCLGdCQUFnQixDQUNkQyxJQURjLEVBRWRDLGdCQUZjLEVBR2R3QixjQUhjLEVBSWR0QixRQUpjLEVBS2RDLFlBTGMsQ0FQdEIsQ0FuQk4sQ0FERixFQXFDR0ksSUFyQ0gsQ0FzQ0lrQixpQkFBaUIsS0FBSztBQUNwQnhCLEVBQUFBLE1BRG9CO0FBRXBCeUIsRUFBQUEsZUFBZSxFQUFFbEIsUUFBUSxDQUFDa0IsZUFGTjtBQUdwQkMsRUFBQUEsYUFBYSxFQUFFbkIsUUFBUSxDQUFDbUIsYUFISjtBQUlwQkYsRUFBQUEsaUJBSm9CO0FBS3BCRyxFQUFBQSxTQUFTLEVBQUVwQixRQUFRLENBQ2hCRyxjQURRLENBRVJHLEdBRlEsQ0FHUCxDQUNFQyxPQURGLEVBRUVDLEtBRkYsTUFHTTtBQUNKRCxJQUFBQSxPQURJO0FBRUpDLElBQUFBO0FBRkksR0FITixDQUhPLEVBV1JDLE1BWFEsQ0FZUCxDQUFDO0FBQUVGLElBQUFBO0FBQUYsR0FBRCxLQUNBQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ0csSUFBUixLQUFpQixVQWJyQixFQWVSSixHQWZRLENBZ0JQLENBQUM7QUFDQ0UsSUFBQUEsS0FERDtBQUVDRCxJQUFBQTtBQUZELEdBQUQsTUFHTztBQUNMQSxJQUFBQSxPQURLO0FBRUxjLElBQUFBLFNBQVMsRUFBRWIsS0FGTjtBQUdMYyxJQUFBQSxTQUFTLEVBQUUzQixZQUFZLENBQUM0QixHQUFiLENBQWlCaEIsT0FBTyxDQUFDaUIsSUFBekI7QUFITixHQUhQLENBaEJPO0FBTFMsQ0FBTCxDQXRDckIsQ0FOUixDQVBGOztlQXFGZWxDLGdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9kZWJ1ZyBmcm9tICdkZWJ1ZydcbmltcG9ydCB7IHByb2Nlc3MgfSBmcm9tICcuLi8uLi8uLi9yZXBvJ1xuaW1wb3J0IGhleFRvSWQgZnJvbSAnLi4vLi4vLi4vdXRpbC9oZXgtdG8taWQnXG5cbmNvbnN0IGRlYnVnID0gX2RlYnVnKCdjYXRlcnBpbGxhcnFsOnJvbGUtdGFzazpzZWFyY2gtcmVwb3NpdG9yeScpXG5cbmxldCBzZWFyY2hSZXBvc2l0b3J5ID0gKFxuICB3ZWIzLFxuICByZWdpc3RyeUNvbnRyYWN0OiBpbXBvcnQoJ2NhdGVycGlsbGFyLWxpYicpLlJlZ2lzdHJ5Q29udHJhY3QsXG4gIHByb2NJZCxcbiAgcG9saWN5SWQsXG4gIHJvbGVJbmRleE1hcFxuKTogUHJvbWlzZTxhbnk+ID0+XG4gIHByb2Nlc3NcbiAgICAuZmluZCh7IF9pZDogcHJvY0lkIH0pXG4gICAgLnRoZW4oXG4gICAgICAoW3JlcG9EYXRhXSA9IFtdKSA9PlxuICAgICAgICByZXBvRGF0YSAmJlxuICAgICAgICAgICFjb25zb2xlLmxvZygnaScsIHJlcG9EYXRhLmluZGV4VG9FbGVtZW50KSAmJlxuICAgICAgICAgIFByb21pc2UuYWxsKFxuICAgICAgICAgICAgcmVwb0RhdGFcbiAgICAgICAgICAgICAgLmluZGV4VG9FbGVtZW50XG4gICAgICAgICAgICAgIC5tYXAoXG4gICAgICAgICAgICAgICAgKFxuICAgICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICkgPT4gKHtcbiAgICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIC5maWx0ZXIoXG4gICAgICAgICAgICAgICAgKHsgZWxlbWVudCB9KSA9PlxuICAgICAgICAgICAgICAgICAgZWxlbWVudCAmJiBlbGVtZW50LnR5cGUgPT09ICdTZXBhcmF0ZS1JbnN0YW5jZSdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICB9KSA9PlxuICAgICAgICAgICAgICAgICAgcmVnaXN0cnlDb250cmFjdFxuICAgICAgICAgICAgICAgICAgICAuY2hpbGRyZW5Gb3Ioe1xuICAgICAgICAgICAgICAgICAgICAgIGlkOiB3ZWIzLnV0aWxzLmZyb21Bc2NpaShwcm9jSWQudG9TdHJpbmcoKSksXG4gICAgICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlUHJvY0lkID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWFyY2hSZXBvc2l0b3J5KFxuICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWIzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZWdpc3RyeUNvbnRyYWN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZVByb2NJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcG9saWN5SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVJbmRleE1hcCxcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAgIHNlcGFyYXRlSW5zdGFuY2VzID0+ICh7XG4gICAgICAgICAgICAgICAgcHJvY0lkLFxuICAgICAgICAgICAgICAgIHJvb3RQcm9jZXNzTmFtZTogcmVwb0RhdGEucm9vdFByb2Nlc3NOYW1lLFxuICAgICAgICAgICAgICAgIHJvb3RQcm9jZXNzSWQ6IHJlcG9EYXRhLnJvb3RQcm9jZXNzSWQsXG4gICAgICAgICAgICAgICAgc2VwYXJhdGVJbnN0YW5jZXMsXG4gICAgICAgICAgICAgICAgd29ya0l0ZW1zOiByZXBvRGF0YVxuICAgICAgICAgICAgICAgICAgLmluZGV4VG9FbGVtZW50XG4gICAgICAgICAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgICAgICAgICAoXG4gICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgKSA9PiAoe1xuICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAoeyBlbGVtZW50IH0pID0+XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQgJiYgZWxlbWVudC50eXBlID09PSAnV29ya2l0ZW0nXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgICAgICAgICAoe1xuICAgICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICAgICAgICAgIH0pID0+ICh7XG4gICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICB0YXNrSW5kZXg6IGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgIHJvbGVJbmRleDogcm9sZUluZGV4TWFwLmdldChlbGVtZW50LnJvbGUpXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgIClcblxuZXhwb3J0IGRlZmF1bHQgc2VhcmNoUmVwb3NpdG9yeSJdfQ==