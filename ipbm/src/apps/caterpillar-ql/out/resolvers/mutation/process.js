"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _repo = require("../repo");

var _registryContract = _interopRequireDefault(require("../util/registry-contract"));

var _findRoleMap = _interopRequireDefault(require("../util/find-role-map"));

var _createContract = _interopRequireDefault(require("../util/create-contract"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('caterpillarql:mutation:process');

var _default = async ({
  creator,
  creatorRole,
  modelId,
  registry,
  web3
}) => {
  if (!web3.utils.isAddress(creator)) {
    throw new Error('Case creator is not a valid address');
  }

  const accounts = await web3.eth.personal.getAccounts();
  const contract = await (0, _registryContract.default)({
    address: registry,
    web3
  });
  const roleTaskId = await contract.taskRoleMapFromId({
    procId: web3.utils.fromAscii(modelId)
  });
  const [roleTask] = await _repo.roleTask.find({
    _id: roleTaskId
  });
  const policyId = await contract.bindingPolicyFromId({
    procId: web3.utils.fromAscii(modelId)
  });
  const [policy] = await _repo.policy.find({
    _id: policyId
  });
  const roleIndexMap = (0, _findRoleMap.default)(policy.indexToRole);

  if (!roleIndexMap.has(creatorRole)) {
    throw new Error('Case Creator Role NOT found');
  }

  const [model] = await _repo.process.find({
    _id: modelId
  });
  const accessControlContract = (0, _createContract.default)(web3)(JSON.parse(policy.accessControlAbi));
  const created = await accessControlContract.deploy({
    arguments: [registry, policy.address, roleTask.address],
    data: "0x" + policy.accessControlBytecode
  }).send({
    from: creator,
    gas: 4700000
  });
  console.log('access control contract created', created.address);
  const instance = await contract.newBundleInstanceFor({
    bundleId: web3.utils.fromAscii(model._id.toString()),
    parent: '0x0000000000000000000000000000000000000000',
    policyOpAddr: created.address
  })({
    from: creator,
    //accounts[0],
    gas: 4500000
  });
  debug({
    instance
  });
  const result = await new Promise((resolve, reject) => {
    const event = contract.events.NewInstanceCreatedFor({
      fromBlock: instance.blockNumber
    }).on('data', e => {
      if (e.transactionHash === instance.transactionHash) {
        event.removeListener('data');
        event.removeListener('error');
        resolve(e);
      }
    }).on('error', e => {
      event.removeListener('data');
      event.removeListener('error');
      reject(e);
    });
  });
  console.log('got to nominated..', creatorRole, roleIndexMap.get(creatorRole), creator, result.returnValues.processAddress.toString());
  const nominated = await created.methods.nominateCaseCreator(roleIndexMap.get(creatorRole), creator, result.returnValues.processAddress.toString()).send({
    from: creator,
    gas: 4700000
  });
  return {
    id: modelId,
    address: result.returnValues.processAddress,
    name: model.rootProcessName,
    bpmnModel: model.bpmnModel,
    registryContract: contract
  };
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,