"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _registerFactory = _interopRequireDefault(require("./register-factory"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('caterpillarql:model:create-parent-to-child-relation');

const createParent2ChildRelation = (web3, registryContract, currentIndex, sortedElements, outputContracts, modelInfo) => {
  return web3.eth.personal.getAccounts().then(accounts => registryContract.addChildBundleId({
    parentBundleId: web3.utils.fromAscii(sortedElements[currentIndex].bundleParent),
    processBundleId: web3.utils.fromAscii(sortedElements[currentIndex].bundleId),
    nodeIndex: sortedElements[currentIndex].nodeIndex
  })({
    from: accounts[0],
    gas: 4700000
  }) // @ts-ignore
  .then(result => {
    if (currentIndex + 1 < sortedElements.length) {
      return createParent2ChildRelation(web3, registryContract, currentIndex + 1, sortedElements, outputContracts, modelInfo);
    } else {
      debug('....................................................................');
      let removedCallActivities = [];
      sortedElements.forEach(element => {
        if (modelInfo.controlFlowInfoMap.has(element.nodeId) || modelInfo.globalNodeMap.get(element.nodeId).$type === 'bpmn:StartEvent') {
          removedCallActivities.push(element);
        }
      });

      if (removedCallActivities.length > 0) {
        debug('DEPLOYING FACTORIES AND UPDATING PROCESS-FACTORY RELATION IN REGISTRY ...');
        return (0, _registerFactory.default)(web3, registryContract, 0, removedCallActivities, outputContracts, modelInfo);
      }
    }
  }));
};

var _default = createParent2ChildRelation;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvbXV0YXRpb24vbW9kZWwvZGVwbG95bWVudC9jcmVhdGUtcGFyZW50LXRvLWNoaWxkLXJlbGF0aW9uLnRzIl0sIm5hbWVzIjpbImRlYnVnIiwiY3JlYXRlUGFyZW50MkNoaWxkUmVsYXRpb24iLCJ3ZWIzIiwicmVnaXN0cnlDb250cmFjdCIsImN1cnJlbnRJbmRleCIsInNvcnRlZEVsZW1lbnRzIiwib3V0cHV0Q29udHJhY3RzIiwibW9kZWxJbmZvIiwiZXRoIiwicGVyc29uYWwiLCJnZXRBY2NvdW50cyIsInRoZW4iLCJhY2NvdW50cyIsImFkZENoaWxkQnVuZGxlSWQiLCJwYXJlbnRCdW5kbGVJZCIsInV0aWxzIiwiZnJvbUFzY2lpIiwiYnVuZGxlUGFyZW50IiwicHJvY2Vzc0J1bmRsZUlkIiwiYnVuZGxlSWQiLCJub2RlSW5kZXgiLCJmcm9tIiwiZ2FzIiwib24iLCJyZXN1bHQiLCJsZW5ndGgiLCJyZW1vdmVkQ2FsbEFjdGl2aXRpZXMiLCJmb3JFYWNoIiwiZWxlbWVudCIsImNvbnRyb2xGbG93SW5mb01hcCIsImhhcyIsIm5vZGVJZCIsImdsb2JhbE5vZGVNYXAiLCJnZXQiLCIkdHlwZSIsInB1c2giXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7OztBQUVBLE1BQU1BLEtBQUssR0FBRyxxQkFBTyxxREFBUCxDQUFkOztBQUVBLE1BQU1DLDBCQUEwQixHQUFHLENBQ2pDQyxJQURpQyxFQUVqQ0MsZ0JBRmlDLEVBR2pDQyxZQUhpQyxFQUlqQ0MsY0FKaUMsRUFLakNDLGVBTGlDLEVBTWpDQyxTQU5pQyxLQU85QjtBQUNILFNBQU9MLElBQUksQ0FBQ00sR0FBTCxDQUFTQyxRQUFULENBQWtCQyxXQUFsQixHQUNKQyxJQURJLENBRUhDLFFBQVEsSUFDTlQsZ0JBQWdCLENBQ2JVLGdCQURILENBQ29CO0FBQ2hCQyxJQUFBQSxjQUFjLEVBQUVaLElBQUksQ0FBQ2EsS0FBTCxDQUFXQyxTQUFYLENBQXFCWCxjQUFjLENBQUNELFlBQUQsQ0FBZCxDQUE2QmEsWUFBbEQsQ0FEQTtBQUVoQkMsSUFBQUEsZUFBZSxFQUFFaEIsSUFBSSxDQUFDYSxLQUFMLENBQVdDLFNBQVgsQ0FBcUJYLGNBQWMsQ0FBQ0QsWUFBRCxDQUFkLENBQTZCZSxRQUFsRCxDQUZEO0FBR2hCQyxJQUFBQSxTQUFTLEVBQUVmLGNBQWMsQ0FBQ0QsWUFBRCxDQUFkLENBQTZCZ0I7QUFIeEIsR0FEcEIsRUFPSTtBQUNFQyxJQUFBQSxJQUFJLEVBQUVULFFBQVEsQ0FBQyxDQUFELENBRGhCO0FBRUVVLElBQUFBLEdBQUcsRUFBRTtBQUZQLEdBUEosRUFZRTtBQVpGLEdBYUdDLEVBYkgsQ0FjSSxTQWRKLEVBZ0JNQyxNQURGLElBRVc7QUFDVHhCLElBQUFBLEtBQUssQ0FBQztBQUFFd0IsTUFBQUE7QUFBRixLQUFELENBQUw7QUFDRCxHQW5CTCxFQXFCR2IsSUFyQkgsQ0FzQkthLE1BQUQsSUFBWTtBQUNWLFFBQUlwQixZQUFZLEdBQUcsQ0FBZixHQUFtQkMsY0FBYyxDQUFDb0IsTUFBdEMsRUFBOEM7QUFDNUMsYUFBT3hCLDBCQUEwQixDQUFDQyxJQUFELEVBQU9DLGdCQUFQLEVBQXlCQyxZQUFZLEdBQUcsQ0FBeEMsRUFBMkNDLGNBQTNDLEVBQTJEQyxlQUEzRCxFQUE0RUMsU0FBNUUsQ0FBakM7QUFDRCxLQUZELE1BRU87QUFDTFAsTUFBQUEsS0FBSyxDQUFDLHNFQUFELENBQUw7QUFDQSxVQUFJMEIscUJBQXFCLEdBQUcsRUFBNUI7QUFDQXJCLE1BQUFBLGNBQWMsQ0FBQ3NCLE9BQWYsQ0FBdUJDLE9BQU8sSUFBSTtBQUNoQyxZQUFJckIsU0FBUyxDQUFDc0Isa0JBQVYsQ0FBNkJDLEdBQTdCLENBQWlDRixPQUFPLENBQUNHLE1BQXpDLEtBQW9EeEIsU0FBUyxDQUFDeUIsYUFBVixDQUF3QkMsR0FBeEIsQ0FBNEJMLE9BQU8sQ0FBQ0csTUFBcEMsRUFBNENHLEtBQTVDLEtBQXNELGlCQUE5RyxFQUFpSTtBQUMvSFIsVUFBQUEscUJBQXFCLENBQUNTLElBQXRCLENBQTJCUCxPQUEzQjtBQUNEO0FBQ0YsT0FKRDs7QUFLQSxVQUFJRixxQkFBcUIsQ0FBQ0QsTUFBdEIsR0FBK0IsQ0FBbkMsRUFBc0M7QUFDcEN6QixRQUFBQSxLQUFLLENBQUMsMkVBQUQsQ0FBTDtBQUNBLGVBQU8sOEJBQWdCRSxJQUFoQixFQUFzQkMsZ0JBQXRCLEVBQXdDLENBQXhDLEVBQTJDdUIscUJBQTNDLEVBQWtFcEIsZUFBbEUsRUFBbUZDLFNBQW5GLENBQVA7QUFDRDtBQUNGO0FBQ0YsR0F0Q0wsQ0FIQyxDQUFQO0FBNENELENBcEREOztlQXNEZU4sMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX2RlYnVnIGZyb20gJ2RlYnVnJ1xuXG5pbXBvcnQgcmVnaXN0ZXJGYWN0b3J5IGZyb20gJy4vcmVnaXN0ZXItZmFjdG9yeSdcblxuY29uc3QgZGVidWcgPSBfZGVidWcoJ2NhdGVycGlsbGFycWw6bW9kZWw6Y3JlYXRlLXBhcmVudC10by1jaGlsZC1yZWxhdGlvbicpXG5cbmNvbnN0IGNyZWF0ZVBhcmVudDJDaGlsZFJlbGF0aW9uID0gKFxuICB3ZWIzLFxuICByZWdpc3RyeUNvbnRyYWN0OiBpbXBvcnQoJ2NhdGVycGlsbGFyLWxpYicpLlJlZ2lzdHJ5Q29udHJhY3QsXG4gIGN1cnJlbnRJbmRleCxcbiAgc29ydGVkRWxlbWVudHMsXG4gIG91dHB1dENvbnRyYWN0cyxcbiAgbW9kZWxJbmZvLFxuKSA9PiB7XG4gIHJldHVybiB3ZWIzLmV0aC5wZXJzb25hbC5nZXRBY2NvdW50cygpXG4gICAgLnRoZW4oXG4gICAgICBhY2NvdW50cyA9PlxuICAgICAgICByZWdpc3RyeUNvbnRyYWN0XG4gICAgICAgICAgLmFkZENoaWxkQnVuZGxlSWQoe1xuICAgICAgICAgICAgcGFyZW50QnVuZGxlSWQ6IHdlYjMudXRpbHMuZnJvbUFzY2lpKHNvcnRlZEVsZW1lbnRzW2N1cnJlbnRJbmRleF0uYnVuZGxlUGFyZW50KSxcbiAgICAgICAgICAgIHByb2Nlc3NCdW5kbGVJZDogd2ViMy51dGlscy5mcm9tQXNjaWkoc29ydGVkRWxlbWVudHNbY3VycmVudEluZGV4XS5idW5kbGVJZCksXG4gICAgICAgICAgICBub2RlSW5kZXg6IHNvcnRlZEVsZW1lbnRzW2N1cnJlbnRJbmRleF0ubm9kZUluZGV4LFxuICAgICAgICAgIH0pXG4gICAgICAgICAgKFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBmcm9tOiBhY2NvdW50c1swXSxcbiAgICAgICAgICAgICAgZ2FzOiA0NzAwMDAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIClcbiAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgLm9uKFxuICAgICAgICAgICAgJ3JlY2VpcHQnLFxuICAgICAgICAgICAgKFxuICAgICAgICAgICAgICByZXN1bHQ6IGFueSxcbiAgICAgICAgICAgICk6IHZvaWQgPT4ge1xuICAgICAgICAgICAgICBkZWJ1Zyh7IHJlc3VsdCB9KVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICApXG4gICAgICAgICAgLnRoZW4oXG4gICAgICAgICAgICAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChjdXJyZW50SW5kZXggKyAxIDwgc29ydGVkRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBhcmVudDJDaGlsZFJlbGF0aW9uKHdlYjMsIHJlZ2lzdHJ5Q29udHJhY3QsIGN1cnJlbnRJbmRleCArIDEsIHNvcnRlZEVsZW1lbnRzLCBvdXRwdXRDb250cmFjdHMsIG1vZGVsSW5mbyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVidWcoJy4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uLi4uJyk7XG4gICAgICAgICAgICAgICAgbGV0IHJlbW92ZWRDYWxsQWN0aXZpdGllcyA9IFtdO1xuICAgICAgICAgICAgICAgIHNvcnRlZEVsZW1lbnRzLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgICAgICAgICAgICBpZiAobW9kZWxJbmZvLmNvbnRyb2xGbG93SW5mb01hcC5oYXMoZWxlbWVudC5ub2RlSWQpIHx8IG1vZGVsSW5mby5nbG9iYWxOb2RlTWFwLmdldChlbGVtZW50Lm5vZGVJZCkuJHR5cGUgPT09ICdicG1uOlN0YXJ0RXZlbnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZWRDYWxsQWN0aXZpdGllcy5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmVkQ2FsbEFjdGl2aXRpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgZGVidWcoJ0RFUExPWUlORyBGQUNUT1JJRVMgQU5EIFVQREFUSU5HIFBST0NFU1MtRkFDVE9SWSBSRUxBVElPTiBJTiBSRUdJU1RSWSAuLi4nKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiByZWdpc3RlckZhY3Rvcnkod2ViMywgcmVnaXN0cnlDb250cmFjdCwgMCwgcmVtb3ZlZENhbGxBY3Rpdml0aWVzLCBvdXRwdXRDb250cmFjdHMsIG1vZGVsSW5mbyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKVxuICAgICAgICApXG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVQYXJlbnQyQ2hpbGRSZWxhdGlvblxuIl19