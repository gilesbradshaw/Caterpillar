"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _debug2 = _interopRequireDefault(require("debug"));

var _repo = require("../repo");

var _registryContract = _interopRequireDefault(require("../util/registry-contract"));

var _findRoleMap = _interopRequireDefault(require("../util/find-role-map"));

var _createContract = _interopRequireDefault(require("../util/create-contract"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('caterpillarql:mutation:nominate');

var _default = async ({
  pcase,
  registry,
  nominator,
  nominatorRole,
  nominee,
  nomineeRole,
  web3
}) => {
  const accounts = await web3.eth.personal.getAccounts();
  const contract = await (0, _registryContract.default)({
    address: registry,
    web3
  });
  const policyId = await contract.bindingPolicyFor({
    address: pcase
  });
  const [policy] = await _repo.policy.find({
    _id: policyId
  });
  const roleIndexMap = (0, _findRoleMap.default)(policy.indexToRole);

  if (!roleIndexMap.has(nominatorRole)) {
    throw new Error('No nominator role');
  }

  if (!roleIndexMap.has(nomineeRole)) {
    throw new Error('No nominee role');
  }

  if (!web3.utils.isAddress(nominator)) {
    throw new Error('nominator is not an address');
  }

  if (!web3.utils.isAddress(nominee)) {
    throw new Error('nominee is not an address');
  }

  if (!web3.utils.isAddress(pcase)) {
    throw new Error('pcase is not an address');
  }

  const bundleId = await contract.bundleFor({
    instance: pcase
  });
  const accessControlAddress = await contract.findRuntimePolicy({
    address: pcase
  });
  debug({
    accessControlAddress
  });

  if (accessControlAddress === '0x0000000000000000000000000000000000000000') {
    throw new Error('Process instance not found');
  }

  debug(`${nominatorRole}[${nominator}] is nominating ${nomineeRole}[${nominee}]`);
  debug(`Process Case: ${pcase}`);
  const nominated = await (0, _createContract.default)(web3)(JSON.parse(policy.accessControlAbi), accessControlAddress).methods.nominate(roleIndexMap.get(nominatorRole), roleIndexMap.get(nomineeRole), nominator, nominee, pcase).send({
    from: nominator,
    gas: 4700000
  });
  debug({
    nominated
  });
  return {
    id: bundleId,
    address: pcase,
    registryContract: contract
  };
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2FwcC9yZXNvbHZlcnMvbXV0YXRpb24vbm9taW5hdGUudHMiXSwibmFtZXMiOlsiZGVidWciLCJwY2FzZSIsInJlZ2lzdHJ5Iiwibm9taW5hdG9yIiwibm9taW5hdG9yUm9sZSIsIm5vbWluZWUiLCJub21pbmVlUm9sZSIsIndlYjMiLCJhY2NvdW50cyIsImV0aCIsInBlcnNvbmFsIiwiZ2V0QWNjb3VudHMiLCJjb250cmFjdCIsImFkZHJlc3MiLCJwb2xpY3lJZCIsImJpbmRpbmdQb2xpY3lGb3IiLCJwb2xpY3kiLCJwb2xpY3lTY2hlbWEiLCJmaW5kIiwiX2lkIiwicm9sZUluZGV4TWFwIiwiaW5kZXhUb1JvbGUiLCJoYXMiLCJFcnJvciIsInV0aWxzIiwiaXNBZGRyZXNzIiwiYnVuZGxlSWQiLCJidW5kbGVGb3IiLCJpbnN0YW5jZSIsImFjY2Vzc0NvbnRyb2xBZGRyZXNzIiwiZmluZFJ1bnRpbWVQb2xpY3kiLCJub21pbmF0ZWQiLCJKU09OIiwicGFyc2UiLCJhY2Nlc3NDb250cm9sQWJpIiwibWV0aG9kcyIsIm5vbWluYXRlIiwiZ2V0Iiwic2VuZCIsImZyb20iLCJnYXMiLCJpZCIsInJlZ2lzdHJ5Q29udHJhY3QiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQTs7QUFLQTs7QUFFQTs7QUFDQTs7OztBQUVBLE1BQU1BLEtBQUssR0FBRyxxQkFBTyxpQ0FBUCxDQUFkOztlQUVlLE9BQU87QUFDcEJDLEVBQUFBLEtBRG9CO0FBRXBCQyxFQUFBQSxRQUZvQjtBQUdwQkMsRUFBQUEsU0FIb0I7QUFJcEJDLEVBQUFBLGFBSm9CO0FBS3BCQyxFQUFBQSxPQUxvQjtBQU1wQkMsRUFBQUEsV0FOb0I7QUFPcEJDLEVBQUFBO0FBUG9CLENBQVAsS0FRUTtBQUVyQixRQUFNQyxRQUFRLEdBQUcsTUFBTUQsSUFBSSxDQUFDRSxHQUFMLENBQVNDLFFBQVQsQ0FBa0JDLFdBQWxCLEVBQXZCO0FBQ0EsUUFBTUMsUUFBUSxHQUFHLE1BQU0sK0JB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S0QsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfZGVidWcgZnJvbSAnZGVidWcnXG5cbmltcG9ydCB7XG4gIHJvbGVUYXNrIGFzIHJvbGVUYXNrU2NoZW1hLFxuICBwb2xpY3kgYXMgcG9saWN5U2NoZW1hLFxuICBwcm9jZXNzIGFzIHByb2Nlc3NTY2hlbWFcbn0gZnJvbSAnLi4vcmVwbydcbmltcG9ydCByZWdpc3RyeUNvbnRyYWN0IGZyb20gJy4uL3V0aWwvcmVnaXN0cnktY29udHJhY3QnXG5pbXBvcnQgaGV4VG9JZCBmcm9tICcuLi91dGlsL2hleC10by1pZCdcbmltcG9ydCBmaW5kUm9sZU1hcCBmcm9tICcuLi91dGlsL2ZpbmQtcm9sZS1tYXAnXG5pbXBvcnQgY3JlYXRlQ29udHJhY3QgZnJvbSAnLi4vdXRpbC9jcmVhdGUtY29udHJhY3QnXG5cbmNvbnN0IGRlYnVnID0gX2RlYnVnKCdjYXRlcnBpbGxhcnFsOm11dGF0aW9uOm5vbWluYXRlJylcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKHtcbiAgcGNhc2UsXG4gIHJlZ2lzdHJ5LFxuICBub21pbmF0b3IsXG4gIG5vbWluYXRvclJvbGUsXG4gIG5vbWluZWUsXG4gIG5vbWluZWVSb2xlLFxuICB3ZWIzLFxufSk6IFByb21pc2U8b2JqZWN0PiA9PiB7XG4gIFxuICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IHdlYjMuZXRoLnBlcnNvbmFsLmdldEFjY291bnRzKClcbiAgY29uc3QgY29udHJhY3QgPSBhd2FpdCByZWdpc3RyeUNvbnRyYWN0KHtcbiAgICBhZGRyZXNzOiByZWdpc3RyeSxcbiAgICB3ZWIzLFxuICB9KVxuICBjb25zdCBwb2xpY3lJZCA9IGF3YWl0IGNvbnRyYWN0XG4gICAgLmJpbmRpbmdQb2xpY3lGb3Ioe1xuICAgICAgYWRkcmVzczogcGNhc2UsXG4gICAgfSlcbiAgY29uc3QgW3BvbGljeV0gPSBhd2FpdCBwb2xpY3lTY2hlbWFcbiAgICAgIC5maW5kKHsgX2lkOiBwb2xpY3lJZCB9KVxuICBjb25zdCByb2xlSW5kZXhNYXAgPSBmaW5kUm9sZU1hcChwb2xpY3kuaW5kZXhUb1JvbGUpXG4gIGlmICghcm9sZUluZGV4TWFwLmhhcyhub21pbmF0b3JSb2xlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignTm8gbm9taW5hdG9yIHJvbGUnKVxuICB9XG4gIFxuICBpZiAoIXJvbGVJbmRleE1hcC5oYXMobm9taW5lZVJvbGUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBub21pbmVlIHJvbGUnKVxuICB9XG4gIFxuICBpZighd2ViMy51dGlscy5pc0FkZHJlc3Mobm9taW5hdG9yKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignbm9taW5hdG9yIGlzIG5vdCBhbiBhZGRyZXNzJylcbiAgfVxuICBcbiAgaWYoIXdlYjMudXRpbHMuaXNBZGRyZXNzKG5vbWluZWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdub21pbmVlIGlzIG5vdCBhbiBhZGRyZXNzJylcbiAgfVxuICBcbiAgaWYoIXdlYjMudXRpbHMuaXNBZGRyZXNzKHBjYXNlKSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncGNhc2UgaXMgbm90IGFuIGFkZHJlc3MnKVxuICB9XG4gIGNvbnN0IGJ1bmRsZUlkID0gYXdhaXQgY29udHJhY3RcbiAgICAuYnVuZGxlRm9yKHtcbiAgICAgIGluc3RhbmNlOiBwY2FzZSxcbiAgICB9KVxuXG4gIGNvbnN0IGFjY2Vzc0NvbnRyb2xBZGRyZXNzID0gYXdhaXQgY29udHJhY3RcbiAgICAuZmluZFJ1bnRpbWVQb2xpY3koe1xuICAgICAgYWRkcmVzczogcGNhc2UsXG4gICAgfSlcbiAgICBcbiAgZGVidWcoeyBhY2Nlc3NDb250cm9sQWRkcmVzcyB9KVxuXG4gIGlmIChhY2Nlc3NDb250cm9sQWRkcmVzcyA9PT0gJzB4MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Byb2Nlc3MgaW5zdGFuY2Ugbm90IGZvdW5kJylcbiAgfVxuICBkZWJ1ZyhgJHtub21pbmF0b3JSb2xlfVske25vbWluYXRvcn1dIGlzIG5vbWluYXRpbmcgJHtub21pbmVlUm9sZX1bJHtub21pbmVlfV1gKTtcbiAgZGVidWcoYFByb2Nlc3MgQ2FzZTogJHtwY2FzZX1gKTtcbiAgY29uc3Qgbm9taW5hdGVkID0gYXdhaXQgY3JlYXRlQ29udHJhY3Qod2ViMykoSlNPTi5wYXJzZShwb2xpY3kuYWNjZXNzQ29udHJvbEFiaSksIGFjY2Vzc0NvbnRyb2xBZGRyZXNzKVxuICAgIC5tZXRob2RzXG4gICAgLm5vbWluYXRlKFxuICAgICAgcm9sZUluZGV4TWFwLmdldChub21pbmF0b3JSb2xlKSxcbiAgICAgIHJvbGVJbmRleE1hcC5nZXQobm9taW5lZVJvbGUpLFxuICAgICAgbm9taW5hdG9yLFxuICAgICAgbm9taW5lZSxcbiAgICAgIHBjYXNlLFxuICAgIClcbiAgICAuc2VuZCh7XG4gICAgICBmcm9tOiBub21pbmF0b3IsXG4gICAgICBnYXM6IDQ3MDAwMDBcbiAgICB9KVxuXG4gIGRlYnVnKHsgbm9taW5hdGVkIH0pXG4gIHJldHVybiB7XG4gICAgaWQ6IGJ1bmRsZUlkLFxuICAgIGFkZHJlc3M6IHBjYXNlLFxuICAgIHJlZ2lzdHJ5Q29udHJhY3Q6IGNvbnRyYWN0LFxuICB9XG59Il19